query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(len(numbers) - 1):
        if abs(numbers[i] - numbers[i + 1]) < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/127', 'HumanEval/21', '92']","from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(len(numbers) - 1):
        if abs(numbers[i] - numbers[i + 1]) < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/127', 'HumanEval/21', '92', '431', '670', '680', 'HumanEval/5', 'HumanEval/52']","from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/1'],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string.replace("" "", """"):
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/1', 'HumanEval/6', 'HumanEval/38', 'HumanEval/132', 'HumanEval/28']","from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,10,normal,"['HumanEval/1', 'HumanEval/6', 'HumanEval/38', 'HumanEval/132', 'HumanEval/28', '374', 'HumanEval/7', '778', 'HumanEval/29', '157']","from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string.replace("" "", """"):
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/2'],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/2', 'HumanEval/99', '194', '518', '100']","def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/2', 'HumanEval/99', '194', '518', '100', '931', '830', '98', '519', '246']","def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', '677', 'HumanEval/134', '605', '92']","from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""

    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', '677', 'HumanEval/134', '605', '92', 'HumanEval/94', '481', '541', 'HumanEval/31', '138']","from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""

    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['717'],"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    if not numbers:
        return 0.0
    mean = sum(numbers) / len(numbers)
    mad = sum(abs(x - mean) for x in numbers) / len(numbers)
    return mad",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['717', 'HumanEval/4', '875', '63', '432']","def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    if not numbers:
        return 0.0
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['717', 'HumanEval/4', '875', '63', '432', 'HumanEval/20', 'HumanEval/0', '599', 'HumanEval/21', '588']","def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""

    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,5,normal,"['HumanEval/5', 'HumanEval/20', 'HumanEval/0', 'HumanEval/25', 'HumanEval/32']","from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""

    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', 'HumanEval/20', 'HumanEval/0', 'HumanEval/25', 'HumanEval/32', 'HumanEval/9', 'HumanEval/21', 'HumanEval/8', 'HumanEval/4', 'HumanEval/1']","def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
    def parse_paren_group(paren_group: str) -> int:
        depth = 0
        max_depth = 0
        for char in paren_group:
            if char == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif char == ')':
                depth -= 1
        return max_depth

    return [parse_paren_group(paren_group) for paren_group in paren_string.split(' ') if paren_group]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,5,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/56', 'HumanEval/61', 'HumanEval/38']","from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""

    def parse_paren_group(paren_group: str) -> int:
        depth = 0
        max_depth = 0
        for c in paren_group:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif c == ')':
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,10,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/56', 'HumanEval/61', 'HumanEval/38', 'HumanEval/132', 'HumanEval/7', 'HumanEval/28', '247', 'HumanEval/19']","from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""

    def parse_paren_group(paren_group: str) -> int:
        depth = 0
        max_depth = 0
        for c in paren_group:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/1', 'HumanEval/28', 'HumanEval/14']","from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/1', 'HumanEval/28', 'HumanEval/14', 'HumanEval/12', 'HumanEval/6', '823', '861', '374']","from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', '65', '758', '779', '142']","from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""

    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', '65', '758', '779', '142', '212', '170', 'HumanEval/60', '870', '133']","from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""

    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""

    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,5,normal,"['HumanEval/9', '805', '90', '443', 'HumanEval/21']","def rolling_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', '805', '90', '443', 'HumanEval/21', '418', '290', '517', '294', '366']","def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""

    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""

    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', 'HumanEval/107', '823', '557', 'HumanEval/82']","def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""

    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', 'HumanEval/107', '823', '557', 'HumanEval/82', '523', '131', '964', '913', '210']","def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""

    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', '119', '456', 'HumanEval/7', '690']","from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', '119', '456', 'HumanEval/7', '690', '589', '699', '595', 'HumanEval/28', '909']","def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""

    if not strings:
        return None

    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', '232', 'HumanEval/28', 'HumanEval/7', 'HumanEval/1']","from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', '232', 'HumanEval/28', 'HumanEval/7', 'HumanEval/1', '393', 'HumanEval/6', 'HumanEval/14', 'HumanEval/29', '90']","from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""

    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['218'],"import math

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['218', 'HumanEval/13', '45', '687', '520']","def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['218', 'HumanEval/13', '45', '687', '520', '47', '501', '151', '356', '589']","def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/29'],"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string) + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/29', 'HumanEval/14', 'HumanEval/28', 'HumanEval/1', 'HumanEval/7']","from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/29', 'HumanEval/14', 'HumanEval/28', 'HumanEval/1', 'HumanEval/7', 'HumanEval/12', '374', 'HumanEval/10', 'HumanEval/6', '181']","from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['HumanEval/15'],"def string_sequence(n: int) -> str:
    return''.join([str(x) for x in range(n + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,5,normal,"['HumanEval/15', 'HumanEval/36', '552', '128', '220']","def string_sequence(n: int) -> str:
    return''.join([str(x) for x in range(n + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,10,normal,"['HumanEval/15', 'HumanEval/36', '552', '128', '220', '628', '125', '49', '154', '84']","def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return''.join([str(x) for x in range(n + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['666'],"def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['666', '165', '813', '684', '182']","def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['666', '165', '813', '684', '182', '523', '557', 'HumanEval/23', 'HumanEval/27', 'HumanEval/18']","def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o|.| o| o|.|.|.|.| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""

    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
17,HumanEval/17,5,normal,"['HumanEval/17', 'HumanEval/18', 'HumanEval/1', 'HumanEval/14', 'HumanEval/6']","from typing import List


def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,10,normal,"['HumanEval/17', 'HumanEval/18', 'HumanEval/1', 'HumanEval/14', 'HumanEval/6', '667', '819', '390', 'HumanEval/19', 'HumanEval/5']","from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o|.| o| o|.|.|.|.| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""

    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['HumanEval/18'],"def how_many_times(string: str, substring: str) -> int:
    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['HumanEval/18', '666', '165', '684', '813']","def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    times = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1
    return times",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['HumanEval/18', '666', '165', '684', '813', '823', '523', '667', 'HumanEval/23', 'HumanEval/16']","def how_many_times(string: str, substring: str) -> int:
    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import List

def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""
    num_dict = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted(numbers.split(), key=lambda x: num_dict[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', '749', 'HumanEval/145', 'HumanEval/21', 'HumanEval/5']","from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""

    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', '749', 'HumanEval/145', 'HumanEval/21', 'HumanEval/5', 'HumanEval/105', '104', '896', '915', '670']","def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""

    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = None
    min_distance = float('inf')

    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            distance = abs(numbers[i] - numbers[j])
            if distance < min_distance:
                min_distance = distance
                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))

    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,5,normal,"['HumanEval/20', 'HumanEval/0', 'HumanEval/21', 'HumanEval/5', 'HumanEval/9']","from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = None
    min_distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = abs(elem - elem2)
                if min_distance is None or distance < min_distance:
                    min_distance = distance
                    closest_pair = (min(elem, elem2), max(elem, elem2))

    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,10,normal,"['HumanEval/20', 'HumanEval/0', 'HumanEval/21', 'HumanEval/5', 'HumanEval/9', '755', '108', '308', '943', '251']","from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""

    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,5,normal,"['HumanEval/21', '409', 'HumanEval/4', 'HumanEval/20', 'HumanEval/5']","from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""

    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,10,normal,"['HumanEval/21', '409', 'HumanEval/4', 'HumanEval/20', 'HumanEval/5', 'HumanEval/9', '366', '947', '120', '517']","from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""

    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,5,normal,"['HumanEval/22', 'HumanEval/5', 'HumanEval/26', 'HumanEval/9', 'HumanEval/25']","from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,10,normal,"['HumanEval/22', 'HumanEval/5', 'HumanEval/26', 'HumanEval/9', 'HumanEval/25', 'HumanEval/19', 'HumanEval/21', '817', '883', 'HumanEval/8']","from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""

    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['HumanEval/23'],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['HumanEval/23', '238', '828', 'HumanEval/16', 'HumanEval/18']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['HumanEval/23', '238', '828', 'HumanEval/16', 'HumanEval/18', '628', '667', '118', '165', '666']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['HumanEval/59'],"def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(n-1, 1, -1):
        if n % i == 0:
            return i
    return 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['HumanEval/59', '232', '392', '485', '735']","def largest_divisor(n: int) -> int:
    for i in range(n-1, 1, -1):
        if n % i == 0:
            return i
    return 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['HumanEval/59', '232', '392', '485', '735', '32', 'HumanEval/123', '194', '416', 'HumanEval/76']","def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(n-1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/96'],"def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while divisor * divisor <= n:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    if n > 1:
        factors.append(n)
    return factors",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
25,HumanEval/25,5,normal,"['HumanEval/96', '901', '122', 'HumanEval/39', '843']","def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while divisor * divisor <= n:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    if n > 1:
        factors.append(n)
    return factors",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
25,HumanEval/25,10,normal,"['HumanEval/96', '901', '122', 'HumanEval/39', '843', '685', '32', '260', '905', 'HumanEval/59']","def factorize(n: int) -> List[int]:
    factors = []
    for i in range(2, n + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    return factors",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    seen = set()
    result = []
    for num in numbers:
        if num not in seen:
            seen.add(num)
            result.append(num)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,5,normal,"['HumanEval/26', '755', '22', '852', 'HumanEval/20']","from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    seen = set()
    result = []
    for num in numbers:
        if num not in seen:
            seen.add(num)
            result.append(num)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,10,normal,"['HumanEval/26', '755', '22', '852', 'HumanEval/20', 'HumanEval/5', '353', '659', '507', '603']","from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    seen = set()
    seen_add = seen.add
    seen_twice = set()
    seen_twice_add = seen_twice.add
    for x in numbers:
        if x in seen:
            seen_twice_add(x)
        else:
            seen_add(x)
    return [x for x in numbers if x not in seen_twice]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '182', '364', 'HumanEval/10']","def flip_case(string: str) -> str:
    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '182', '364', 'HumanEval/10', '477', 'HumanEval/132', '624', '386', '523']","def flip_case(string: str) -> str:
    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', 'HumanEval/14', 'HumanEval/29', 'HumanEval/1', 'HumanEval/7']","from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,10,normal,"['HumanEval/28', 'HumanEval/14', 'HumanEval/29', 'HumanEval/1', 'HumanEval/7', '390', '570', 'HumanEval/11', '374', 'HumanEval/38']","from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/1', 'HumanEval/28']","from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""

    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/1', 'HumanEval/28', '181', 'HumanEval/10', '374', '823', 'HumanEval/12']","from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/30'],"def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,5,normal,"['HumanEval/30', '610', 'HumanEval/37', 'HumanEval/34', 'HumanEval/42']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,10,normal,"['HumanEval/30', '610', 'HumanEval/37', 'HumanEval/34', 'HumanEval/42', '472', 'HumanEval/33', 'HumanEval/40', 'HumanEval/35', 'HumanEval/57']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/96'],"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/96', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39', '685']","def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/96', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39', '685', '122', 'HumanEval/78', '600', '887', '260']","def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def poly(xs: list, x: float) -> float:
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list) -> float:
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
    begin, end = -1.0, 1.0
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,5,normal,"['HumanEval/32', '847', 'HumanEval/62', '406', '20']","import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""

    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,10,normal,"['HumanEval/32', '847', 'HumanEval/62', '406', '20', '801', '587', '148', '855', '768']","import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""

    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/34', '108', '472', '889']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/34', '108', '472', '889', 'HumanEval/47', 'HumanEval/57', 'HumanEval/87', 'HumanEval/37', '672']","def sort_third(l: list):
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', 'HumanEval/33', '472', 'HumanEval/57', 'HumanEval/47']","def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', 'HumanEval/33', '472', 'HumanEval/57', 'HumanEval/47', '889', 'HumanEval/37', 'HumanEval/42', 'HumanEval/30', '569']","def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['418'],"def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['418', '517', '90', '443', '613']","def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['418', '517', '90', '443', '613', '357', '366', '290', 'HumanEval/42', '120']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['641'],"def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['641', '781', 'HumanEval/146', '289', '211']","def fizz_buzz(n: int) -> int:
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['641', '781', 'HumanEval/146', '289', '211', 'HumanEval/131', 'HumanEval/55', 'HumanEval/36', '479', '735']","def fizz_buzz(n: int) -> int:
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/37'],"def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
    return [sorted(l[::2])[i] if i % 2 == 0 else l[i] for i in range(len(l))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/37', 'HumanEval/34', 'HumanEval/33', '889', '472']","def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
    return [sorted(l[::2])[i] if i % 2 == 0 else l[i] for i in range(len(l))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/37', 'HumanEval/34', 'HumanEval/33', '889', '472', 'HumanEval/47', '594', '784', '38', '881']","def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
    evens = l[::2]
    evens.sort()
    return [evens[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', 'HumanEval/89', 'HumanEval/50', '321', '386']","def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,10,normal,"['HumanEval/38', 'HumanEval/89', 'HumanEval/50', '321', '386', '39', '668', 'HumanEval/86', '604', 'HumanEval/64']","def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['HumanEval/39'],"def prime_fib(n: int) -> int:
    def is_prime(num: int) -> bool:
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
        if is_prime(fib_sequence[-1]):
            n -= 1
    return fib_sequence[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['HumanEval/39', 'HumanEval/96', 'HumanEval/55', '873', '122']","def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""

    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    fib_numbers = [0, 1]
    while len(fib_numbers) < n:
        next_fib = fib_numbers[-1] + fib_numbers[-2]
        fib_numbers.append(next_fib)
        if is_prime(next_fib):
            n -= 1
    return fib_numbers[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['HumanEval/39', 'HumanEval/96', 'HumanEval/55', '873', '122', '685', 'HumanEval/63', 'HumanEval/59', '32', '260']","def prime_fib(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    fib_numbers = [0, 1]
    while len(fib_numbers) < n:
        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])

    prime_fibs = [num for num in fib_numbers if is_prime(num)]

    return prime_fibs[n-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['HumanEval/40'],"def triples_sum_to_zero(l: list):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,5,normal,"['HumanEval/40', '121', '142', '340', '129']","def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    l.sort()
    for i in range(len(l) - 2):
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total == 0:
                return True
            elif total < 0:
                left += 1
            else:
                right -= 1
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,10,normal,"['HumanEval/40', '121', '142', '340', '129', '916', '65', 'HumanEval/142', '481', '212']","def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""

    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['187'],"def car_race_collision(n: int) -> int:
    return n * (n - 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,5,normal,"['187', '431', '232', '849', '663']","def car_race_collision(n: int) -> int:
    return n**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,10,normal,"['187', '431', '232', '849', '663', '414', '763', '540', '890', '953']","def car_race_collision(n: int):
    return n**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', '610', '255', 'HumanEval/30', '262']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', '610', '255', 'HumanEval/30', '262', 'HumanEval/33', '472', 'HumanEval/37', 'HumanEval/34', '462']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['HumanEval/40'],"def pairs_sum_to_zero(l: list) -> bool:
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['HumanEval/40', '916', 'HumanEval/85', '415', '129']","def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['HumanEval/40', '916', 'HumanEval/85', '415', '129', '324', 'HumanEval/43', '142', '782', 'HumanEval/94']","def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['HumanEval/44'],"def change_base(x: int, base: int) -> str:
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if base < 2 or base > 9:
        raise ValueError(""Base must be between 2 and 9"")
    
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,5,normal,"['HumanEval/44', '194', 'HumanEval/76', '148', '909']","def change_base(x: int, base: int) -> str:
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if base < 2 or base > 9:
        raise ValueError(""Base must be between 2 and 9"")
    
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,10,normal,"['HumanEval/44', '194', 'HumanEval/76', '148', '909', '724', '539', '518', '848', 'HumanEval/144']","def change_base(x: int, base: int) -> str:
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if base < 2 or base > 9:
        raise ValueError(""Base must be between 2 and 9"")
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,1,normal,['742'],"import math

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,5,normal,"['742', '52', '848', '488', '814']","def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,10,normal,"['742', '52', '848', '488', '814', '198', '163', '458', 'HumanEval/71', '574']","import math

def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,1,normal,['873'],"def fib4(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1 or n == 3:
        return 0
    elif n == 2:
        return 2
    else:
        a, b, c, d = 0, 0, 2, 0
        for _ in range(4, n + 1):
            a, b, c, d = b, c, d, a + b + c + d
        return d",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', '84', '279']","def fib4(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    else:
        a, b, c, d = 0, 0, 2, 0
        for _ in range(4, n + 1):
            a, b, c, d = b, c, d, a + b + c + d
        return d",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', '84', '279', 'HumanEval/100', 'HumanEval/46', '267', '549', '770']","def fib4(n: int) -> int:
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0

    a, b, c, d = 0, 0, 2, 0
    for _ in range(4, n + 1):
        a, b, c, d = b, c, d, a + b + c + d
    return d",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,1,normal,['HumanEval/47'],"def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,5,normal,"['HumanEval/47', '397', '432', 'HumanEval/37', '472']","def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,10,normal,"['HumanEval/47', '397', '432', 'HumanEval/37', '472', 'HumanEval/33', 'HumanEval/34', 'HumanEval/21', 'HumanEval/35', 'HumanEval/30']","def median(l: list):
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['HumanEval/48'],"def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['HumanEval/48', 'HumanEval/10', 'HumanEval/107', '913', '482']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['HumanEval/48', 'HumanEval/10', 'HumanEval/107', '913', '482', '900', '113', '756', '210', '643']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,1,normal,['HumanEval/49'],"def modp(n: int, p: int) -> int:
    return pow(2, n, p)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,5,normal,"['HumanEval/49', '291', '36', '735', '32']","def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,10,normal,"['HumanEval/49', '291', '36', '735', '32', 'HumanEval/39', '260', '289', '545', '671']","def modp(n: int, p: int):
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,1,normal,['HumanEval/65'],"def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,5,normal,"['HumanEval/65', 'HumanEval/89', 'HumanEval/50', 'HumanEval/38', '386']","def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,10,normal,"['HumanEval/65', 'HumanEval/89', 'HumanEval/50', 'HumanEval/38', '386', 'HumanEval/112', '230', '131', 'HumanEval/93', '668']","def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,1,normal,['131'],"def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
    return ''.join([char for char in text if char.lower() not in 'aeiou'])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,5,normal,"['131', 'HumanEval/118', 'HumanEval/93', '667', 'HumanEval/64']","def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
    vowels = ""aeiouAEIOU""
    return ''.join([char for char in text if char not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['131', 'HumanEval/118', 'HumanEval/93', '667', 'HumanEval/64', '495', '478', '459', 'HumanEval/51', '319']","def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
    vowels = ""aeiouAEIOU""
    return ''.join([char for char in text if char not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['HumanEval/52'],"def below_threshold(l: list, t: int) -> bool:
    return all(e < t for e in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['HumanEval/52', 'HumanEval/0', '884', '228', 'HumanEval/57']","def below_threshold(l: list, t: int) -> bool:
    return all(e < t for e in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['HumanEval/52', 'HumanEval/0', '884', '228', 'HumanEval/57', 'HumanEval/40', '472', '92', 'HumanEval/126', '433']","def below_threshold(l: list, t: int) -> bool:
    return all(e < t for e in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/53'],"def add(x: int, y: int) -> int:
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/53', '675', '501', '127', '45']","def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/53', '675', '501', '127', '45', '339', '729', '498', '682', '723']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['871'],"def same_chars(s0: str, s1: str) -> bool:
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,5,normal,"['871', '165', 'HumanEval/112', '565', '230']","def same_chars(s0: str, s1: str) -> bool:
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,10,normal,"['871', '165', 'HumanEval/112', '565', '230', '386', '532', '874', '131', '91']","def same_chars(s0: str, s1: str) -> bool:
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,1,normal,['HumanEval/55'],"def fib(n: int) -> int:
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['HumanEval/55', '873', 'HumanEval/63', '692', 'HumanEval/41']","def fib(n: int) -> int:
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['HumanEval/55', '873', 'HumanEval/63', '692', 'HumanEval/41', '35', 'HumanEval/83', '681', '479', '765']","def fib(n: int) -> int:
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['HumanEval/132'],"def correct_bracketing(brackets: str) -> bool:
    stack = []
    for bracket in brackets:
        if bracket == '<':
            stack.append(bracket)
        elif bracket == '>':
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '175', 'HumanEval/10']","def correct_bracketing(brackets: str) -> bool:
    
    stack = []
    for bracket in brackets:
        if bracket == '<':
            stack.append(bracket)
        elif bracket == '>':
            if not stack or stack[-1]!= '<':
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '175', 'HumanEval/10', '640', '771', '405', '913', '396']","def correct_bracketing(brackets: str) -> bool:
    stack = []
    for bracket in brackets:
        if bracket == '<':
            stack.append(bracket)
        elif bracket == '>':
            if not stack or stack[-1]!= '<':
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['472'],"def monotonic(l: list) -> bool:
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['472', 'HumanEval/52', 'HumanEval/57', '884', 'HumanEval/40']","def monotonic(l: list):
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,10,normal,"['472', 'HumanEval/52', 'HumanEval/57', '884', 'HumanEval/40', '594', '228', '38', '889', '881']","def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def common(l1: list, l2: list):
    return sorted(set(l1) & set(l2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,5,normal,"['HumanEval/58', '508', '431', '161', '298']","def common(l1: list, l2: list):
    return sorted(set(l1).intersection(set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,10,normal,"['HumanEval/58', '508', '431', '161', '298', '216', '872', '414', '262', '108']","def common(l1: list, l2: list):
    return sorted(set(l1) & set(l2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"def largest_prime_factor(n: int) -> int:
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    largest_factor = 1
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            largest_factor = max(largest_factor, i)
    return largest_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '32', '260', '685', '122']","def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    largest = -1
    while n % 2 == 0:
        largest = 2
        n >>= 1
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            largest = i
            n = n / i
    if n > 2:
        largest = n
    return int(largest)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '32', '260', '685', '122', 'HumanEval/96', '901', 'HumanEval/39', '843', '232']","def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    largest_factor = 1
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            largest_factor = max(largest_factor, i)
    return largest_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['212'],"def sum_to_n(n: int) -> int:
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['212', '420', '271', '504', 'HumanEval/60']","def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
    return sum(range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,10,normal,"['212', '420', '271', '504', 'HumanEval/60', '634', '837', '547', '164', '162']","def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
    return sum(range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['HumanEval/132'],"def correct_bracketing(brackets: str) -> bool:
    balance = 0
    for bracket in brackets:
        if bracket == '(':
            balance += 1
        elif bracket == ')':
            balance -= 1
        if balance < 0:
            return False
    return balance == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,5,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '175', 'HumanEval/10']","def correct_bracketing(brackets: str) -> bool:
    
    stack = []
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack or stack[-1]!= '(':
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,10,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '175', 'HumanEval/10', '771', '405', '640', '91', '352']","def correct_bracketing(brackets: str) -> bool:
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['HumanEval/32'],"def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 +....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [xs[i] * i for i in range(1, len(xs))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['HumanEval/32', 'HumanEval/62', '847', '62', '406']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['HumanEval/32', 'HumanEval/62', '847', '62', '406', 'HumanEval/65', 'HumanEval/53', '430', '682', 'HumanEval/106']","def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 +....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['HumanEval/63'],"def fibfib(n: int) -> int:
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c
        return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,5,normal,"['HumanEval/63', 'HumanEval/55', '873', '84', '901']","def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c
        return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['HumanEval/63', 'HumanEval/55', '873', '84', '901', '169', '905', '692', '549', '770']","def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c
        return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', '667', 'HumanEval/118', '131', 'HumanEval/93']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,10,normal,"['HumanEval/64', '667', 'HumanEval/118', '131', 'HumanEval/93', '165', 'HumanEval/98', '523', '813', '666']","def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,1,normal,['HumanEval/65'],"def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[-shift:] + s[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/65', '406', 'HumanEval/104', '909', '739']","def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/65', '406', 'HumanEval/104', '909', '739', '323', '830', '304', '501', 'HumanEval/38']","def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['HumanEval/66'],"def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,5,normal,"['HumanEval/66', 'HumanEval/67', '398', '828', '615']","def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,10,normal,"['HumanEval/66', 'HumanEval/67', '398', '828', '615', '566', '148', '125', '98', 'HumanEval/89']","def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['109'],"def fruit_distribution(s, n):
    # Split the string into a list of words
    words = s.split()
    
    # Extract the number of apples and oranges from the list of words
    apples = int(words[0])
    oranges = int(words[3])
    
    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits
    mangoes = n - apples - oranges
    
    # Return the number of mangoes
    return mangoes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['109', 'HumanEval/67', '540', '863', '61']","def fruit_distribution(s, n):
    count = 0
    for i in range(n):
        if s[i] =='':
            continue
        elif s[i].isdigit():
            count += int(s[i])
        elif s[i] == 'a':
            count += 1
        elif s[i] == 'o':
            count -= 1
    return n - count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['109', 'HumanEval/67', '540', '863', '61', 'HumanEval/84', '898', '57', '25', '592']","def fruit_distribution(s,n):
    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['HumanEval/68'],"def pluck(arr):
    if not arr:
        return []
    evens = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]
    if not evens:
        return []
    return list(min(evens, key=lambda x: (x[0], x[1])))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,5,normal,"['HumanEval/68', '940', '550', '145', 'HumanEval/109']","def pluck(arr):
    if not arr:
        return []
    evens = [x for x in arr if x % 2 == 0]
    if not evens:
        return []
    return [min(evens), arr.index(min(evens))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['HumanEval/68', '940', '550', '145', 'HumanEval/109', '867', '627', 'HumanEval/120', '134', '288']","def pluck(arr):
    evens = [x for x in arr if x % 2 == 0]
    if not evens:
        return []
    return [min(evens), arr.index(min(evens))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,1,normal,['HumanEval/69'],"def search(lst):
    freq = [0] * (max(lst) + 1)
    for num in lst:
        freq[num] += 1
    
    max_val = -1
    for num, count in enumerate(freq):
        if num > 0 and count >= num:
            max_val = max(max_val, num)
    
    return max_val",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['HumanEval/69', '418', '819', 'HumanEval/94', '613']","def search(lst):
    freq = [0] * (max(lst) + 1)
    for i in lst:
        freq[i] += 1

    ans = -1
    for i in range(1, len(freq)):
        if freq[i] >= i:
            ans = i
    
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['HumanEval/69', '418', '819', 'HumanEval/94', '613', 'HumanEval/113', '436', '313', '446', 'HumanEval/59']","def search(lst):
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['472'],"def strange_sort_list(lst):
    result = []
    while lst:
        result.append(min(lst))
        lst.remove(min(lst))
        if lst:
            result.append(max(lst))
            lst.remove(max(lst))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,5,normal,"['472', 'HumanEval/34', '889', 'HumanEval/33', 'HumanEval/149']","def strange_sort_list(lst):
    lst.sort()
    result = []
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,10,normal,"['472', 'HumanEval/34', '889', 'HumanEval/33', 'HumanEval/149', 'HumanEval/87', '457', 'HumanEval/57', '381', 'HumanEval/47']","def strange_sort_list(lst):
    sorted_lst = sorted(lst)
    result = []
    while sorted_lst:
        result.append(sorted_lst.pop(0))
        if sorted_lst:
            result.append(sorted_lst.pop())
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,1,normal,['HumanEval/71'],"def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,5,normal,"['HumanEval/71', '198', '742', '826', '488']","def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['HumanEval/71', '198', '742', '826', '488', '458', '176', '814', '848', '52']","def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['HumanEval/72'],"def will_it_fly(q, w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['HumanEval/72', 'HumanEval/3', '916', 'HumanEval/57', '722']","def will_it_fly(q,w):
    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i]!= q[j]:
            return False
        i+=1
        j-=1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,10,normal,"['HumanEval/72', 'HumanEval/3', '916', 'HumanEval/57', '722', '26', '689', 'HumanEval/145', '677', '949']","def will_it_fly(q,w):
    if sum(q) > w:
        return False
    i, j = 0, len(q)-1
    while i<j:
        if q[i]!= q[j]:
            return False
        i+=1
        j-=1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,1,normal,['763'],"def smallest_change(arr):
    left, right = 0, len(arr) - 1
    changes = 0
    while left < right:
        if arr[left]!= arr[right]:
            changes += 1
        left += 1
        right -= 1
    return changes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,5,normal,"['763', 'HumanEval/68', 'HumanEval/109', '540', 'HumanEval/105']","def smallest_change(arr):
    left, right = 0, len(arr) - 1
    changes = 0
    while left < right:
        if arr[left]!= arr[right]:
            changes += 1
        left += 1
        right -= 1
    return changes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,10,normal,"['763', 'HumanEval/68', 'HumanEval/109', '540', 'HumanEval/105', '145', '323', '288', 'HumanEval/88', 'HumanEval/135']","def smallest_change(arr):
    changes = 0
    i, j = 0, len(arr) - 1
    while i < j:
        if arr[i]!= arr[j]:
            changes += 1
        i += 1
        j -= 1
    return changes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['HumanEval/74'],"def total_match(lst1, lst2):
    l1 = sum(len(s) for s in lst1)
    l2 = sum(len(s) for s in lst2)
    return lst1 if l1 <= l2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,5,normal,"['HumanEval/74', '728', 'HumanEval/110', '699', '298']","def total_match(lst1, lst2):
    l1 = sum(len(s) for s in lst1)
    l2 = sum(len(s) for s in lst2)
    return lst1 if l1 <= l2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,10,normal,"['HumanEval/74', '728', 'HumanEval/110', '699', '298', '595', '871', '648', 'HumanEval/113', '570']","def total_match(lst1, lst2):
    l1 = sum(len(st) for st in lst1)
    l2 = sum(len(st) for st in lst2)
    return lst1 if l1 <= l2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(i + 1, 101):  # Start from i + 1 to avoid duplicate factors
            if not is_prime(j):
                continue
            for k in range(j + 1, 101):  # Start from j + 1 to avoid duplicate factors
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/96', 'HumanEval/78', '685', 'HumanEval/39']","def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(i, 101):  # Start from i to avoid duplicate checks
            if not is_prime(j):
                continue
            for k in range(j, 101):  # Start from j to avoid duplicate checks
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/96', 'HumanEval/78', '685', 'HumanEval/39', 'HumanEval/59', '122', '121', '260', '843']","def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(i, 101):
            if not is_prime(j):
                continue
            for k in range(j, 101):
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,1,normal,['HumanEval/76'],"def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power *= n
    return power == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,5,normal,"['HumanEval/76', '887', '600', 'HumanEval/144', 'HumanEval/39']","def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
    if x == 1:
        return n == 1
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power *= n
    return power == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,10,normal,"['HumanEval/76', '887', '600', 'HumanEval/144', 'HumanEval/39', '138', 'HumanEval/59', '707', '803', '768']","def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power *= n
    return power == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['HumanEval/75'],"def iscube(a):
    if a < 0:
        a = -a
    for i in range(1, int(a**(1/3)) + 1):
        if i**3 == a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,5,normal,"['HumanEval/75', '600', '887', '303', '405']","def iscube(a):
    if a < 0:
        a = -a
    for i in range(1, 101):
        if i**3 == a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,10,normal,"['HumanEval/75', '600', '887', '303', '405', '121', 'HumanEval/39', '359', '188', '916']","def iscube(a):
    if a == 0:
        return True
    abs_a = abs(a)
    cube_root = abs_a ** (1/3)
    return round(cube_root) ** 3 == abs_a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,1,normal,['HumanEval/78'],"def hex_key(num):
    primes = {'2', '3', '5', '7', 'B', 'D'}
    return sum(1 for digit in num if digit in primes)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['HumanEval/78', 'HumanEval/96', '122', '958', 'HumanEval/146']","def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,10,normal,"['HumanEval/78', 'HumanEval/96', '122', '958', 'HumanEval/146', 'HumanEval/39', 'HumanEval/75', '828', 'HumanEval/104', '467']","def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,1,normal,['HumanEval/79'],"def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['HumanEval/79', '24', '99', '194', 'HumanEval/99']","def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['HumanEval/79', '24', '99', '194', 'HumanEval/99', 'HumanEval/2', '467', '830', '909', '78']","def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['79'],"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if len(set(s[i:i+3])) < 3:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,5,normal,"['79', '523', '967', '964', 'HumanEval/38']","def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if len(set(s[i:i+3])) < 3:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['79', '523', '967', '964', 'HumanEval/38', 'HumanEval/82', '828', '396', '737', '913']","def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if len(set(s[i:i+3])) < 3:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def numerical_letter_grade(grades):
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,5,normal,"['HumanEval/81', '722', '64', '690', 'HumanEval/5']","def numerical_letter_grade(grades):
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,10,normal,"['HumanEval/81', '722', '64', '690', 'HumanEval/5', '345', '516', '308', '503', '592']","def numerical_letter_grade(grades):
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,1,normal,['HumanEval/82'],"def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
    n = len(string)
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['HumanEval/82', 'HumanEval/78', '523', 'HumanEval/75', '871']","def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
    length = len(string)
    if length < 2:
        return False
    for i in range(2, int(length ** 0.5) + 1):
        if length % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,10,normal,"['HumanEval/82', 'HumanEval/78', '523', 'HumanEval/75', '871', 'HumanEval/96', 'HumanEval/23', '685', 'HumanEval/39', '175']","def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    return is_prime(len(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,1,normal,['109'],"def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    if n == 1:
        return 1
    else:
        return 18 * (10 ** (n - 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,5,normal,"['109', '745', '671', '905', '167']","def starts_one_ends(n):
    if n == 1:
        return 1
    else:
        return 2 * (10 ** (n - 1)) - 10 ** (n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,10,normal,"['109', '745', '671', '905', '167', '711', '311', '627', '211', '365']","def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    if n == 1:
        return 1
    return 2 * (10 ** (n - 1)) - 10 ** (n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,1,normal,['566'],"def solve(N):
    return bin(sum(int(digit) for digit in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,5,normal,"['566', 'HumanEval/84', '148', '212', 'HumanEval/60']","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,10,normal,"['566', 'HumanEval/84', '148', '212', 'HumanEval/60', '547', '504', '420', '125', '271']","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['HumanEval/113'],"def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,5,normal,"['HumanEval/113', '881', 'HumanEval/37', '784', 'HumanEval/121']","def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,10,normal,"['HumanEval/113', '881', 'HumanEval/37', '784', 'HumanEval/121', '38', '594', 'HumanEval/155', '610', '41']","def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['386'],"def anti_shuffle(s):
    words = s.split(' ')
    ordered_words = []
    for word in words:
        ordered_word = ''.join(sorted(word))
        ordered_words.append(ordered_word)
    return''.join(ordered_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['386', 'HumanEval/27', '557', 'HumanEval/38', 'HumanEval/158']","def anti_shuffle(s):
    words = s.split()
    ordered_words = []
    for word in words:
        ordered_word = ''.join(sorted(word))
        ordered_words.append(ordered_word)
    return''.join(ordered_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['386', 'HumanEval/27', '557', 'HumanEval/38', 'HumanEval/158', '674', '628', '374', 'HumanEval/118', 'HumanEval/161']","def anti_shuffle(s):
    words = s.split()
    ordered_words = []
    for word in words:
        ordered_word = ''.join(sorted(word))
        ordered_words.append(ordered_word)
    return''.join(ordered_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['HumanEval/87'],"def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2)...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,5,normal,"['HumanEval/87', '380', '241', '418', '834']","def get_row(lst, x):
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,10,normal,"['HumanEval/87', '380', '241', '418', '834', '457', '587', '827', 'HumanEval/20', '918']","def get_row(lst, x):
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,1,normal,['HumanEval/88'],"def sort_array(array):
    if not array:
        return []
    else:
        return sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['HumanEval/88', '915', '777', '433', 'HumanEval/105']","def sort_array(array):
    if not array:
        return []
    
    is_odd = (array[0] + array[-1]) % 2 == 1
    return sorted(array, reverse=not is_odd)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['HumanEval/88', '915', '777', '433', 'HumanEval/105', '12', 'HumanEval/145', '134', '57', 'HumanEval/116']","def sort_array(array):
    if not array:
        return []
    
    is_odd = (array[0] + array[-1]) % 2!= 0
    return sorted(array, reverse=is_odd)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,1,normal,['HumanEval/89'],"def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/89', 'HumanEval/50', 'HumanEval/38', '828', '386']","def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/89', 'HumanEval/50', 'HumanEval/38', '828', '386', 'HumanEval/101', '343', 'HumanEval/112', '131', 'HumanEval/64']","def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""

    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['457'],"def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst.sort()
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['457', 'HumanEval/90', '410', 'HumanEval/136', '947']","def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst.sort()
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['457', 'HumanEval/90', '410', 'HumanEval/136', '947', '95', '371', 'HumanEval/149', '893', '322']","def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst.sort()
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I'for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '79', '13', '964', '897']","def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I'for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '79', '13', '964', '897', '862', 'HumanEval/98', '172', '537', 'HumanEval/117']","def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I'for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['HumanEval/92'],"def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        return x + y == z or x + z == y or y + z == x
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['HumanEval/92', '51', '121', '521', '327']","def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        return x + y == z or x + z == y or y + z == x
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['HumanEval/92', '51', '121', '521', '327', '916', 'HumanEval/53', '677', '541', '850']","def any_int(x, y, z):
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/93'],"def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,5,normal,"['HumanEval/93', '131', 'HumanEval/118', 'HumanEval/64', 'HumanEval/38']","def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,10,normal,"['HumanEval/93', '131', 'HumanEval/118', 'HumanEval/64', 'HumanEval/38', '667', 'HumanEval/51', 'HumanEval/89', '557', '230']","def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,1,normal,['HumanEval/94'],"def skjkasdkd(lst):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    max_prime = 0
    for num in lst:
        if num > max_prime and is_prime(num):
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,5,normal,"['HumanEval/94', 'HumanEval/59', 'HumanEval/78', '685', '122']","def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = 0
    for num in lst:
        if num > max_prime and is_prime(num):
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,10,normal,"['HumanEval/94', 'HumanEval/59', 'HumanEval/78', '685', '122', '516', '843', 'HumanEval/39', '291', '148']","def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = 0
    for num in lst:
        if num > max_prime and is_prime(num):
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_dict_case(dictionary):
    if not dictionary:
        return False
    
    lower_case = upper_case = None
    for key in dictionary.keys():
        if not isinstance(key, str):
            return False
        if lower_case is None and upper_case is None:
            lower_case = key.islower()
            upper_case = key.isupper()
        else:
            if lower_case and not key.islower():
                return False
            if upper_case and not key.isupper():
                return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,5,normal,"['HumanEval/95', '582', '885', '523', 'HumanEval/27']","def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():
            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                state = ""mixed""
                break
            else:
                break
        return state == ""upper"" or state == ""lower""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,10,normal,"['HumanEval/95', '582', '885', '523', 'HumanEval/27', '352', '465', '557', '771', '964']","def check_dict_case(dictionary):
    if not dictionary:
        return False
    lower = upper = None
    for key in dictionary:
        if not isinstance(key, str):
            return False
        if lower is None and upper is None:
            lower = key.islower()
            upper = key.isupper()
        elif lower and not key.islower():
            return False
        elif upper and not key.isupper():
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,1,normal,['HumanEval/96'],"def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(i ** 0.5) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['HumanEval/96', '685', 'HumanEval/78', 'HumanEval/39', '122']","def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(i**0.5) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['HumanEval/96', '685', 'HumanEval/78', 'HumanEval/39', '122', '260', '32', '211', 'HumanEval/26', '843']","def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['HumanEval/13'],"def multiply(a: int, b: int) -> int:
    return (abs(a) % 10) * (abs(b) % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['HumanEval/13', '93', '690', '503', '356']","def multiply(a: int, b: int) -> int:
    return (abs(a) % 10) * (abs(b) % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['HumanEval/13', '93', '690', '503', '356', 'HumanEval/97', '345', '581', '47', '218']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['667'],"def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    vowels = 'AEIOU'
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['667', 'HumanEval/64', '165', '131', '624']","def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    count = 0
    vowels = 'AEIOU'
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['667', 'HumanEval/64', '165', '131', '624', 'HumanEval/98', '813', 'HumanEval/66', 'HumanEval/118', '182']","def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    vowels = ""AEIOU""
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''

    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '530', 'HumanEval/2', '442', '909']","def closest_integer(value):
    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = int(num) + 1
        else:
            res = int(num) - 1
    else:
        res = round(num)
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '530', 'HumanEval/2', '442', '909', '137', 'HumanEval/20', '100', '518', '830']","def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''

    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/123'],"def make_a_pile(n):
    pile = [n]
    for i in range(n-1):
        if n % 2 == 0:
            n += 1
        else:
            n += 2
        pile.append(n)
    return pile",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/123', 'HumanEval/130', '392', '781', '164']","def make_a_pile(n):
    stones = [n]
    for i in range(1, n):
        if n % 2 == 0:
            stones.append(stones[-1] + 2)
        else:
            stones.append(stones[-1] + 2)
    return stones",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/123', 'HumanEval/130', '392', '781', '164', '907', '843', '844', 'HumanEval/113', 'HumanEval/67']","def make_a_pile(n):
    stones = [n]
    for i in range(n-1):
        stones.append(stones[-1] + 2)
    return stones",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/101'],"def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""

    return s.replace(',','').split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/101', '565', '305', '570', 'HumanEval/118']","def words_string(s):
    return s.replace(',','').split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/101', '565', '305', '570', 'HumanEval/118', 'HumanEval/38', '128', '964', 'HumanEval/7', '79']","def words_string(s):
    return s.replace("","", """").split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['41'],"def choose_num(x, y):
    if x > y:
        return -1
    else:
        for num in range(y, x-1, -1):
            if num % 2 == 0:
                return num
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['41', '127', 'HumanEval/155', 'HumanEval/150', '252']","def choose_num(x, y):
    if x > y:
        return -1
    for num in range(y, x-1, -1):
        if num % 2 == 0:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['41', '127', 'HumanEval/155', 'HumanEval/150', '252', '663', '909', '498', 'HumanEval/102', '308']","def choose_num(x, y):
    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['HumanEval/103'],"def rounded_avg(n, m):
    if n > m:
        return -1
    return bin(round((n + m) / 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['HumanEval/103', '830', '530', '442', '137']","def rounded_avg(n, m):
    if n > m:
        return -1
    avg = round((n + m) / 2)
    return bin(avg)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['HumanEval/103', '830', '530', '442', '137', '851', '344', '599', '375', '422']","def rounded_avg(n, m):
    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['HumanEval/104'],"def unique_digits(x):
    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,5,normal,"['HumanEval/104', '426', '41', '755', '406']","def unique_digits(x):
    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,10,normal,"['HumanEval/104', '426', '41', '755', '406', '22', '148', '749', 'HumanEval/146', 'HumanEval/131']","def unique_digits(x):
    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,1,normal,['915'],"def by_length(arr):
    # Filter the array to include only numbers between 1 and 9
    filtered_arr = [num for num in arr if 1 <= num <= 9]
    
    # Sort the filtered array in ascending order
    sorted_arr = sorted(filtered_arr)
    
    # Reverse the sorted array
    reversed_arr = sorted_arr[::-1]
    
    # Map each number in the reversed array to its corresponding name
    named_arr = [str(num) for num in reversed_arr]
    
    return named_arr",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,5,normal,"['915', '749', 'HumanEval/88', '57', 'HumanEval/105']","def by_length(arr):
    # Filter the array to include only numbers between 1 and 9
    filtered_arr = [num for num in arr if 1 <= num <= 9]
    
    # Sort the filtered array in ascending order
    sorted_arr = sorted(filtered_arr)
    
    # Reverse the sorted array
    reversed_arr = sorted_arr[::-1]
    
    # Map the reversed array to its corresponding names
    named_arr = [str(num) for num in reversed_arr]
    
    return named_arr",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,10,normal,"['915', '749', 'HumanEval/88', '57', 'HumanEval/105', '433', '141', 'HumanEval/104', 'HumanEval/120', '540']","def by_length(arr):
    arr = [i for i in arr if 1 <= i <= 9]
    arr.sort(reverse=True)
    return [str(i) for i in arr]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,1,normal,['905'],"def f(n):
    def factorial(n):
        if n == 0:
            return 1
        else:
            return n * factorial(n-1)
    
    def sum_to_n(n):
        return n * (n + 1) // 2
    
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(factorial(i))
        else:
            result.append(sum_to_n(i))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['905', '901', '392', '907', '873']","def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(factorial(i))
        else:
            result.append(sum(range(1, i + 1)))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['905', '901', '392', '907', '873', 'HumanEval/100', 'HumanEval/39', 'HumanEval/63', '49', '154']","def f(n):
    def factorial(n):
        if n == 0:
            return 1
        else:
            return n * factorial(n-1)
    
    result = []
    for i in range(1, n+1):
        if i % 2 == 0:
            result.append(factorial(i))
        else:
            result.append(sum(range(1, i+1)))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['HumanEval/107'],"def even_odd_palindrome(n):
    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_palindrome_count += 1
            else:
                odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,5,normal,"['HumanEval/107', '485', '387', '781', 'HumanEval/123']","def even_odd_palindrome(n):
    even_palindrome_count = 0
    odd_palindrome_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_palindrome_count += 1
            else:
                odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,10,normal,"['HumanEval/107', '485', '387', '781', 'HumanEval/123', '134', '556', '844', 'HumanEval/155', '166']","def even_odd_palindrome(n):
    even_palindrome_count = 0
    odd_palindrome_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_palindrome_count += 1
            else:
                odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,1,normal,['HumanEval/146'],"def count_nums(arr):
    count = 0
    for num in arr:
        if num > 0:
            count += 1
        else:
            digits_sum = sum(int(digit) for digit in str(abs(num)))
            if digits_sum > 0:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,5,normal,"['HumanEval/146', '527', '767', 'HumanEval/108', '144']","def count_nums(arr):
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,10,normal,"['HumanEval/146', '527', '767', 'HumanEval/108', '144', '856', '141', '398', '42', '433']","def count_nums(arr):
    count = 0
    for num in arr:
        if num > 0:
            count += 1
        elif num < 0:
            num = -num
            digits_sum = 0
            while num > 0:
                digits_sum += num % 10
                num //= 10
            if digits_sum > 0:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['323'],"def move_one_ball(arr):
    if not arr:
        return True
    n = len(arr)
    for i in range(n):
        if arr[i] > arr[(i + 1) % n]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,5,normal,"['323', '915', 'HumanEval/109', '433', '57']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,10,normal,"['323', '915', 'HumanEval/109', '433', '57', 'HumanEval/105', '650', '763', '760', 'HumanEval/116']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['HumanEval/110'],"def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count >= odd_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,5,normal,"['HumanEval/110', '728', '594', '881', 'HumanEval/74']","def exchange(lst1, lst2):
    odd_lst1 = sum(1 for num in lst1 if num % 2 == 1)
    even_lst2 = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_lst2 >= odd_lst1 else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,10,normal,"['HumanEval/110', '728', '594', '881', 'HumanEval/74', 'HumanEval/58', '431', '784', '508', '38']","def exchange(lst1, lst2):
    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['862'],"from collections import Counter
import re

def histogram(test):
    words = re.findall('\w+', test)
    counts = Counter(words)
    max_count = max(counts.values(), default=0)
    return {word: count for word, count in counts.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,5,normal,"['862', '684', '165', '659', '813']","from collections import Counter

def histogram(test):
    if not test:
        return {}
    words = test.split()
    counts = Counter(words)
    max_count = max(counts.values())
    return {word: count for word, count in counts.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['862', '684', '165', '659', '813', '666', 'HumanEval/101', '861', '128', '475']","from collections import Counter

def histogram(test):
    if not test:
        return {}
    words = test.split()
    counts = Counter(words)
    max_count = max(counts.values())
    return {word: count for word, count in counts.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['HumanEval/112'],"def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,5,normal,"['HumanEval/112', 'HumanEval/10', '604', 'HumanEval/89', '377']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,10,normal,"['HumanEval/112', 'HumanEval/10', '604', 'HumanEval/89', '377', '386', '860', '557', 'HumanEval/107', '864']","def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['HumanEval/113'],"def odd_count(lst):
    res = []
    for s in lst:
        odd_count = sum(1 for c in s if int(c) % 2 == 1)
        res.append(f""the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput."")
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,5,normal,"['HumanEval/113', 'HumanEval/146', 'HumanEval/155', 'HumanEval/104', 'HumanEval/126']","def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""

    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,10,normal,"['HumanEval/113', 'HumanEval/146', 'HumanEval/155', 'HumanEval/104', 'HumanEval/126', 'HumanEval/131', 'HumanEval/107', '684', '781', '387']","def odd_count(lst):
    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['HumanEval/114'],"def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum += num
        if current_sum < min_sum:
            min_sum = current_sum
        if current_sum > 0:
            current_sum = 0
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,5,normal,"['HumanEval/114', '476', '777', '649', '144']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum += num
        if current_sum < min_sum:
            min_sum = current_sum
        if current_sum > 0:
            current_sum = 0
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,10,normal,"['HumanEval/114', '476', '777', '649', '144', '916', '701', '270', '133', '615']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum += num
        if current_sum < min_sum:
            min_sum = current_sum
        if current_sum > 0:
            current_sum = 0
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,1,normal,['HumanEval/115'],"def max_fill(grid, capacity):
    return sum([(sum(arr) + capacity - 1) // capacity for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,5,normal,"['HumanEval/115', '314', '54', 'HumanEval/129', '516']","def max_fill(grid, capacity):
    import math
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,10,normal,"['HumanEval/115', '314', '54', 'HumanEval/129', '516', '601', '232', '911', '938', '548']","def max_fill(grid, capacity):
    import math
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,1,normal,['915'],"def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,5,normal,"['915', 'HumanEval/116', 'HumanEval/88', 'HumanEval/105', '57']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,10,normal,"['915', 'HumanEval/116', 'HumanEval/88', 'HumanEval/105', '57', 'HumanEval/120', '433', '763', 'HumanEval/109', '540']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['HumanEval/117'],"def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""

    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,5,normal,"['HumanEval/117', '862', '128', '565', 'HumanEval/118']","def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""

    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['HumanEval/117', '862', '128', '565', 'HumanEval/118', '964', '79', 'HumanEval/101', 'HumanEval/158', '570']","def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""

    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/118'],"def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,5,normal,"['HumanEval/118', 'HumanEval/117', '131', 'HumanEval/64', '667']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,10,normal,"['HumanEval/118', 'HumanEval/117', '131', 'HumanEval/64', '667', 'HumanEval/93', '565', 'HumanEval/51', '411', 'HumanEval/10']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,1,normal,['HumanEval/119'],"def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            elif char == ')':
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    first_combination = lst[0] + lst[1]
    second_combination = lst[1] + lst[0]
    return 'Yes' if is_balanced(first_combination) or is_balanced(second_combination) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,5,normal,"['HumanEval/119', 'HumanEval/1', 'HumanEval/110', '532', 'HumanEval/6']","def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            elif char == ')':
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    combined = lst[0] + lst[1]
    if is_balanced(combined):
        return 'Yes'
    else:
        return 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,10,normal,"['HumanEval/119', 'HumanEval/1', 'HumanEval/110', '532', 'HumanEval/6', '91', 'HumanEval/132', 'HumanEval/10', 'HumanEval/74', '871']","def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''

    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            elif char == ')':
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    s1 = lst[0] + lst[1]
    s2 = lst[1] + lst[0]
    return 'Yes' if is_balanced(s1) or is_balanced(s2) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['158'],"def maximum(arr, k):
    arr.sort(reverse=True)
    return arr[:k]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,5,normal,"['158', '548', '571', '60', '524']","def maximum(arr, k):
    arr.sort()
    return arr[-k:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,10,normal,"['158', '548', '571', '60', '524', '522', '550', '149', '540', '433']","def maximum(arr, k):
    arr.sort()
    return arr[-k:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['HumanEval/113'],"def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['HumanEval/113', '881', '134', '784', 'HumanEval/121']","def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['HumanEval/113', '881', '134', '784', 'HumanEval/121', 'HumanEval/37', '594', '38', '797', 'HumanEval/104']","def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['HumanEval/122'],"def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,5,normal,"['HumanEval/122', '916', '661', '42', '782']","def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,10,normal,"['HumanEval/122', '916', '661', '42', '782', '270', '144', '777', '701', '398']","def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,1,normal,['HumanEval/123'],"def get_odd_collatz(n):
    odd_collatz = []
    while n > 1:
        if n % 2 == 1:
            odd_collatz.append(n)
        n = 3 * n + 1 if n % 2 else n // 2
    odd_collatz.append(1)
    return sorted(odd_collatz)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,5,normal,"['HumanEval/123', '844', '907', '556', '781']","def get_odd_collatz(n):
    odd_collatz = []
    while n > 1:
        if n % 2 == 1:
            odd_collatz.append(n)
        n = 3 * n + 1 if n % 2 else n // 2
    odd_collatz.append(1)
    return sorted(odd_collatz)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,10,normal,"['HumanEval/123', '844', '907', '556', '781', '84', 'HumanEval/131', '86', '867', '122']","def get_odd_collatz(n):
    odd_collatz = []
    while n > 1:
        if n % 2 == 1:
            odd_collatz.append(n)
        n = n * 3 + 1 if n % 2 else n // 2
    odd_collatz.sort()
    return odd_collatz",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,1,normal,['HumanEval/124'],"def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""

    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['HumanEval/124', '191', '336', '866', '159']","def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""

    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['HumanEval/124', '191', '336', '866', '159', '820', '910', '455', '762', '396']","import re
def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""
    regex = ""^(0[1-9]|1[0-2])-([0-2][0-9]|3[01])-([0-9]{4})$""
    if(re.search(regex, date)): 
        return True 
    else: 
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['HumanEval/125'],"def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,5,normal,"['HumanEval/125', '128', '862', '305', '570']","def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,10,normal,"['HumanEval/125', '128', '862', '305', '570', '565', 'HumanEval/143', '73', '964', '79']","def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['670'],"def is_sorted(lst):
    if len(lst) <= 1:
        return True
    for i in range(1, len(lst)):
        if lst[i] < lst[i - 1]:
            return False
        if i > 1 and lst[i] == lst[i - 1] == lst[i - 2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,5,normal,"['670', '680', 'HumanEval/57', '472', 'HumanEval/87']","def is_sorted(lst):
    if len(lst) <= 1:
        return True
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['670', '680', 'HumanEval/57', '472', 'HumanEval/87', 'HumanEval/149', 'HumanEval/34', 'HumanEval/90', 'HumanEval/33', '755']","def is_sorted(lst):
    return lst == sorted(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"def intersection(interval1, interval2):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start

    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', 'HumanEval/75', 'HumanEval/78', 'HumanEval/59', 'HumanEval/39']","def intersection(interval1, interval2):
    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""

def is_prime(n):
    if n == 1 or n == 0:
        return False
    if n == 2:
        return True
    for i in range(2, n):
        if n%i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', 'HumanEval/75', 'HumanEval/78', 'HumanEval/59', 'HumanEval/39', 'HumanEval/96', '122', '685', '905', 'HumanEval/110']","def intersection(interval1, interval2):
    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""

def is_prime(n):
    if n == 1 or n == 0:
        return False
    if n == 2:
        return True
    for i in range(2, n):
        if n%i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['HumanEval/128'],"def prod_signs(arr):
    if not arr: return None
    prod = (-1) ** sum(1 for x in arr if x < 0)
    return prod * sum(abs(i) for i in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['HumanEval/128', '25', '134', '144', 'HumanEval/131']","def prod_signs(arr):
    if not arr: return None
    prod = (-1) ** sum(1 for x in arr if x < 0)
    return prod * sum(abs(i) for i in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['HumanEval/128', '25', '134', '144', 'HumanEval/131', '798', '925', 'HumanEval/8', '270', '916']","def prod_signs(arr):
    if not arr: return None
    prod = (-1) ** sum(1 for x in arr if x < 0)
    return prod * sum([abs(i) for i in arr])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['HumanEval/129'],"def minPath(grid, k):
    n = len(grid)
    visited = [[False] * n for _ in range(n)]
    path = []
    
    def dfs(x, y, k):
        if k == 0:
            path.append(grid[x][y])
            return
        visited[x][y] = True
        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                dfs(nx, ny, k - 1)
                path.append(grid[x][y])
        visited[x][y] = False
    
    dfs(0, 0, k - 1)
    path.append(grid[0][0])
    path.sort()
    return path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,5,normal,"['HumanEval/129', '314', '506', '947', '923']","def minPath(grid, k):
    n = len(grid)
    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]
    for i in range(n):
        for j in range(n):
            dp[i][j][1] = grid[i][j]
    for l in range(2, k + 1):
        for i in range(n):
            for j in range(n):
                for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:
                    if 0 <= x < n and 0 <= y < n:
                        dp[i][j][l] = min(dp[i][j][l], dp[x][y][l - 1] + grid[i][j])
    min_val = min(dp[i][j][k] for i in range(n) for j in range(n))
    path = []
    for i in range(n):
        for j in range(n):
            if dp[i][j][k] == min_val:
                path.append(grid[i][j])
                break
    path.sort()
    return path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,10,normal,"['HumanEval/129', '314', '506', '947', '923', '409', '457', '528', '702', '50']","def minPath(grid, k):
    n = len(grid)
    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]
    for i in range(n):
        for j in range(n):
            dp[i][j][0] = 0
    for l in range(1, k + 1):
        for i in range(n):
            for j in range(n):
                for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:
                    if 0 <= x < n and 0 <= y < n:
                        dp[i][j][l] = min(dp[i][j][l], dp[x][y][l - 1] + abs(grid[i][j] - grid[x][y]))
    min_val = min(dp[i][j][k] for i in range(n) for j in range(n))
    path = []
    for i in range(n):
        for j in range(n):
            if dp[i][j][k] == min_val:
                path.append(grid[i][j])
                break
    return path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,1,normal,['HumanEval/130'],"def tri(n):
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['HumanEval/130', '873', '231', '236', '147']","def tri(n):
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['HumanEval/130', '873', '231', '236', '147', 'HumanEval/55', '84', 'HumanEval/63', '169', '86']","def tri(n):
    if n == 0:
        return [3]
    my_tri = [3, 2]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['HumanEval/131'],"def digits(n):
    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit % 2 == 1:
            product *= int_digit
            odd_count += 1
    if odd_count == 0:
        return 0
    else:
        return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['HumanEval/131', '711', '566', 'HumanEval/104', '830']","def digits(n):
    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit % 2 == 1:
            product *= int_digit
            odd_count += 1
    if odd_count == 0:
        return 0
    else:
        return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['HumanEval/131', '711', '566', 'HumanEval/104', '830', '387', '781', '194', '556', '844']","def digits(n):
    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit % 2 == 1:
            product *= int_digit
            odd_count += 1
    if odd_count == 0:
        return 0
    else:
        return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['HumanEval/132'],"def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '91', '737']","def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
        else:
            return False
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '91', '737', '396', '913', '823', 'HumanEval/38', 'HumanEval/82']","def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
        else:
            return False
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['HumanEval/133'],"def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['HumanEval/133', 'HumanEval/142', '320', 'HumanEval/85', 'HumanEval/121']","def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,10,normal,"['HumanEval/133', 'HumanEval/142', '320', 'HumanEval/85', 'HumanEval/121', '105', '340', 'HumanEval/32', 'HumanEval/151', '398']","def sum_squares(lst):
    return sum(map(lambda x: int(x)**2, map(math.ceil, lst)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['HumanEval/134'],"def check_if_last_char_is_a_letter(txt):
    if not txt or txt[-1].isspace():
        return False
    return txt[-1].isalpha()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,5,normal,"['HumanEval/134', '210', 'HumanEval/10', '828', '913']","def check_if_last_char_is_a_letter(txt):
    return txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,10,normal,"['HumanEval/134', '210', 'HumanEval/10', '828', '913', '964', '79', '967', '165', '546']","def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    last_char = txt[-1]
    if not last_char.isalpha():
        return False
    if len(txt) == 1:
        return True
    second_last_char = txt[-2]
    return second_last_char ==''",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,1,normal,['433'],"def can_arrange(arr):
    for i in range(len(arr)-1, 0, -1):
        if arr[i] < arr[i-1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,5,normal,"['433', '550', 'HumanEval/109', '548', 'HumanEval/105']","def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,10,normal,"['433', '550', 'HumanEval/109', '548', 'HumanEval/105', '763', 'HumanEval/116', '540', '323', '232']","def can_arrange(arr):
    for i in range(len(arr)-1, 0, -1):
        if arr[i] < arr[i-1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,1,normal,['HumanEval/136'],"def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,5,normal,"['HumanEval/136', '457', '232', '418', '366']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,10,normal,"['HumanEval/136', '457', '232', '418', '366', '227', '496', '911', 'HumanEval/59', '472']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,1,normal,['HumanEval/137'],"def compare_one(a, b):
    if isinstance(a, str): a = a.replace(',', '.')
    if isinstance(b, str): b = b.replace(',', '.')
    if float(a) == float(b): return None
    return a if float(a) > float(b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,5,normal,"['HumanEval/137', '47', '309', '404', '891']","def compare_one(a, b):
    if isinstance(a, str): a = a.replace(',', '.')
    if isinstance(b, str): b = b.replace(',', '.')
    if float(a) == float(b): return None
    return a if float(a) > float(b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,10,normal,"['HumanEval/137', '47', '309', '404', '891', '126', '93', 'HumanEval/154', '218', 'HumanEval/13']","def compare_one(a, b):
    if isinstance(a, str):
        a = a.replace(',', '.')
    if isinstance(b, str):
        b = b.replace(',', '.')
    if float(a) == float(b):
        return None
    return a if float(a) > float(b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,1,normal,['134'],"def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
    if n < 8 or n % 2!= 0:
        return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,5,normal,"['134', '541', '481', '121', '547']","def is_equal_to_sum_even(n):
    if n % 2!= 0:
        return False
    n -= 4
    while n >= 0:
        if n % 2 == 0:
            return True
        n -= 2
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,10,normal,"['134', '541', '481', '121', '547', '685', '448', '420', '212', '504']","def is_equal_to_sum_even(n):
    return n == 8",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,1,normal,['901'],"def special_factorial(n):
    factorial = 1
    for i in range(1, n + 1):
        factorial *= i
    return factorial",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,5,normal,"['901', '905', '873', 'HumanEval/55', '35']","def special_factorial(n):
    factorial = 1
    for i in range(1, n + 1):
        factorial *= i
    return factorial",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,10,normal,"['901', '905', '873', 'HumanEval/55', '35', 'HumanEval/41', '267', '555', '260', '735']","def special_factorial(n):
    factorial = 1
    for i in range(1, n + 1):
        factorial *= i
    return factorial",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,1,normal,['310'],"def fix_spaces(text):
    result = []
    consecutive_spaces = 0
    
    for char in text:
        if char == "" "":
            consecutive_spaces += 1
        else:
            if consecutive_spaces > 2:
                result.append(""-"")
            elif consecutive_spaces > 0:
                result.extend([""_""] * consecutive_spaces)
            result.append(char)
            consecutive_spaces = 0
    
    if consecutive_spaces > 2:
        result.append(""-"")
    elif consecutive_spaces > 0:
        result.extend([""_""] * consecutive_spaces)
    
    return """".join(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,5,normal,"['310', '538', '631', '628', '933']","def fix_spaces(text):
    result = []
    i = 0
    while i < len(text):
        if text[i] =='':
            space_count = 1
            while i + 1 < len(text) and text[i + 1] =='':
                space_count += 1
                i += 1
            if space_count > 2:
                result.append('-')
            else:
                result.append('_')
        else:
            result.append(text[i])
        i += 1
    return ''.join(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,10,normal,"['310', '538', '631', '628', '933', 'HumanEval/51', 'HumanEval/140', '965', '73', '800']","def fix_spaces(text):
    result = []
    i = 0
    while i < len(text):
        if text[i] == "" "":
            count = 1
            while i + 1 < len(text) and text[i + 1] == "" "":
                i += 1
                count += 1
            if count > 2:
                result.append(""-"")
            else:
                result.append(""_"" * count)
        else:
            result.append(text[i])
        i += 1
    return """".join(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""
    valid_extensions = ['txt', 'exe', 'dll']
    parts = file_name.split('.')
    
    # Check if there is exactly one dot and the extension is valid
    if len(parts)!= 2 or parts[1] not in valid_extensions:
        return 'No'
    
    # Check if the name starts with a letter and contains no more than three digits
    if not parts[0][0].isalpha() or sum(c.isdigit() for c in parts[0]) > 3:
        return 'No'
    
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '737', '396', 'HumanEval/134']","def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""
    parts = file_name.split('.')
    if len(parts)!= 2:
        return 'No'
    if parts[1] not in ['txt', 'exe', 'dll']:
        return 'No'
    if not parts[0] or not parts[0][0].isalpha():
        return 'No'
    if sum(c.isdigit() for c in parts[0]) > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '737', '396', 'HumanEval/134', '823', 'HumanEval/10', '964', '79', '967']","def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""

    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst)!= 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,1,normal,['HumanEval/142'],"def sum_squares(lst):
    result = []
    for i, num in enumerate(lst):
        if i % 3 == 0:
            result.append(num ** 2)
        elif i % 4 == 0:
            result.append(num ** 3)
        else:
            result.append(num)
    return sum(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,5,normal,"['HumanEval/142', '340', '142', '320', 'HumanEval/121']","def sum_squares(lst):
    result = []
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i] ** 2)
        elif i % 4 == 0 and i % 3!= 0:
            result.append(lst[i] ** 3)
        else:
            result.append(lst[i])
    return sum(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,10,normal,"['HumanEval/142', '340', '142', '320', 'HumanEval/121', 'HumanEval/85', 'HumanEval/151', '105', 'HumanEval/133', '916']","def sum_squares(lst):
    result = []
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i] ** 2)
        elif i % 4 == 0 and i % 3!= 0:
            result.append(lst[i] ** 3)
        else:
            result.append(lst[i])
    return sum(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,1,normal,['HumanEval/143'],"def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    new_lst = [word for word in sentence.split() if is_prime(len(word))]
    return "" "".join(new_lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,5,normal,"['HumanEval/143', '897', '305', '128', '570']","def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    new_lst = [word for word in sentence.split() if is_prime(len(word))]
    return "" "".join(new_lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,10,normal,"['HumanEval/143', '897', '305', '128', '570', 'HumanEval/91', '862', '565', 'HumanEval/158', 'HumanEval/118']","def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    prime_length_words = [word for word in words if is_prime(len(word))]
    return''.join(prime_length_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,1,normal,['HumanEval/144'],"def simplify(x, n):
    a, b = map(int, x.split(""/""))
    c, d = map(int, n.split(""/""))
    return (a * c) % (b * d) == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['HumanEval/144', 'HumanEval/76', '887', '148', 'HumanEval/39']","def simplify(x, n):
    a, b = map(int, x.split(""/""))
    c, d = map(int, n.split(""/""))
    return (a * c) % (b * d) == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,10,normal,"['HumanEval/144', 'HumanEval/76', '887', '148', 'HumanEval/39', '600', '485', '803', '711', '968']","def simplify(x, n):
    a, b = map(int, x.split(""/""))
    c, d = map(int, n.split(""/""))
    return a * c % (b * d) == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,1,normal,['HumanEval/145'],"def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,5,normal,"['HumanEval/145', '749', '915', '12', '308']","def order_by_points(nums):
    def digit_sum(n):
        return sum(int(digit) for digit in str(abs(n)))
    return sorted(nums, key=digit_sum)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,10,normal,"['HumanEval/145', '749', '915', '12', '308', '670', '680', '108', '516', '896']","def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,1,normal,['426'],"def specialFilter(nums):
    def is_odd_and_greater_than_10(num):
        num = abs(num)  # Make sure num is positive
        if num > 10:
            str_num = str(num)
            return int(str_num[0]) % 2!= 0 and int(str_num[-1]) % 2!= 0
        return False

    return sum(is_odd_and_greater_than_10(num) for num in nums)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,5,normal,"['426', '258', 'HumanEval/146', '41', '433']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,10,normal,"['426', '258', 'HumanEval/146', '41', '433', '697', '141', '883', '817', 'HumanEval/155']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,1,normal,['HumanEval/130'],"def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,5,normal,"['HumanEval/130', '231', '392', 'HumanEval/59', '60']","def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(len(a)):
        for j in range(i + 1, len(a)):
            for k in range(j + 1, len(a)):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,10,normal,"['HumanEval/130', '231', '392', 'HumanEval/59', '60', '149', '122', '188', '32', '548']","def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,1,normal,['HumanEval/148'],"def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,5,normal,"['HumanEval/148', '414', '282', '358', '589']","def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,10,normal,"['HumanEval/148', '414', '282', '358', '589', '161', '682', '943', '431', '618']","def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,1,normal,['HumanEval/113'],"def sorted_list_sum(lst):
    # Filter out strings with odd lengths
    even_length_strings = [s for s in lst if len(s) % 2 == 0]
    
    # Sort the list by length of each string, then alphabetically
    even_length_strings.sort(key=lambda x: (len(x), x))
    
    return even_length_strings",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,5,normal,"['HumanEval/113', '340', '949', 'HumanEval/47', 'HumanEval/121']","def sorted_list_sum(lst):
    # Remove strings with odd lengths
    lst = [s for s in lst if len(s) % 2 == 0]
    
    # Sort the list by length and then alphabetically
    lst.sort(key=lambda x: (len(x), x))
    
    return lst",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,10,normal,"['HumanEval/113', '340', '949', 'HumanEval/47', 'HumanEval/121', '37', 'HumanEval/34', '12', 'HumanEval/158', 'HumanEval/145']","def sorted_list_sum(lst):
    lst = [s for s in lst if len(s) % 2 == 0]
    lst.sort()
    return lst",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,1,normal,['HumanEval/150'],"def x_or_y(n, x, y):
    if n < 2:
        return y
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['HumanEval/150', 'HumanEval/96', 'HumanEval/39', '685', '663']","def x_or_y(n, x, y):
    if n == 1:
        return y
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return y
            break
    else:
        return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,10,normal,"['HumanEval/150', 'HumanEval/96', 'HumanEval/39', '685', '663', '260', '122', 'HumanEval/75', 'HumanEval/78', 'HumanEval/59']","def x_or_y(n, x, y):
    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,1,normal,['HumanEval/113'],"def double_the_difference(lst):
    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,5,normal,"['HumanEval/113', 'HumanEval/85', 'HumanEval/133', 'HumanEval/142', 'HumanEval/121']","def double_the_difference(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,10,normal,"['HumanEval/113', 'HumanEval/85', 'HumanEval/133', 'HumanEval/142', 'HumanEval/121', 'HumanEval/151', '610', '784', '881', '594']","def double_the_difference(lst):
    return sum(x**2 for x in lst if x > 0 and x%2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['HumanEval/152'],"def compare(game, guess):
    return [abs(x - y) for x, y in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['HumanEval/152', '433', 'HumanEval/0', '431', '763']","def compare(game,guess):
    return [abs(x-y) for x,y in zip(game,guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['HumanEval/152', '433', 'HumanEval/0', '431', '763', '890', '161', '627', '473', '650']","def compare(game,guess):
    return [abs(x-y) for x,y in zip(game,guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/153'],"def Strongest_Extension(class_name, extensions):
    strongest = extensions[0]
    max_strength = len([c for c in extensions[0] if c.isupper()]) - len([c for c in extensions[0] if c.islower()])
    for extension in extensions[1:]:
        strength = len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()])
        if strength > max_strength:
            strongest = extension
            max_strength = strength
    return f""{class_name}.{strongest}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,5,normal,"['HumanEval/153', '232', 'HumanEval/12', 'HumanEval/6', 'HumanEval/29']","def Strongest_Extension(class_name, extensions):
    strongest = extensions[0]
    max_strength = len([c for c in extensions[0] if c.isupper()]) - len([c for c in extensions[0] if c.islower()])
    for extension in extensions[1:]:
        strength = len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()])
        if strength > max_strength:
            strongest = extension
            max_strength = strength
    return f""{class_name}.{strongest}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,10,normal,"['HumanEval/153', '232', 'HumanEval/12', 'HumanEval/6', 'HumanEval/29', '562', 'HumanEval/14', '523', '182', '911']","def Strongest_Extension(class_name, extensions):
    strongest = extensions[0]
    max_strength = len([x for x in extensions[0] if x.isupper()]) - len([x for x in extensions[0] if x.islower()])
    for extension in extensions[1:]:
        strength = len([x for x in extension if x.isupper()]) - len([x for x in extension if x.islower()])
        if strength > max_strength:
            strongest = extension
            max_strength = strength
    return f""{class_name}.{strongest}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,1,normal,['897'],"def cycpattern_check(a, b):
    if b in a:
        return True
    for i in range(len(b)):
        b = b[1:] + b[0]
        if b in a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,5,normal,"['897', '91', '823', '964', 'HumanEval/118']","def cycpattern_check(a, b):
    for i in range(len(b)):
        rotated_b = b[i:] + b[:i]
        if rotated_b in a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,10,normal,"['897', '91', '823', '964', 'HumanEval/118', '871', '79', '532', '874', 'HumanEval/10']","def cycpattern_check(a, b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""
    for i in range(len(b)):
        rotated_b = b[i:] + b[:i]
        if rotated_b in a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,1,normal,['HumanEval/155'],"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['HumanEval/155', 'HumanEval/146', '781', '426', '41']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['HumanEval/155', 'HumanEval/146', '781', '426', '41', 'HumanEval/131', 'HumanEval/104', '387', '844', '867']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['958'],"def int_to_mini_roman(number):
    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    roman_num = ''
    i = 0
    while num > 0:
        for _ in range(num // val[i]):
            roman_num += syb[i]
            num -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['958', 'HumanEval/156', '116', '100', '583']","def int_to_mini_roman(number):
    val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
    syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
    roman_num = ''
    i = 0
    while  number > 0:
        for _ in range(number // val[i]):
            roman_num += syb[i]
            number -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['958', 'HumanEval/156', '116', '100', '583', '909', 'HumanEval/2', '749', 'HumanEval/15', '518']","def int_to_mini_roman(number):
    val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]
    syb = [""M"", ""CM"", ""D"", ""CD"",""C"", ""XC"", ""L"", ""XL"",""X"", ""IX"", ""V"", ""IV"",""I""]
    roman_num = ''
    i = 0
    while  number > 0:
        for _ in range(number // val[i]):
            roman_num += syb[i]
            number -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['826'],"def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 1e-9",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,5,normal,"['826', '176', 'HumanEval/71', '153', '359']","def right_angle_triangle(a, b, c):
    return max(a, b, c)**2 == (min(a, b, c)**2 + (max(a, b, c) - min(a, b, c))**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,10,normal,"['826', '176', 'HumanEval/71', '153', '359', '850', '430', '150', 'HumanEval/157', '334']","import math

def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return math.isclose(sides[2]**2, sides[0]**2 + sides[1]**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,1,normal,['HumanEval/158'],"def find_max(words):
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['HumanEval/158', 'HumanEval/12', '862', '13', '565']","def find_max(words):
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['HumanEval/158', 'HumanEval/12', '862', '13', '565', '305', '232', '128', '247', '90']","def find_max(words):
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['HumanEval/159'],"def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['HumanEval/159', '585', '123', '289', '408']","def eat(number, need, remaining):
    eaten = min(need, remaining)
    return [number + eaten, remaining - eaten]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['HumanEval/159', '585', '123', '289', '408', '385', '912', 'HumanEval/131', '365', '31']","def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['HumanEval/160'],"def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,5,normal,"['HumanEval/160', '589', '503', 'HumanEval/32', 'HumanEval/157']","def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i+1]
        elif operator[i] == '-':
            result -= operand[i+1]
        elif operator[i] == '*':
            result *= operand[i+1]
        elif operator[i] == '//':
            result //= operand[i+1]
        elif operator[i] == '**':
            result **= operand[i+1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,10,normal,"['HumanEval/160', '589', '503', 'HumanEval/32', 'HumanEval/157', '690', 'HumanEval/3', 'HumanEval/11', '610', '723']","def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,1,normal,['HumanEval/89'],"def solve(s):
    if not any(c.isalpha() for c in s):
        return s[::-1]
    return ''.join(c.swapcase() if c.isalpha() else c for c in s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,5,normal,"['HumanEval/89', 'HumanEval/66', '557', 'HumanEval/101', '182']","def solve(s):
    if not any(c.isalpha() for c in s):
        return s[::-1]
    return ''.join(c.swapcase() if c.isalpha() else c for c in s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,10,normal,"['HumanEval/89', 'HumanEval/66', '557', 'HumanEval/101', '182', 'HumanEval/64', 'HumanEval/112', 'HumanEval/27', '828', '386']","def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
    if not any(c.isalpha() for c in s):
        return s[::-1]
    return ''.join(c.swapcase() if c.isalpha() else c for c in s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,5,normal,"['HumanEval/162', '933', '330', '628', '319']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,10,normal,"['HumanEval/162', '933', '330', '628', '319', '965', '900', '631', '73', '217']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,1,normal,['HumanEval/163'],"def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
    # Ensure a is less than b for the range function
    if a > b:
        a, b = b, a

    # Generate and return the list of even numbers between a and b
    return [i for i in range(a, b + 1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
