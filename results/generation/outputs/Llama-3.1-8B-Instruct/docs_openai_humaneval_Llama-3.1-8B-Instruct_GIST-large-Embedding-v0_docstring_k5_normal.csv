query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for idx, elem in enumerate(numbers):
        if idx > 0 and elem - numbers[idx - 1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', '89', 'HumanEval/127']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', '89', 'HumanEval/127', '431', '26', '284', '942', '184']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for idx in range(len(numbers) - 1):
        distance = numbers[idx + 1] - numbers[idx]
        if distance < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/1'],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input is a string containing multiple groups of nested parentheses. 
    Your goal is to separate those groups into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any characters in the input string that are not parentheses.

    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['( )', '(())', '(()())']
    """"""
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_string.append(c)
            current_depth += 1
        elif c == ')':
            current_string.append(c)
            current_depth -= 1

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/1', 'HumanEval/6', 'HumanEval/132', '640', '417']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,10,normal,"['HumanEval/1', 'HumanEval/6', 'HumanEval/132', '640', '417', 'HumanEval/61', 'HumanEval/56', '628', '956', '538']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/2'],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/2', 'HumanEval/99', '194', '467', '692']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/2', 'HumanEval/99', '194', '467', '692', '208', '759', '252', '435', 'HumanEval/21']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/40', 'HumanEval/43', 'HumanEval/32']","from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/40', 'HumanEval/43', 'HumanEval/32', '899', '870', '541', '113', '133']","from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['HumanEval/4'],"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['HumanEval/4', '717', '63', '875', '664']","from typing import List
import math

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['HumanEval/4', '717', '63', '875', '664', '509', 'HumanEval/21', 'HumanEval/103', '615', '588']","from typing import List
import math

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []

    result = []
    for i, n in enumerate(numbers):
        result.append(n)
        if i < len(numbers) - 1:
            result.append(delimeter)

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,5,normal,"['HumanEval/5', '251', '503', 'HumanEval/20', 'HumanEval/25']","from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', '251', '503', 'HumanEval/20', 'HumanEval/25', '578', '621', '943', '665', '500']","from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for n in numbers:
        result.extend([numbers, delimeter])
    return result[:-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif c == ')':
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,5,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/61', 'HumanEval/56']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,10,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/61', 'HumanEval/56', 'HumanEval/119', '640', 'HumanEval/17', '417', '538']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', '91', '823', 'HumanEval/14']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', '91', '823', 'HumanEval/14', 'HumanEval/22', 'HumanEval/1', '18', 'HumanEval/12', 'HumanEval/6']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', 'HumanEval/60', '65', '649', '886']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', 'HumanEval/60', '65', '649', '886', '170', '925', '796', '514', '798']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,5,normal,"['HumanEval/9', '357', '418', '294', '613']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', '357', '418', '294', '613', '611', 'HumanEval/35', '200', '90', '130']","from typing import List

def rolling_max = lambda numbers: [max(numbers[:i+1]) for i in range(len(numbers))]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected '(' (<string>, line 3)"", 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def is_palindrome(string: str) -> bool:
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', 'HumanEval/107']","def is_palindrome(string: str) -> bool:
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', 'HumanEval/107', '909', '823', '100', '364', 'HumanEval/27']","def make_palindrome(string: str) -> str:
    if not string:
        return ''

    for i in range(len(string), 0, -1):
        suffix = string[-i:]
        if is_palindrome(suffix):
            return string + suffix[::-1]

def is_palindrome(string: str) -> bool:
    return string == string[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', '399', '156', '456', '226']","from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', '399', '156', '456', '226', '119', '146', '310', '699', '595']","from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', '393', '443', '207', '517']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', '393', '443', '207', '517', '602', '290', 'HumanEval/7', '232', '326']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['HumanEval/13'],"import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['HumanEval/13', '687', '498', '45', '218']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['HumanEval/13', '687', '498', '45', '218', 'HumanEval/163', '520', '151', 'HumanEval/97', '339']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/14'],"from typing import List

def all_prefixes(string: str) -> List[str]:
    result = []
    for i in range(len(string) + 1):
        result.append(string[:i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/28']","from typing import List

def all_prefixes(string: str) -> List[str]:
    result = []
    for i in range(len(string)):
        result.append(string[:i+1])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/28', 'HumanEval/7', '374', '50', 'HumanEval/101', '393']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['HumanEval/15'],"def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,5,normal,"['HumanEval/15', '628', '61', '84', '552']","def string_sequence(n: int) -> str:
    return''.join([str(x) for x in range(n + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,10,normal,"['HumanEval/15', '628', '61', '84', '552', '125', '623', 'HumanEval/131', '39', '220']","def string_sequence(n: int) -> str:
    return''.join([str(x) for x in range(n + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['HumanEval/16'],"def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['HumanEval/16', '684', '666', '182', '352']","import re

def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['HumanEval/16', '684', '666', '182', '352', '165', '813', '242', '238', 'HumanEval/18']","import re

def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map.get(x, 0) for x in music_string.split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,5,normal,"['HumanEval/17', '40', 'HumanEval/18', '226', 'HumanEval/6']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split() if x in note_map]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,10,normal,"['HumanEval/17', '40', 'HumanEval/18', '226', 'HumanEval/6', '88', '146', '785', '400', 'HumanEval/1']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split() if x in note_map]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['HumanEval/18'],"def how_many_times(string: str, substring: str) -> int:
    return string.count(substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['HumanEval/18', '238', '684', '61', 'HumanEval/16']","def how_many_times(string: str, substring: str) -> int:
    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['HumanEval/18', '238', '684', '61', 'HumanEval/16', '666', '30', '338', '172', '773']","def how_many_times(string: str, substring: str) -> int:
    return string.count(substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted([x for x in numbers.split(' ') if x in value_map], key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', '749', 'HumanEval/145', '104', '71']","from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted([x for x in numbers.split(' ') if x in value_map], key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', '749', 'HumanEval/145', '104', '71', '877', '516', '37', '407', '755']","from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted([x for x in numbers.split(' ') if x in value_map], key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    closest_pair = (numbers[0], numbers[1])
    min_distance = abs(numbers[0] - numbers[1])

    for i in range(1, len(numbers) - 1):
        distance = abs(numbers[i] - numbers[i + 1])
        if distance < min_distance:
            min_distance = distance
            closest_pair = (numbers[i], numbers[i + 1])

    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,5,normal,"['HumanEval/20', 'HumanEval/0', '755', '89', '825']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    closest_pair = (numbers[0], numbers[1])
    min_distance = abs(numbers[0] - numbers[1])

    for i in range(1, len(numbers) - 1):
        distance = abs(numbers[i] - numbers[i + 1])
        if distance < min_distance:
            min_distance = distance
            closest_pair = (numbers[i], numbers[i + 1])

    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,10,normal,"['HumanEval/20', 'HumanEval/0', '755', '89', '825', 'HumanEval/99', '898', 'HumanEval/21', 'HumanEval/5', '184']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    closest_pair = (numbers[0], numbers[1])
    min_distance = abs(numbers[0] - numbers[1])
    
    for i in range(1, len(numbers) - 1)):
        distance = abs(numbers[i] - numbers[i - 1])
        if distance < min_distance:
            min_distance = distance
            closest_pair = (numbers[i - 1], numbers[i])
            
    return closest_pair",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 8)"", 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,5,normal,"['HumanEval/21', '117', '919', '98', 'HumanEval/5']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,10,normal,"['HumanEval/21', '117', '919', '98', 'HumanEval/5', 'HumanEval/156', '252', '282', 'HumanEval/25', 'HumanEval/2']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,5,normal,"['HumanEval/22', '41', '277', 'HumanEval/7', 'HumanEval/26']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,10,normal,"['HumanEval/22', '41', '277', 'HumanEval/7', 'HumanEval/26', 'HumanEval/29', '426', 'HumanEval/5', '156', 'HumanEval/136']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['HumanEval/23'],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['HumanEval/23', '813', '868', '238', '125']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['HumanEval/23', '813', '868', '238', '125', 'HumanEval/16', 'HumanEval/18', 'HumanEval/82', '666', '83']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['HumanEval/24'],"import math

def largest_divisor(n: int) -> int:
    return math.floor(n / math.sqrt(n)) if n > 1 else 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['HumanEval/24', '681', '96', '781', '199']","import math

def largest_divisor(n: int) -> int:
    for i in reversed(range(1, n)):
        if n % i == 0:
            return i
    return 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['HumanEval/24', '681', '96', '781', '199', '388', 'HumanEval/13', '485', 'HumanEval/59', '745']","import math

def largest_divisor(n: int) -> int:
    for i in reversed(range(1, int(math.sqrt(n)) + 1)):
        if n % i == 0:
            return max(i, n // i)
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/25'],"from typing import List
import math

def factorize(n: int) -> List[int]:
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            n //= i
            fact.append(i)
        else:
            i += 1
    if n > 1:
        fact.append(n)
    return fact",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,5,normal,"['HumanEval/25', 'HumanEval/59', '32', '901', '122']","from typing import List

def factorize(n: int) -> List[int]:
    fact = []
    i = 2
    while i <= int(n ** 0.5) + 1:
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1
    if n > 1:
        fact.append(n)
    return fact",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,10,normal,"['HumanEval/25', 'HumanEval/59', '32', '901', '122', 'HumanEval/5', 'HumanEval/39', 'HumanEval/46', '577', 'HumanEval/75']","from typing import List

def factorize(n: int) -> List[int]:
    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1
    if n > 1:
        fact.append(n)
    return fact",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List
import collections

def remove_duplicates(numbers: List[int]) -> List[int]:
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,5,normal,"['HumanEval/26', '712', '932', '22', '674']","from typing import List
import collections

def remove_duplicates(numbers: List[int]) -> List[int]:
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,10,normal,"['HumanEval/26', '712', '932', '22', '674', '161', '27', '852', '730', '755']","from typing import List
import collections

def remove_duplicates(numbers: List[int]) -> List[int]:
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '364', '478', '495']","import re

def flip_case(string: str) -> str:
    return re.sub('[a-z]', lambda x: x.group().upper(), string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '364', '478', '495', '182', '877', '917', '459', '39']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', '500', '390', '213', 'HumanEval/14']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,10,normal,"['HumanEval/28', '500', '390', '213', 'HumanEval/14', '206', '538', '874', '374', '18']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/14', 'HumanEval/7', '181', 'HumanEval/22']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/14', 'HumanEval/7', '181', 'HumanEval/22', '27', '277', 'HumanEval/28', '861', '722']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/30'],"def get_positive(l: list):
    """"""Return only positive numbers in the list.""""""
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,5,normal,"['HumanEval/30', '442', '870', '189', 'HumanEval/42']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,10,normal,"['HumanEval/30', '442', '870', '189', 'HumanEval/42', 'HumanEval/37', 'HumanEval/57', '472', '824', 'HumanEval/80']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/31'],"def is_prime(n):
    if n < 2:
        return False
    for k in range(2, int(n**0.5) + 1):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/31', '605', '122', 'HumanEval/96', 'HumanEval/39']","def is_prime(n):
    if n < 2:
        return False
    for k in range(2, int(n**0.5) + 1):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/31', '605', '122', 'HumanEval/96', 'HumanEval/39', 'HumanEval/59', 'HumanEval/75', '256', 'HumanEval/82', '685']","def is_prime(n):
    if n < 2:
        return False
    for k in range(2, int(n**0.5) + 1):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,5,normal,"['HumanEval/32', 'HumanEval/121', '20', 'HumanEval/106', 'HumanEval/25']","import math

def find_zero(xs: list):
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,10,normal,"['HumanEval/32', 'HumanEval/121', '20', 'HumanEval/106', 'HumanEval/25', 'HumanEval/40', '847', '632', '406', '160']","import math

def find_zero(xs: list):
    begin, end = -1.,  # Changed from -1. to -1
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/37', 'HumanEval/34', '340', '487']","def sort_third(l: list):
    return [x for i, x in enumerate(l) if i % 3!= 0] + sorted([x for i, x in enumerate(l) if i % 3 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/37', 'HumanEval/34', '340', '487', '839', '108', '333', '889', '104']","def sort_third(l):
    return [x if i % 3!= 0 else sorted([x])[0] for i, x in enumerate(l)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(l: list):
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', 'HumanEval/104', '573', '758', '779']","def unique(l: list):
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', 'HumanEval/104', '573', '758', '779', '709', 'HumanEval/42', 'HumanEval/37', '281', '472']","def unique(l: list):
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['HumanEval/35'],"def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['HumanEval/35', '418', '357', '613', '200']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['HumanEval/35', '418', '357', '613', '200', 'HumanEval/42', '294', '259', '290', '517']","def max_element(lst):
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['HumanEval/36'],"def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['HumanEval/36', '781', '365', 'HumanEval/55', '211']","def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['HumanEval/36', '781', '365', 'HumanEval/55', '211', '907', '577', '155', '78', '383']","def fizz_buzz(n: int):
    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(str(i))
    s = ''.join(ns)
    ans = s.count('7')
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/37'],"def sort_even(l: list):
    evens = sorted([l[i] for i in range(0, len(l), 2)])
    odds = [l[i] for i in range(1, len(l), 2)]
    return [evens[i//2] if i % 2 == 0 else odds[i//2] else odds[i//2] for i in range(len(l))]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 4)', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/37', 'HumanEval/33', '784', 'HumanEval/34', '824']","def sort_even(l: list):
    evens = sorted(l[::2])
    odds = l[1::2]
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/37', 'HumanEval/33', '784', 'HumanEval/34', '824', '594', '790', '881', '567', '387']","def sort_even(l: list):
    evens = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    odds = [l[i] for i in range(len(l)) if i % 2!= 0]
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def decode_cyclic(s: str):
    def encode_cyclic(s: str):
        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
        groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
        return """".join(groups)

    def reverse_cyclic(s: str):
        groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
        groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]
        return """".join(groups)

    return reverse_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '39', 'HumanEval/89']","def encode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,10,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '39', 'HumanEval/89', 'HumanEval/65', '157', '317', '673', '217']","from collections import Counter
import heapq

def encode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)

def decode_cyclic(s: str):
    return """".join([group[-1] + group[:-1] if len(group) == 3 else group for group in encode_cyclic(s).split()])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['HumanEval/39'],"def prime_fib(n: int):
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, int(p ** 0.5) + 1):
            if p % k == 0:
                return False
        return True

    a, b = 0, 1
    i = 1
    while True:
        a, b = b, a + b
        if is_prime(b):
            i += 1
        if i == n:
            return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['HumanEval/39', 'HumanEval/55', '873', 'HumanEval/63', 'HumanEval/46']","import math

def prime_fib(n: int):
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True

    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['HumanEval/39', 'HumanEval/55', '873', 'HumanEval/63', 'HumanEval/46', '122', '32', '256', '605', 'HumanEval/59']","import math

def prime_fib(n: int):
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, int(math.sqrt(p)) + 1):
            if p % k == 0:
                return False
        return True

    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0"":
            return f[-1]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 17) (<string>, line 17)', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['HumanEval/40'],"def triples_sum_to_zero(l: list):
    seen = set()
    for num in l:
        complement = -num
        if complement in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,5,normal,"['HumanEval/40', 'HumanEval/43', '121', 'HumanEval/142', '340']","def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,10,normal,"['HumanEval/40', 'HumanEval/43', '121', 'HumanEval/142', '340', '916', '837', '420', '798', '65']","def triples_sum_to_zero(l: list):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['HumanEval/41'],"import math

def car_race_collision(n: int):
    """"""
    This function calculates the number of collisions in a car race scenario.
    
    Parameters:
    n (int): The number of cars in each direction.
    
    Returns:
    int: The number of collisions.
    """"""
    return n**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,5,normal,"['HumanEval/41', '249', '473', '414', '298']","def car_race_collision(n: int):
    return n**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,10,normal,"['HumanEval/41', '249', '473', '414', '298', '540', '239', '525', '187', 'HumanEval/127']","def car_race_collision(n: int):
    return n**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list):
    return [(e + 1) for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', '859', '766', '472', 'HumanEval/34']","def incr_list(l: list):
    return [(e + 1) for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', '859', '766', '472', 'HumanEval/34', '462', '621', '758', '779', '857']","def incr_list(l: list):
    return [(e + 1) for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['HumanEval/43'],"def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['HumanEval/43', 'HumanEval/40', '633', '767', '144']","def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['HumanEval/43', 'HumanEval/40', '633', '767', '144', '527', '126', '798', 'HumanEval/142', '723']","def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['HumanEval/44'],"def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if not isinstance(x, int) or not isinstance(base, int):
        raise TypeError(""Both x and base must be integers."")
    if not 2 <= base < 10:
        raise ValueError(""Base must be between 2 and 9"")
    if x == 0:
        return '0'
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,5,normal,"['HumanEval/44', '194', 'HumanEval/144', '257', '252']","def change_base(x: int, base: int):
    if base < 2 or base > 10:
        raise ValueError(""Base must be between 2 and 10"")
    if x == 0:
        return '0'
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,10,normal,"['HumanEval/44', '194', 'HumanEval/144', '257', '252', 'HumanEval/156', '619', '98', '467', '24']","def change_base(x: int, base: int):
    if x == 0:
        return '0'
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,1,normal,['HumanEval/45'],"def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,5,normal,"['HumanEval/45', '626', 'HumanEval/71', '198', '488']","import math

def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,10,normal,"['HumanEval/45', '626', 'HumanEval/71', '198', '488', '848', '52', '742', '163', '458']","import math

def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,1,normal,['HumanEval/46'],"def fib4(n: int):
    if n < 4:
        return [0, 0, 2, 0][n]

    fib4_sequence = [0, 0, 2, 0]
    for _ in range(4, n + 1):
        fib4[n] = fib4[n-1] + fib4[n-2] + fib4[n-3] + fib4[n-4]

    return fib4[n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,5,normal,"['HumanEval/46', 'HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39']","def fib4(n: int):
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,10,normal,"['HumanEval/46', 'HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39', '84', 'HumanEval/106', '122', '67', '608']","def fib4(n: int):
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,1,normal,['HumanEval/47'],"import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,5,normal,"['HumanEval/47', '397', '622', 'HumanEval/35', 'HumanEval/37']","import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,10,normal,"['HumanEval/47', '397', '622', 'HumanEval/35', 'HumanEval/37', '472', '825', '457', 'HumanEval/30', '432']","def median(l: list):
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['HumanEval/48'],"def is_palindrome(text: str):
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['HumanEval/48', 'HumanEval/10', '864', '485', 'HumanEval/107']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['HumanEval/48', 'HumanEval/10', '864', '485', 'HumanEval/107', '192', '396', 'HumanEval/134', '44', '737']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,1,normal,['HumanEval/49'],"def modp(n: int, p: int):
    """"""
    Return 2^n modulo p (be aware of numerics).
    """"""
    ret = 1
    for i in range(n):
        ret = (ret * 2) % p
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,5,normal,"['HumanEval/49', '402', '952', '288', '616']","def modp(n: int, p: int):
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,10,normal,"['HumanEval/49', '402', '952', '288', '616', '199', '388', '36', '122', '291']","def modp(n: int, p: int):
    ret = 1
    for i in range(n):
        ret = (ret * 2) % p
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,1,normal,['HumanEval/50'],"def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s if ch.isalpha()])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,5,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/89', 'HumanEval/65']","def encode_shift(s: str):
    return """".join([chr(((ord(ch) - ord(""a"") + 5) % 26) + ord(""a"")) for ch in s.lower()])

def decode_shift(s: str):
    return """".join([chr(((ord(ch) - ord(""a"") - 5) % 26) + ord(""a"")) for ch in s.lower()])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,10,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/89', 'HumanEval/65', '39', '317', '83', '668', 'HumanEval/162']","def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,1,normal,['HumanEval/51'],"def remove_vowels(text):
    vowels = 'aeiouAEIOU'
    return """".join([s for s in text if s not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,5,normal,"['HumanEval/51', '131', 'HumanEval/118', '676', '727']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['HumanEval/51', '131', 'HumanEval/118', '676', '727', '173', 'HumanEval/64', '437', 'HumanEval/93', '202']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['HumanEval/52'],"def below_threshold(l: list, t: int):
    return all(e < t for e in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '472', '69']","def below_threshold(l: list, t: int):
    return all(e < t for e in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '472', '69', 'HumanEval/57', '700', '228', '884', '477']","def below_threshold(l: list, t: int):
        return all(e < t for e in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/53'],"def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/53', '729', '127', '675', 'HumanEval/102']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/53', '729', '127', '675', 'HumanEval/102', '503', '498', 'HumanEval/85', '886', '98']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['HumanEval/54'],"def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,5,normal,"['HumanEval/54', '741', '352', '30', '338']","def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,10,normal,"['HumanEval/54', '741', '352', '30', '338', '53', '871', '874', '474', '666']","def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,1,normal,['HumanEval/55'],"def fib(n: int):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['HumanEval/55', '873', 'HumanEval/63', 'HumanEval/46', 'HumanEval/39']","def fib(n: int):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['HumanEval/55', '873', 'HumanEval/63', 'HumanEval/46', 'HumanEval/39', '577', '122', '479', '692', 'HumanEval/139']","def fib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 1
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['HumanEval/61'],"def correct_bracketing(brackets: str):
    stack = []
    for b in brackets:
        if b == ""<"":
            stack.append(b)
        elif b == "">"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['HumanEval/61', 'HumanEval/56', 'HumanEval/132', '175', '640']","def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        elif b == "">"":
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['HumanEval/61', 'HumanEval/56', 'HumanEval/132', '175', '640', 'HumanEval/119', '30', '338', 'HumanEval/140', 'HumanEval/10']","def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['HumanEval/57'],"def monotonic(l: list):
    increasing = decreasing = True
    for i in range(len(l) - 1):
        if l[i] < l[i + 1]:
            increasing = False
        if l[i] > l[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['HumanEval/57', '68', '670', 'HumanEval/52', '472']","def monotonic(l: list):
    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or
            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,10,normal,"['HumanEval/57', '68', '670', 'HumanEval/52', '472', '680', '69', 'HumanEval/42', 'HumanEval/35', 'HumanEval/30']","def monotonic(l: list):
    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or
            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def common(l1: list, l2: list):
    return sorted(set(e for e in l1 if e in l2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,5,normal,"['HumanEval/58', '431', '508', '298', '111']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,10,normal,"['HumanEval/58', '431', '508', '298', '111', '943', '648', '473', '414', '758']","def common(l1: list, l2: list):
    return sorted(set(l1) & set(l2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"import math

def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, int(math.sqrt(k)) + 1):
            if k % i == 0:
                return False
        return True

    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '32', '122', 'HumanEval/24', 'HumanEval/39']","import math

def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, int(math.sqrt(k)) + 1):
            if k % i == 0:
                return False
        return True
    max_prime = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            max_prime = max(max_prime, j)
    return max_prime",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '32', '122', 'HumanEval/24', 'HumanEval/39', '260', '256', '685', 'HumanEval/31', 'HumanEval/139']","import math

def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, int(math.sqrt(k)) + 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['HumanEval/60'],"def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['HumanEval/60', '448', '162', '392', '504']","def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,10,normal,"['HumanEval/60', '448', '162', '392', '504', '566', '777', '42', '886', '849']","def sum_to_n(n: int):
    return sum(range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['HumanEval/61'],"def correct_bracketing(brackets: str):
    """"""
    Checks if every opening bracket has a corresponding closing bracket.

    Args:
        brackets (str): A string of ""("" and "")"".

    Returns:
        bool: True if every opening bracket has a corresponding closing bracket, False otherwise.
    """"""
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        elif b == "")"":
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,5,normal,"['HumanEval/61', 'HumanEval/56', 'HumanEval/132', '175', '640']","def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,10,normal,"['HumanEval/61', 'HumanEval/56', 'HumanEval/132', '175', '640', 'HumanEval/119', '30', '338', '771', 'HumanEval/10']","def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['HumanEval/62'],"def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['HumanEval/62', 'HumanEval/32', '847', '835', 'HumanEval/106']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['HumanEval/62', 'HumanEval/32', '847', '835', 'HumanEval/106', '430', 'HumanEval/11', '58', '618', '343']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['HumanEval/63'],"def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    memo = {0: 0, 1: 0, 2: 1}
    for i in range(3, n + 1):
        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]
    return memo[n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,5,normal,"['HumanEval/63', 'HumanEval/55', 'HumanEval/46', '873', 'HumanEval/39']","def fibfib(n: int):
    if n <= 2:
        return 0 if n == 1 else 1
    a, b, c = 0, 0, 1
    for _ in range(3, n + 1):
        a, b, c = b, c, b + c + a
    return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['HumanEval/63', 'HumanEval/55', 'HumanEval/46', '873', 'HumanEval/39', '84', 'HumanEval/106', '300', 'HumanEval/15', 'HumanEval/139']","def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    memo = {0: 0, 1: 0, 2: 1}
    for i in range(3, n + 1):
        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]
    return memo[n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', '776', '667', 'HumanEval/118', '131']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s and s[-1] in 'aeiouAEIOU':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,10,normal,"['HumanEval/64', '776', '667', 'HumanEval/118', '131', 'HumanEval/51', '684', '165', '666', '30']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s and s[-1] in ""yY"":
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,1,normal,['HumanEval/65'],"def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[-shift:] + s[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/65', 'HumanEval/50', '909', '252', '775']","def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[-shift:] + s[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/65', 'HumanEval/50', '909', '252', '775', '619', 'HumanEval/104', '739', '257', '692']","def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[-shift:] + s[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['HumanEval/66'],"def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,5,normal,"['HumanEval/66', '398', '566', '146', '148']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,10,normal,"['HumanEval/66', '398', '566', '146', '148', '83', '886', 'HumanEval/108', '125', '242']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['HumanEval/67'],"def fruit_distribution(s, n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of 
    fruits 
    in the basket return the number of the fruits in the basket.
    """"""
    s = s.replace('apples', '0').replace('oranges', '0').replace('and', '')
    return n - int(s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['HumanEval/67', '61', '360', '849', '109']","def fruit_distribution(s,n):
    words = s.split()
    total_apples = 0
    total_oranges = 0
    for word in words:
        if word.isdigit():
            total_apples = int(word)
        elif word == 'apples':
            total_apples += int(words[words.index(word) + 1])
        elif word == 'oranges':
            total_oranges += int(words[words.index(word) - 1])
    return n - total_apples - total_oranges",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['HumanEval/67', '61', '360', '849', '109', '633', '453', '25', '172', '564']","def fruit_distribution(s, n):
    total = 0
    for i in s.split(' '):
        if i.isdigit():
            total += int(i)
        elif i == 'apples' or i == 'oranges':
            total += int(i[:-1])
    return n - total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['HumanEval/68'],"def pluck(arr):
    if not arr:
        return []
    evens = [x for x in arr if x % 2 == 0]
    if not evens:
        return []
    return [min(evens), arr.index(min(evens))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,5,normal,"['HumanEval/68', '225', '304', '940', '867']","def pluck(arr):
    if not arr:
        return []
    evens = [x for x in arr if x % 2 == 0]
    if not evens:
        return []
    return [min(evens), arr.index(min(evens))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['HumanEval/68', '225', '304', '940', '867', '893', '158', '195', '189', '460']","def pluck(arr):
    if not arr:
        return []
    evens = [x for x in arr if x % 2 == 0]
    if not evens:
        return []
    return [min(evens), arr.index(min(evens))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,1,normal,['HumanEval/69'],"from collections import Counter

def search(lst):
    freq = Counter(lst)
    ans = -1
    for i in range(1, max(lst) + 1):
        if freq[i] >= i:
            ans = i
            break
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['HumanEval/69', 'HumanEval/136', 'HumanEval/35', '418', '184']","from collections import Counter

def search(lst):
    freq = Counter(lst)
    for i in range(1, max(lst) + 1):
        if freq[i] >= i:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['HumanEval/69', 'HumanEval/136', 'HumanEval/35', '418', '184', '492', '658', '446', '362', '130']","from collections import Counter

def search(lst):
    counter = Counter(lst)
    for i in range(1, max(lst) + 1):
        if counter[i] >= i:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['HumanEval/70'],"def strange_sort_list(lst):
    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,5,normal,"['HumanEval/70', '37', 'HumanEval/149', 'HumanEval/37', 'HumanEval/136']","def strange_sort_list(lst):
    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,10,normal,"['HumanEval/70', '37', 'HumanEval/149', 'HumanEval/37', 'HumanEval/136', '104', 'HumanEval/33', '705', '896', '889']","def strange_sort_list(lst):
    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,1,normal,['HumanEval/71'],"import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = math.sqrt(s * (s - a) * (s - b) * (s - c'))
    area = round(area, 2)
    return area",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 7) (<string>, line 7)', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['HumanEval/71', '626', 'HumanEval/45', '176', '198', '677', 'HumanEval/157', '742', '449', '488']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    area = round(area, 2)
    return area",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['HumanEval/72'],"def will_it_fly(q, w):
    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i]!= q[j]:
            return False
        i+=1
        j-=1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['HumanEval/72', 'HumanEval/3', '129', '26', 'HumanEval/80']","def will_it_fly(q, w):
    if sum(q) > w:
        return False
    i, j = 0, len(q)-1
    while i<j:
        if q[i]!= q[j]:
            return False
        i+=1
        j-=1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,10,normal,"['HumanEval/72', 'HumanEval/3', '129', '26', 'HumanEval/80', '20', 'HumanEval/40', '121', '23', '433']","def will_it_fly(q, w):
    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i < j:
        if q[i]!= q[j]:
            return False
        i+=1
        j-=1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,1,normal,['HumanEval/73'],"def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.
    """"""
    ans = 0
    for i in range(len(arr) // 2):
        if arr[i]!= arr[len(arr) - i - 1]:
            ans += 1
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,5,normal,"['HumanEval/73', '763', '856', '100', '867']","def smallest_change(arr):
    count = 0
    for i in range(len(arr) // 2):
        if arr[i]!= arr[len(arr) - i - 1]:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,10,normal,"['HumanEval/73', '763', '856', '100', '867', '540', '145', '689', '350', 'HumanEval/105']","def smallest_change(arr):
    return sum(a!= b for a, b in zip(arr, arr[::-1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['HumanEval/74'],"def total_match(lst1, lst2):
    l1 = sum(len(st) for st in lst1)
    l2 = sum(len(st) for st in lst2)
    return lst1 if l1 <= l2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,5,normal,"['HumanEval/74', '728', '298', 'HumanEval/119', 'HumanEval/69']","def total_match(lst1, lst2):
    l1 = sum(len(st) for st in lst1)
    l2 = sum(len(st) for st in lst2)
    return lst1 if l1 <= l2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,10,normal,"['HumanEval/74', '728', '298', 'HumanEval/119', 'HumanEval/69', '242', 'HumanEval/151', '666', '446', '874']","def total_match(lst1, lst2):
    return lst1 if sum(len(st) for st in lst1) <= sum(len(st) for st in lst2) else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for j in range(2, int(math.sqrt(n)) + 1):
            if n % j == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i): continue
        for j in range(i, 101):
            if not is_prime(j): continue
            for k in range(j, 101):
                if not is_prime(k): continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/31', '605', 'HumanEval/59', 'HumanEval/39']","import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for k in range(2, int(math.sqrt(n)) + 1):
            if n % k == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i): continue
        for j in range(2, 101):
            if not is_prime(j): continue
            for k in range(2, 101):
                if not is_prime(k): continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/31', '605', 'HumanEval/59', 'HumanEval/39', '685', '32', '122', 'HumanEval/96', '121']","import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for k in range(2, int(math.sqrt(n)) + 1):
            if n % k == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i): continue
        for j in range(2, 101):
            if not is_prime(j): continue
            for k in range(2, 101):
                if not is_prime(k): continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,1,normal,['HumanEval/76'],"import math

def is_simple_power(x, n):
    if (n == 1): 
        return (x == 1) 
    return math.log(x, n) % 1 == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,5,normal,"['HumanEval/76', '167', '199', 'HumanEval/144', '138']","import math

def is_simple_power(x, n):
    if n_root = round(math.pow(x, 1/n))
    return n_root ** n == x",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: invalid syntax. Maybe you meant '==' or ':=' instead of '='? (<string>, line 4)"", 'completion_id': 0})]})"
76,HumanEval/76,10,normal,"['HumanEval/76', '167', '199', 'HumanEval/144', '138', '388', '93', '600', '211', '887']","import math

def is_simple_power(x, n):
    if n == 1:
        return x == 1
    root = math.log(x, n)
    return root == int(root)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['HumanEval/77'],"import math

def iscube(a):
    a = abs(a)
    return round(a ** (1. / 3)) ** 3 == a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,5,normal,"['HumanEval/77', '447', '129', '646', '188']","import math

def iscube(a):
    a = abs(a)
    return round(a ** (1. / 3)) ** 3 == a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,10,normal,"['HumanEval/77', '447', '129', '646', '188', '803', '422', '420', '837', '59']","import math

def iscube(a):
    return round(a ** (1. / 3)) ** 3 == a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,1,normal,['HumanEval/78'],"def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['HumanEval/78', '107', '256', '122', '135']","def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in num:
        if i in primes:
            total += 1
    return total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,10,normal,"['HumanEval/78', '107', '256', '122', '135', '605', 'HumanEval/82', 'HumanEval/94', 'HumanEval/131', '745']","def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,1,normal,['HumanEval/79'],"def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['HumanEval/79', '99', '24', '33', '194']","def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['HumanEval/79', '99', '24', '33', '194', '467', '494', '208', '252', '759']","def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['HumanEval/80'],"def is_happy(s):
    if len(s) < 3:
        return False

    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,5,normal,"['HumanEval/80', '349', '967', '30', '192']","def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['HumanEval/80', '349', '967', '30', '192', '338', '523', '737', '396', '667']","def is_happy(s):
    if len(s) < 3:
        return False

    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def numerical_letter_grade(grades):
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,5,normal,"['HumanEval/81', '621', '397', '722', '169']","def numerical_letter_grade(grades):
    letter_grades = {
        4.0: 'A+', 
        3.7: 'A', 
        3.3: 'A-', 
        3.0: 'B+', 
        2.7: 'B', 
        2.3: 'B-', 
        2.0: 'C+', 
        1.7: 'C', 
        1.3: 'C-', 
        1.0: 'D+', 
        0.7: 'D', 
        0.0: 'D-'
    }
    result = []
    for gpa in grades:
        for key in sorted(letter_grades.keys(), reverse=True):
            if gpa >= key:
                result.append(letter_grades[key])
                break
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,10,normal,"['HumanEval/81', '621', '397', '722', '169', '47', '64', '236', '247', '622']","def numerical_letter_grade(grades):
    letter_grades = {
        4.0: 'A+',
        3.7: 'A',
        3.3: 'A-',
        3.0: 'B+',
        2.7: 'B',
        2.3: 'B-',
        2.0: 'C+',
        1.7: 'C',
        1.3: 'C-',
        1.0: 'D+',
        0.7: 'D',
        0.0: 'D-'
    }
    return [letter_grades.get(gpa, 'E') for gpa in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,1,normal,['HumanEval/82'],"def prime_length(string):
    l = len(string)
    if l <= 1:
        return False
    for i in range(2, int(l**0.5) + 1):
        if l % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['HumanEval/82', '605', '813', '523', '125']","def prime_length(string):
    l = len(string)
    if l <= 1:
        return False
    for i in range(2, int(l**0.5) + 1):
        if l % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,10,normal,"['HumanEval/82', '605', '813', '523', '125', 'HumanEval/31', '192', 'HumanEval/23', '79', '964']","def prime_length(string):
    l = len(string)
    if l <= 1:
        return False
    for i in range(2, int(l**0.5) + 1):
        if l % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,1,normal,['HumanEval/83'],"def starts_one_ends(n):
    if n == 1: return 1
    return 18 * (10 ** (n - 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,5,normal,"['HumanEval/83', '365', '479', '745', '657']","def starts_one_ends_one(n):
    return 18 * (10 ** (n - 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,10,normal,"['HumanEval/83', '365', '479', '745', '657', '442', '109', '256', '211', 'HumanEval/131']","def starts_one_ends(n):
    return 18 * (10 ** (n - 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,1,normal,['HumanEval/84'],"def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:])

# Test cases
print(solve(1000))  # Output: 1
print(solve(150))   # Output: 110
print(solve(11))    # Output: 1100",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 2)"", 'completion_id': 0})]})"
84,HumanEval/84,5,normal,"['HumanEval/84', '566', '148', '398', '845']","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,10,normal,"['HumanEval/84', '566', '148', '398', '845', '448', 'HumanEval/60', 'HumanEval/66', '479', '162']","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['HumanEval/85'],"def add(lst):
    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,5,normal,"['HumanEval/85', '881', '784', 'HumanEval/113', 'HumanEval/122']","def add(lst):
    return sum([lst[i] for i in range(1, len(lst), 2] if lst[i]%2 == 0])",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 2)"", 'completion_id': 0})]})"
85,HumanEval/85,10,normal,"['HumanEval/85', '881', '784', 'HumanEval/113', 'HumanEval/122', '729', '363', 'HumanEval/155', 'HumanEval/37', '503']","def add(lst):
    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['HumanEval/86'],"def anti_shuffle(s):
    return''.join(''.join(sorted(i)) for i in s.split(' '))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['HumanEval/86', '39', '877', '374', '386']","def anti_shuffle(s):
    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['HumanEval/86', '39', '877', '374', '386', 'HumanEval/27', '674', '364', '604', '505']","def anti_shuffle(s):
    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['HumanEval/87'],"def get_row(lst, x):
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,error,error,[],,0.0,cannot access local variable 'e' where it is not associated with a value
88,HumanEval/88,1,normal,['HumanEval/88'],"def sort_array(array):
    if len(array) == 0:
        return []
    return sorted(array, reverse=(array[0]+array[-1]) % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['HumanEval/88', '229', 'HumanEval/116', '915', '777']","def sort_array(array):
    if len(array) == 0:
        return array
    if (array[0] + array[-1]) % 2 == 0:
        return sorted(array)
    else:
        return sorted(array, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['HumanEval/88', '229', 'HumanEval/116', '915', '777', '940', '12', '815', 'HumanEval/114', 'HumanEval/135']","def sort_array(array):
    if len(array) == 0:
        return []
    elif len(array) == 1:
        return array
    else:
        if (array[0] + array[-1]) % 2 == 0:
            return sorted(array)
        else:
            return sorted(array, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,1,normal,['HumanEval/89'],"def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/89', 'HumanEval/50', 'HumanEval/38', 'HumanEval/162', 'HumanEval/86']","def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/89', 'HumanEval/50', 'HumanEval/38', 'HumanEval/162', 'HumanEval/86', '39', 'HumanEval/11', 'HumanEval/112', 'HumanEval/27', 'HumanEval/161']","def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c.isalpha():
            out += d[(d.index(c.lower())+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['HumanEval/90'],"def next_smallest(lst):
    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['HumanEval/90', '755', '457', 'HumanEval/136', '100']","def next_smallest(lst):
    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['HumanEval/90', '755', '457', 'HumanEval/136', '100', '340', '62', '322', '408', '95']","def next_smallest(lst):
    if len(set(lst)) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"import re

def is_bored(S):
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence.startswith('I ') for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '79', '964', 'HumanEval/80', 'HumanEval/101']","import re

def is_bored(S):
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence.startswith('I ') for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '79', '964', 'HumanEval/80', 'HumanEval/101', '897', '172', '862', 'HumanEval/143', '13']","import re

def is_bored(S):
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence.startswith('I ') for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['HumanEval/92'],"def any_int(x, y, z):
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        return (x+y==z) or (x+z==y) or (y+z==x)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['HumanEval/92', 'HumanEval/53', '801', '121', '127']","def any_int(x, y, z):
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        return (x+y==z) or (x+z==y) or (y+z==x)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['HumanEval/92', 'HumanEval/53', '801', '121', '127', '683', 'HumanEval/138', '886', '138', '904']","def any_int(x, y, z):
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        return (x+y==z) or (x+z==y) or (y+z==x)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/93'],"def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,5,normal,"['HumanEval/93', '131', 'HumanEval/50', 'HumanEval/51', 'HumanEval/38']","def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,10,normal,"['HumanEval/93', '131', 'HumanEval/50', 'HumanEval/51', 'HumanEval/38', '317', 'HumanEval/89', '668', '474', 'HumanEval/118']","def encode(s):
    vowels = ""aeiouAEIOU""
    vowels_replace = {i: chr(ord(i) + 2) for i in vowels}
    return ''.join(vowels_replace[i] if i in vowels else i for i in s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,1,normal,['HumanEval/94'],"import heapq

def skjkasdkd(lst):
    def isPrime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_heap = []
    for num in lst:
        if num > 0 and isPrime(num):
            heapq.heappush(max_heap, -num)
        if len(max_heap) > 1:
            heapq.heappop(max_heap)
    if max_heap:
        result = sum(int(digit) for digit in str(-max_heap[0]))
    else:
        result = 0
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,5,normal,"['HumanEval/94', '122', '685', 'HumanEval/78', 'HumanEval/59']","def skjkasdkd(lst):
    def isPrime(n):
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    maxx = 0
    for num in lst:
        if num > maxx and isPrime(num):
            maxx = num
    result = sum(int(digit) for digit in str(maxx))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,10,normal,"['HumanEval/94', '122', '685', 'HumanEval/78', 'HumanEval/59', '148', 'HumanEval/66', '398', '286', '476']","def skjkasdkd(lst):
    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False
        return True

    maxx = 0
    for num in lst:
        if num > maxx and isPrime(num):
            maxx = num
    result = sum(int(digit) for digit in str(maxx))
                 for digit in str(maxx) if digit.isdigit())
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unexpected indent (<string>, line 13)', 'completion_id': 0})]})"
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    state = ""start""
    for key in dict.keys():
        if not isinstance(key, str):
            return False
        if state == ""start"":
            if key.isupper():
                state = ""upper""
            elif key.islower():
                state = ""lower""
            else:
                return False
        elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
            return False
    return state == ""upper"" or state == ""lower""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,5,normal,"['HumanEval/95', '582', '885', '523', '349']","def check_dict_case(d):
    if not d:
        return False
    state = ""start""
    for key in d.keys():
        if not isinstance(key, str):
            return False
        if state == ""start"":
            if key.isupper():
                state = ""upper""
            elif key.islower():
                state = ""lower""
            else:
                return False
        elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,10,normal,"['HumanEval/95', '582', '885', '523', '349', '464', '917', '53', 'HumanEval/27', '624']","def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():
            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                state = ""mixed""
                break
            else:
                break
        return state == ""upper"" or state == ""lower""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,1,normal,['HumanEval/96'],"import math

def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(math.sqrt(i)) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['HumanEval/96', '256', '122', '685', '211']","import math

def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(math.sqrt(i)) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['HumanEval/96', '256', '122', '685', '211', 'HumanEval/31', '260', '32', '442', 'HumanEval/60']","def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for k in range(2, int(num ** 0.5) + 1):
            if num % k == 0:
                return False
        return True

    primes = [i for i in range(2, n) if is_prime(i)]
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['HumanEval/97'],"def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['HumanEval/97', '47', '127', '98', '93']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['HumanEval/97', '47', '127', '98', '93', 'HumanEval/13', '445', 'HumanEval/163', '726', 'HumanEval/131']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['HumanEval/98'],"def count_upper(s):
    count = 0
    for i in range(0, len(s), 2):
        if s[i].upper() in ""AEIOU"":
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['HumanEval/98', 'HumanEval/64', '624', '776', '30']","def count_upper(s):
    count = 0
    vowels = ""AEIOU""
    for i in range(0,len(s),2):
        if s[i] in vowels:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['HumanEval/98', 'HumanEval/64', '624', '776', '30', '338', '666', '165', '806', '459']","import re

def count_upper(s):
    return sum(1 for i in range(0, len(s), 2) if s[i].upper() in 'AEIOU')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"import math

def closest_integer(value):
    num = float(value)
    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]
    if value[-2:] == '.5':
        if num > 0:
            res = math.ceil(num)
        else:
            res = math.floor(num)
    else:
        res = math.floor(num + 0.5)
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '89', 'HumanEval/20', 'HumanEval/2', '375']","from math import floor, ceil

def closest_integer(value):
    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    else:
        res = round(num)
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '89', 'HumanEval/20', 'HumanEval/2', '375', '692', '47', '755', '226', 'HumanEval/136']","from math import floor, ceil

def closest_integer(value):
    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    else:
        res = round(num)
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/100'],"def make_a_pile(n):
    return [n + 2*i if n % 2 == 0 else n + 2*i + 1 for i in range(n)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/100', '921', '536', '962', '392']","def make_a_pile(n):
    return [n + 2*i if n % 2 else n + 2*i + 1 for i in range(n)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/100', '921', '536', '962', '392', '881', 'HumanEval/123', '549', '770', 'HumanEval/130']","def make_a_pile(n):
    return [n + 2*i for i in range(n)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/101'],"import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/101', 'HumanEval/125', '565', '964', 'HumanEval/143']","import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/101', 'HumanEval/125', '565', '964', 'HumanEval/143', '79', 'HumanEval/117', '118', '604', '128']","import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['HumanEval/102'],"def choose_num(x, y):
    if x > y:
        return -1
    even_num = y
    while even_num > x and even_num % 2!= 0:
        even_num -= 1
    return even_num if even_num >= x else -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['HumanEval/102', '221', '924', '904', 'HumanEval/150']","def choose_num(x, y):
    if x > y:
        return -1
    for i in range(y, x - 1, -1):
        if i % 2 == 0:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['HumanEval/102', '221', '924', '904', 'HumanEval/150', '844', '127', '41', '907', '498']","def choose_num(x, y):
    if x > y:
        return -1
    for i in range(y, x - 1, -1):
        if i % 2 == 0:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['HumanEval/103'],"def rounded_avg(n, m):
    if m < n:
        return -1
    summation = (m + n) * (m - n + 1) // 2
    rounded_avg = round(summation / (m - n + 1))
    return bin(rounded_avg)[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['HumanEval/103', '375', '664', '509', '422']","def rounded_avg(n, m):
    if n > m:
        return -1
    return bin(round(sum(range(n, m+1)) / (m - n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['HumanEval/103', '375', '664', '509', '422', '615', '442', '599', '830', '530']","import math

def rounded_avg(n, m):
    if m < n:
        return -1
    summation = sum(range(n, m+1))
    return bin(round(summation/(m - n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['HumanEval/104'],"def unique_digits(x):
    odd_digit_elements = []
    for i in x:
        if all(int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,5,normal,"['HumanEval/104', '41', '845', '426', 'HumanEval/34']","def unique_digits(x):
    return sorted([i for i in x if all(int(c) % 2 == 1 for c in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,10,normal,"['HumanEval/104', '41', '845', '426', 'HumanEval/34', '572', 'HumanEval/131', '745', '36', '406']","def unique_digits(x):
    return sorted([i for i in x if all(int(c) % 2 == 1 for c in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,1,normal,['HumanEval/105'],"def by_length(arr):
    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)
    return [dic[i] for i in sorted_arr]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,5,normal,"['HumanEval/105', '915', 'HumanEval/88', '141', '782']","def by_length(arr):
    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)
    return [dic[num] for num in sorted_arr]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,10,normal,"['HumanEval/105', '915', 'HumanEval/88', '141', '782', 'HumanEval/108', 'HumanEval/116', '867', '229', '57']","def by_length(arr):
    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,1,normal,['HumanEval/106'],"import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['HumanEval/106', '905', 'HumanEval/139', 'HumanEval/25', 'HumanEval/63']","def f(n):
    return [i if i % 2!= 0 else 1 for i in range(1, n+1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['HumanEval/106', '905', 'HumanEval/139', 'HumanEval/25', 'HumanEval/63', 'HumanEval/46', '873', '577', 'HumanEval/55', '634']","def f(n):
    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['HumanEval/107'],"def even_odd_palindrome(n):
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_palindrome_count += 1
            else:
                odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,5,normal,"['HumanEval/107', '485', '909', '387', '109']","def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
            odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,10,normal,"['HumanEval/107', '485', '909', '387', '109', 'HumanEval/155', '887', 'HumanEval/48', '600', '100']","def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_palindrome_count += 1
            else:
                odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,1,normal,['HumanEval/108'],"def count_nums(arr):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -n, -1 
        return sum(int(i) * neg for i in str(n))
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,5,normal,"['HumanEval/108', '530', '543', '258', '697']","def count_nums(arr):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        return sum(int(i) * neg for i in str(n))
    return len([x for x in [digits_sum(i) for i in arr] if x > 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,10,normal,"['HumanEval/108', '530', '543', '258', '697', '442', '398', '365', '867', '767']","def count_nums(arr):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        return sum(int(i) * neg for i in str(abs(n)))
    return sum(1 for x in arr if digits_sum(x) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['HumanEval/109'],"def move_one_ball(arr):
    if len(arr) == 0:
        return True
    sorted_array = sorted(arr)
    min_value = min(arr)
    min_index = arr.index(min_value)
    my_arr = arr[min_index:] + arr[0:min_index]
    for i in range(len(arr)):
        if my_arr[i]!= sorted_array[i]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,5,normal,"['HumanEval/109', 'HumanEval/135', '229', '665', '323']","def move_one_ball(arr):
    if len(arr) == 0:
        return True
    sorted_array = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i]!= sorted_array:
        return False
    return True",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'if' statement on line 6 (<string>, line 7)"", 'completion_id': 0})]})"
109,HumanEval/109,10,normal,"['HumanEval/109', 'HumanEval/135', '229', '665', '323', '915', 'HumanEval/116', 'HumanEval/88', '856', '760']","def move_one_ball(arr):
    if len(arr) == 0:
        return True
    sorted_array = sorted(arr)
    my_arr = []
    min_value = min(arr)
    min_index = arr.index(min_value)
    my_arr = arr[min_index:] + arr[0:min_index]
    for i in range(len(arr)):
        if my_arr[i]!= sorted_array[i]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['HumanEval/110'],"def exchange(lst1, lst2):
    odd = sum(1 for i in lst1 if i % 2 == 1)
    even = sum(1 for i in lst2 if i % 2 == 0)
    return ""YES"" if even >= odd else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,5,normal,"['HumanEval/110', '648', 'HumanEval/58', '431', '240']","import re

def exchange(lst1, lst2):
    odd = sum(1 for i in lst1 if i%2 == 1)
    even = sum(1 for i in lst2 if i%2 == 0)
    return ""YES"" if even >= odd else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,10,normal,"['HumanEval/110', '648', 'HumanEval/58', '431', '240', '699', '595', '728', '838', '257']","def exchange(lst1, lst2):
    odd = sum(1 for i in lst1 if i % 2 == 1)
    even = sum(1 for i in lst2 if i % 2 == 0)
    return ""YES"" if even >= odd else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['HumanEval/111'],"from collections import Counter

def histogram(test):
    if not test:
        return {}
    
    counter = Counter(test.split())
    max_count = max(counter.values())
    
    return {key: max_count for key, value in counter.items() if value == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,5,normal,"['HumanEval/111', '326', '684', '332', '172']","from collections import defaultdict

def histogram(test):
    dict1 = defaultdict(int)
    for word in test.split():
        dict1[word] += 1
    max_count = max(dict1.values())
    return {key: value for key, value in dict1.items() if value == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['HumanEval/111', '326', '684', '332', '172', '602', '130', '362', '446', '217']","from collections import defaultdict

def histogram(test):
    dict1 = defaultdict(int)
    for i in test.split():
        if i!= '':
            dict1[i] += 1
    max_count = max(dict1.values())
    result = {k: v for k, v in dict1.items() if v == max_count}
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['HumanEval/112'],"def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,5,normal,"['HumanEval/112', 'HumanEval/10', '604', '909', '39']","def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,10,normal,"['HumanEval/112', 'HumanEval/10', '604', '909', '39', '377', '131', '864', '456', 'HumanEval/48']","def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['HumanEval/113'],"def odd_count(lst):
    res = []
    for i, arr in enumerate(lst):
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements {}n the str{}ng {} of the {}nput."".format(n, n, n, n))
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,5,normal,"['HumanEval/113', '109', 'HumanEval/155', '258', '226']","def odd_count(lst):
    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) +""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,10,normal,"['HumanEval/113', '109', 'HumanEval/155', '258', '226', '238', '684', 'HumanEval/131', '18', '61']","def odd_count(lst):
    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str"" + str(n) + ""ng "" + str(n) + "" of the "" + str(n) + ""nput."")
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['HumanEval/114'],"def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,5,normal,"['HumanEval/114', '777', '476', '656', '511']","def minSubArraySum(nums):
    max_sum = float('-inf')
    current_sum = 0
    for num in nums:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return -max_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,10,normal,"['HumanEval/114', '777', '476', '656', '511', '42', '974', '836', '340', '559']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,1,normal,['HumanEval/115'],"def max_fill(grid, capacity):
    return sum([math.ceil(sum(arr)/capacity) for arr in grid]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 2)"", 'completion_id': 0})]})"
115,HumanEval/115,5,normal,"['HumanEval/115', '314', '423', '318', '911']","def max_fill(grid, capacity):
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,10,normal,"['HumanEval/115', '314', '423', '318', '911', '836', '559', '54', '938', 'HumanEval/114']","def max_fill(grid, capacity):
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,1,normal,['HumanEval/116'],"def sort_array(arr):
    return sorted(sorted(arr), key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,5,normal,"['HumanEval/116', 'HumanEval/88', '229', '915', '940']","def sort_array(arr):
    return sorted(sorted(arr), key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,10,normal,"['HumanEval/116', 'HumanEval/88', '229', '915', '940', '141', '815', 'HumanEval/135', '516', '839']","def sort_array(arr):
    return sorted(sorted(arr), key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['HumanEval/117'],"def select_words(s, n):
    vowels = 'aeiou'
    result = []
    for word in s.split():
        n_consonants = sum(1 for char in word.lower() if char not in vowels)
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,5,normal,"['HumanEval/117', 'HumanEval/101', '128', '862', 'HumanEval/15']","import re

def select_words(s, n):
    s = s.lower()
    words = re.findall(r'\b\w+\b', s)
    result = []
    for word in words:
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i] not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['HumanEval/117', 'HumanEval/101', '128', '862', 'HumanEval/15', '964', '79', '604', 'HumanEval/118', '305']","import re

def select_words(s, n):
    result = []
    for word in s.split():
        n_consonants = 0
        for char in word.lower():
            if char not in 'aeiou':
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/118'],"def get_closest_vowel(word):
    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-1, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,5,normal,"['HumanEval/118', '667', '131', 'HumanEval/51', 'HumanEval/117']","def get_closest_vowel(word):
    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U""}
    for i in range(len(word)-1, -1, -1):
        if word[i] in vowels:
            if (i == len(word)-1 or word[i+1] not in vowels) and (i == 0 or word[i-1] not in vowels):
                return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,10,normal,"['HumanEval/118', '667', '131', 'HumanEval/51', 'HumanEval/117', '776', 'HumanEval/64', '868', '526', 'HumanEval/134']","def get_closest_vowel(word):
    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", ""I"", ""O"", ""U""}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,1,normal,['HumanEval/119'],"def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,5,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', 'HumanEval/132', '874']","def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,10,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', 'HumanEval/132', '874', '30', '338', 'HumanEval/6', 'HumanEval/110', '186']","def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['HumanEval/120'],"def maximum(arr, k):
    return sorted(arr, reverse=True)[:k]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,5,normal,"['HumanEval/120', '57', '550', '463', '548']","def maximum(arr, k):
    return sorted(arr, reverse=True)[:k]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,10,normal,"['HumanEval/120', '57', '550', '463', '548', '597', '922', '60', '571', '415']","def maximum(arr, k):
    return sorted(arr, reverse=True)[:k]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['HumanEval/121'],"def solution(lst):
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['HumanEval/121', '881', '549', '770', 'HumanEval/113']","def solution(lst):
    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['HumanEval/121', '881', '549', '770', 'HumanEval/113', '782', '797', '784', '775', '270']","def solution(lst):
    return sum(x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['HumanEval/122'],"def add_elements(arr, k):
    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,5,normal,"['HumanEval/122', '798', '42', '398', '144']","def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,10,normal,"['HumanEval/122', '798', '42', '398', '144', '777', '270', '633', '782', '363']","def add_elements(arr, k):
    return sum(i for i in arr[:k] if len(str(i)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,1,normal,['HumanEval/123'],"def get_odd_collatz(n):
    odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n / 2
        else:
            n = n * 3 + 1
        if n % 2 == 1:
            odd_collatz.append(int(n))
    return sorted(odd_collatz)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,5,normal,"['HumanEval/123', '556', '109', '770', '887']","def get_odd_collatz(n):
    odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n / 2
        else:
            n = n*3 + 1
        if n%2!= 0:
            odd_collatz.append(int(n))
    return sorted(odd_collatz)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,error,error,[],,0.0,cannot access local variable 'e' where it is not associated with a value
124,HumanEval/124,1,normal,['HumanEval/124'],"from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['HumanEval/124', '910', '866', '336', '191']","from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['HumanEval/124', '910', '866', '336', '191', '737', '820', '455', '403', '906']","import re
from datetime import datetime

def valid_date(date):
    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except ValueError:
        return False

    try:
        datetime(year, month, day)
    except ValueError:
        return False

    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['HumanEval/125'],"def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return sum(1 for i in txt if i.islower() and ord(i) % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,5,normal,"['HumanEval/125', '565', 'HumanEval/101', '128', '956']","import re

def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,10,normal,"['HumanEval/125', '565', 'HumanEval/101', '128', '956', '964', '79', 'HumanEval/143', '15', '862']","import re

def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected ':' (<string>, line 8)"", 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['HumanEval/126'],"def is_sorted(lst):
    count_digit = {}
    for i in lst:
        if i in count_digit:
            count_digit[i] += 1
        else:
            count_digit[i] = 1
    if any(val > 2 for val in count_digit.values()):
        return False
    return all(lst[i-1] <= lst[i] for i in range(1, len(lst)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,5,normal,"['HumanEval/126', '567', '472', 'HumanEval/57', 'HumanEval/70']","def is_sorted(lst):
    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    return all(lst[i-1] <= lst[i] for i in range(1, len(lst)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['HumanEval/126', '567', '472', 'HumanEval/57', 'HumanEval/70', 'HumanEval/149', 'HumanEval/37', 'HumanEval/19', '54', '487']","def is_sorted(lst):
    count_digit = {}
    for i in lst:
        if i in count_digit:
            count_digit[i] += 1
        else:
            count_digit[i] = 1
    if any(count_digit[i] > 2 for i in lst):
        return False
    return all(lst[i-1] <= lst[i] for i in range(1, len(lst)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"def intersection(interval1, interval2):
    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', '473', '249', 'HumanEval/82', '605']","def intersection(interval1, interval2):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l + 1
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', '473', '249', 'HumanEval/82', '605', '414', '298', 'HumanEval/83', 'HumanEval/31', '891']","def intersection(interval1, interval2):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start + 1
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['HumanEval/128'],"def prod_signs(arr):
    if not arr: return None
    prod = 1 if all(i >= 0 for i in arr) else -1
    return prod * sum([abs(i) for i in arr])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['HumanEval/128', '25', '734', '922', 'HumanEval/8']","def prod_signs(arr):
    if not arr: return None
    prod = 1
    for num in arr:
        if num < 0:
            prod *= -1
    return prod * sum([abs(i) for i in arr])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['HumanEval/128', '25', '734', '922', 'HumanEval/8', '804', '415', '463', '798', '911']","def prod_signs(arr):
    if not arr:
        return None
    sign = 1
    for num in arr:
        if num < 0:
            sign *= -1
    return sign * sum(abs(num) for num in arr))",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 8)"", 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['HumanEval/129'],"from collections import deque

def minPath(grid, k):
    n = len(grid)
    visited = set()
    queue = deque([(1, 0, 0, [])])
    visited.add((0, 0))
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]

    while queue:
        val, x, y, path = queue.popleft()
        if len(path) == k:
            return path
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:
                visited.add((nx, ny))
                queue.append((val, nx, ny, path + [val]))
    return []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,5,normal,"['HumanEval/129', '721', '974', '753', '609']","from collections import deque

def minPath(grid, k):
    n = len(grid)
    visited = [[False for _ in range(n)] for _ in range(n)]
    queue = deque([(0, 0, [grid[0][0]])])
    visited[0][0 = grid[0][0]
    while queue:
        x, y, path = queue.popleft()
        if len(path) == k:
            return path
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                queue.append((nx, ny, path + [grid[nx][ny]]))
                visited[nx][ny] = True
    return []",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 7)"", 'completion_id': 0})]})"
129,HumanEval/129,10,normal,"['HumanEval/129', '721', '974', '753', '609', '457', '938', '528', '94', '322']","from itertools import product

def minPath(grid, k):
    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i!= 0:
                    temp.append(grid[i - 1][j])
                if j!= 0:
                    temp.append(grid[i][j - 1])
                if i!= n - 1:
                    temp.append(grid[i + 1][j])
                if j!= n - 1:
                    temp.append(grid[i][j + 1])
                val = min(temp)
    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,1,normal,['873'],"def tri(n):
    sequence = [3]
    for i in range(1, n + 1):
        if i % 2 == 0:
            sequence.append(1 + i // 2)
        else:
            sequence.append(sequence[i - 2] + sequence[i - 1] + sequence[i - 3])
    return sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['873', 'HumanEval/63', 'HumanEval/55', 'HumanEval/130', '84']","def tri(n):
    if n == 0:
        return [1
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 3)"", 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['873', 'HumanEval/63', 'HumanEval/55', 'HumanEval/130', '84', 'HumanEval/46', '231', '389', '926', '28']","def tri(n):
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['HumanEval/131'],"def digits(n):
    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['HumanEval/131', '711', '845', '365', '479']","def digits(n):
    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['HumanEval/131', '711', '845', '365', '479', '577', '566', '657', '435', '844']","def digits(n):
    product = 1
    for digit in str(n):
        int_digit = int(digit)
        if int_digit % 2 == 1:
            product *= int_digit
    if product == 1:
        return 0
    else:
        return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['HumanEval/132'],"def is_nested(s):
    stack = []
    for c in s:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['HumanEval/132', 'HumanEval/56', 'HumanEval/61', '349', '737']","def is_nested(s):
    stack = []
    for c in s:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['HumanEval/132', 'HumanEval/56', 'HumanEval/61', '349', '737', 'HumanEval/6', '175', '91', '823', '30']","def is_nested(s):
    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(s)):
        if s[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i 1
    return cnt >= 2",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 16)', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['HumanEval/133'],"import math

def sum_squares(lst):
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['HumanEval/133', 'HumanEval/142', '287', '267', '683']","import math

def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,10,normal,"['HumanEval/133', 'HumanEval/142', '287', '267', '683', 'HumanEval/85', '905', '728', '340', 'HumanEval/121']","import math

def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['HumanEval/134'],"def check_if_last_char_is_a_letter(txt):
    words = txt.split()
    if not words:
        return False
    last_word = words[-1]
    return len(last_word) == 1 and (97 <= ord(last_word.lower()) <= 122)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,5,normal,"['HumanEval/134', '546', '868', '396', '967']","import re

def check_if_last_char_is_a_letter(txt):
    words = txt.split(' ')
    if len(words) == 0:
        return False
    last_word = words[-1]
    if not last_word:  # check if last word is empty
        return False
    if not re.search(r'\b\w\b', last_word):  # check if last word contains a letter
        return False
    last_char = last_word[-1]
    return last_char.isalpha() and not last_word[-2:].isspace()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,10,normal,"['HumanEval/134', '546', '868', '396', '967', '860', '526', '210', 'HumanEval/132', '913']","import re

def check_if_last_char_is_a_letter(txt):
    words = txt.split(' ')
    if len(words) == 0:
        return False
    last_word = words[-1]
    if len(last_word) == 0:
        return False
    last_char = last_word[-1]
    return re.match('^[a-zA-Z]$', last_char)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,1,normal,['HumanEval/135'],"def can_arrange(arr):
    ind = -1
    i = 1
    while i < len(arr):
        if arr[i] < arr[i-1]:
            ind = i
        i += 1
    return ind",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,5,normal,"['HumanEval/135', '229', '433', '57', 'HumanEval/120']","def can_arrange(arr):
    ind = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            ind = i
    return ind",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,10,normal,"['HumanEval/135', '229', '433', '57', 'HumanEval/120', 'HumanEval/116', '550', '915', '195', 'HumanEval/88']","def can_arrange(arr):
    ind = -1
    i = 1
    while i < len(arr):
        if arr[i] < arr[i-1]:
            ind = i
        i += 1
    return ind",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,1,normal,['HumanEval/136'],"def largest_smallest_integers(lst):
    smallest = [x for x in lst if x < 0]
    largest = [x for x in lst if x > 0]
    return (max(smallest) if smallest else None, min(largest) if largest else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,5,normal,"['HumanEval/136', '755', '457', 'HumanEval/90', 'HumanEval/163']","def largest_smallest_integers(lst):
    negative = [x for x in lst if x < 0]
    positive = [x for x in lst if x > 0]
    return (max(negative) if negative else None, min(positive) if positive else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,10,normal,"['HumanEval/136', '755', '457', 'HumanEval/90', 'HumanEval/163', '443', '418', '408', '340', '62']","def largest_smallest_integers(lst):
    smallest = [x for x in lst if x < 0]
    largest = [x for x in lst if x > 0]
    return (max(smallest) if smallest else None, min(largest) if largest else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,1,normal,['HumanEval/137'],"def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,5,normal,"['HumanEval/137', '404', '309', '47', 'HumanEval/102']","def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,10,normal,"['HumanEval/137', '404', '309', '47', 'HumanEval/102', '93', '891', '257', '53', 'HumanEval/163']","def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,1,normal,['HumanEval/138'],"def is_equal_to_sum_even(n):
    for i in range(2, n):
        for j in range(2, n - i):
            for j in range(2, n - i - j):
                for k in range(2, n - i - j - k):
                    if i + j + k + 2 * (n - i - j - k) == n:
                        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,5,normal,"['HumanEval/138', '634', '600', '271', '541']","def is_equal_to_sum_even(n):
    return n%2 == 0 and n >= 8",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,10,normal,"['HumanEval/138', '634', '600', '271', '541', '274', '962', '138', '683', '448']","def is_equal_to_sum_even(n):
    return n%2 == 0 and n >= 8",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,1,normal,['HumanEval/139'],"def special_factorial(n):
    if n <= 0:
        raise ValueError(""Input must be a positive integer"")
    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,5,normal,"['HumanEval/139', '577', '483', '905', '873']","import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,10,normal,"['HumanEval/139', '577', '483', '905', '873', '901', 'HumanEval/46', 'HumanEval/55', '122', 'HumanEval/63']","def special_factorial(n):
    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,1,normal,['HumanEval/140'],"def fix_spaces(text):
    new_text = """"
    count = 0
    for char in text:
        if char == "" "":
            count += 1
            if count > 2:
                new_text += ""-""
            else:
                new_text += ""_"" * count
        else:
            if count > 2:
                new_text += ""-""
            elif count > 0:
                new_text += ""_"" * count
            new_text += char
            count = 0
    if count > 2:
        return ""-"" * (count + 1)
    elif count > 0:
        return ""_"" * (count + 1)
    return new_text",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,5,normal,"['HumanEval/140', '631', '892', '628', '800']","import re

def fix_spaces(text):
    text = re.sub(' +', '-', text)
    return text.replace(' ', '_')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,10,normal,"['HumanEval/140', '631', '892', '628', '800', '542', '678', '693', '451', '748']","import re

def fix_spaces(text):
    text = re.sub(' +', '-', text)
    return re.sub(' ', '_', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split('.')
    if len(lst)!= 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = sum(c.isdigit() for c in lst[0])
    if t > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '737', '823', '175']","import re

def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split('.')
    if len(lst)!= 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '737', '823', '175', 'HumanEval/134', '396', '822', '967', '349']","import re

def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split('.')
    if len(lst)!= 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,1,normal,['HumanEval/142'],"def sum_squares(lst):
    result = []
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i% 3!= 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,5,normal,"['HumanEval/142', 'HumanEval/133', '287', '267', '683']","def sum_squares(lst):
    result = []
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i % 3!= 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,10,normal,"['HumanEval/142', 'HumanEval/133', '287', '267', '683', '340', '837', '420', 'HumanEval/40', '129']","def sum_squares(lst):
    result = []
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3!= 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,1,normal,['HumanEval/143'],"def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    new_lst = []
    for word in sentence.split():
        if is_prime(len(word)):
            new_lst.append(word)
    return "" "".join(new_lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,5,normal,"['HumanEval/143', '897', 'HumanEval/101', 'HumanEval/125', '305']","import sympy

def words_in_sentence(sentence):
    new_lst = []
    for word in sentence.split():
        if sympy.isprime(len(word)):
            new_lst.append(word)
    return "" "".join(new_lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,10,normal,"['HumanEval/143', '897', 'HumanEval/101', 'HumanEval/125', '305', '964', '79', '128', '862', '254']","def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    new_lst = []
    for word in sentence.split():
        if is_prime(len(word)):
            new_lst.append(word)
    return "" "".join(new_lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,1,normal,['HumanEval/144'],"from fractions import Fraction

def simplify(x, n):
    frac_x = Fraction(x)
    frac_n = Fraction(n)
    return (frac_x * frac_n).denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['HumanEval/144', 'HumanEval/76', '96', '904', '98']","from fractions import Fraction

def simplify(x, n):
    frac_x = Fraction(x)
    frac_n = Fraction(n)
    return (frac_x * frac_n).denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,10,normal,"['HumanEval/144', 'HumanEval/76', '96', '904', '98', 'HumanEval/25', '711', '623', '72', 'HumanEval/106']","from fractions import Fraction

def simplify(x, n):
    frac_x = Fraction(x)
    frac_n = Fraction(n)
    return frac_x * frac_n == int(frac_x * frac_n)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,1,normal,['HumanEval/145'],"def order_by_points(nums):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(abs(n))]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=lambda x: (digits_sum(x), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,5,normal,"['HumanEval/145', '749', '516', '915', '141']","def order_by_points(nums):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=lambda x: (digits_sum(x), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,10,normal,"['HumanEval/145', '749', '516', '915', '141', 'HumanEval/19', '649', '12', '54', '398']","def order_by_points(nums):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(abs(n))]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,1,normal,['HumanEval/146'],"def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(abs(num))  # Use abs to handle negative numbers
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,5,normal,"['HumanEval/146', '426', '41', '258', '697']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,10,normal,"['HumanEval/146', '426', '41', '258', '697', '807', '817', '883', '433', '775']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1] in odd_digits):
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,error,error,[],,0.0,cannot access local variable 'e' where it is not associated with a value
148,HumanEval/148,1,normal,['HumanEval/148'],"def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return tuple(planet_names[planet1_index + 1: planet2_index])
    else:
        return tuple(planet_names[planet2_index + 1 : planet1_index])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,5,normal,"['HumanEval/148', 'HumanEval/127', '282', 'HumanEval/63', '414']","def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1 <= planet1_index - planet2_index <= len(planet_names) - 1 - planet1_index + planet2_index:
        return (planet_names[planet2_index + 1 : planet1_index])
    else:
        return (planet_names[planet1_index + 1 : planet2_index])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,10,normal,"['HumanEval/148', 'HumanEval/127', '282', 'HumanEval/63', '414', '873', '473', 'HumanEval/154', '404', '579']","def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return tuple(planet_names[planet1_index + 1: planet2_index + 1])
    else:
        return tuple(planet_names[planet2_index + 1: planet1_index + 1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,1,normal,['HumanEval/149'],"def sorted_list_sum(lst):
    return sorted([i for i in lst if len(i) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,5,normal,"['HumanEval/149', '728', '37', 'HumanEval/85', 'HumanEval/70']","def sorted_list_sum(lst):
    return sorted([i for i in lst if len(i) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,10,normal,"['HumanEval/149', '728', '37', 'HumanEval/85', 'HumanEval/70', '782', '749', 'HumanEval/37', '108', '877']","def sorted_list_sum(lst):
    return sorted([i for i in lst if len(i) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,1,normal,['HumanEval/150'],"import math

def x_or_y(n, x, y):
    if n <= 1:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
            break
    else:
        return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['HumanEval/150', '122', 'HumanEval/31', '605', 'HumanEval/102']","import math

def x_or_y(n, x, y):
    if n <= 1:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
            break
    else:
        return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,10,normal,"['HumanEval/150', '122', 'HumanEval/31', '605', 'HumanEval/102', '260', '498', '663', '685', '256']","def x_or_y(n, x, y):
    def is_prime(num):
        if num < 2:
            return False
        for k in range(2, int(num ** 0.5) + 1):
            if num % k == 0:
                return False
        return True

    if is_prime(n):
        return x
    else:
        return y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,1,normal,['HumanEval/151'],"def double_the_difference(lst):
    return sum([i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2!= 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,5,normal,"['HumanEval/151', '320', '555', 'HumanEval/142', 'HumanEval/133']","def double_the_difference(lst):
    return sum([i**2 for i in lst if i > 0 and i % 2!= 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,10,normal,"['HumanEval/151', '320', '555', 'HumanEval/142', 'HumanEval/133', '594', '881', '875', 'HumanEval/113', '177']","def double_the_difference(lst):
    return sum(i**2 for i in lst if i > 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['HumanEval/152'],"def compare(game, guess):
    return [abs(x - y) for x, y in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['HumanEval/152', '433', '695', '540', '636']","def compare(game, guess):
    return [abs(x-y) for x,y in zip(game,guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['HumanEval/152', '433', '695', '540', '636', '650', '579', '890', '53', 'HumanEval/137']","def compare(game, guess):
    return [abs(x-y) for x,y in zip(game,guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/153'],"def Strongest_Extension(class_name, extensions):
    strong = extensions[0]
    my_val = len([x for x in strong if x.isalpha() and x.isupper()]) - len([x for x in strong if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val
    ans = class_name + ""."" + strong
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,5,normal,"['HumanEval/153', 'HumanEval/12', '548', 'HumanEval/14', '806']","def Strongest_Extension(class_name, extensions):
    strongest = extensions[0]
    strongest_strength = len([x for x in strongest if x.isalpha() and x.isupper()]) - len([x for x in strongest if x.isalpha() and x.islower()])
    for s in extensions:
        strength = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()]
        if strength > strongest_strength:
            strongest = s
            strongest_strength = strength
    return class_name + ""."" + strongest",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 5)"", 'completion_id': 0})]})"
153,HumanEval/153,10,normal,"['HumanEval/153', 'HumanEval/12', '548', 'HumanEval/14', '806', '220', '937', '393', '207', 'HumanEval/105']","def Strongest_Extension(class_name, extensions):
    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val
    ans = class_name + ""."" + strong
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,1,normal,['HumanEval/154'],"def cycpattern_check(a, b):
    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        if a[i:i+l] == b:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,5,normal,"['HumanEval/154', '871', '532', '823', '91']","def cycpattern_check(a, b):
    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,10,normal,"['HumanEval/154', '871', '532', '823', '91', '874', '643', '186', 'HumanEval/132', '964']","def cycpattern_check(a, b):
    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
        if a[i:i+l] == b:
            return True
    return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'for' statement on line 5 (<string>, line 6)"", 'completion_id': 0})]})"
155,HumanEval/155,1,normal,['HumanEval/155'],"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['HumanEval/155', '387', '109', 'HumanEval/131', '904']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['HumanEval/155', '387', '109', 'HumanEval/131', '904', '258', '78', '41', '844', '235']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['HumanEval/156'],"def int_to_mini_roman(number):
    num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    sym = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    i = 0
    res = ''
    while number:
        div = number // num[i]
        number %= num[i]
        res += sym[i] * div
        i += 1
    return res.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['HumanEval/156', '958', '961', '116', '252']","def int_to_mini_roman(number):
    num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    sym = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    i = 12
    res = ''
    while number:
        div = number // num[i]
        number %= num[i]
        while div:
            res += sym[i]
            div -= 1
        i -= 1
    return res.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['HumanEval/156', '958', '961', '116', '252', 'HumanEval/78', '100', '583', '467', '764']","def int_to_mini_roman(number):
    num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    sym = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    i = 12
    res = ''
    while number:
        div = number // num[i]
        number %= num[i]
        while div:
            res += sym[i]
            div -= 1
        i -= 1
    return res.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['HumanEval/157'],"import math

def right_angle_triangle(a, b, c):
    return math.isclose(a**2 + b**2, c**2) or math.isclose(a**2 + c**2, b**2) or math.isclose(b**2 + c**2, a**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,5,normal,"['HumanEval/157', '826', '677', '850', '176']","import math

def right_angle_triangle(a, b, c):
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,10,normal,"['HumanEval/157', '826', '677', '850', '176', '449', 'HumanEval/71', '198', '356', '153']","import math

def right_angle_triangle(a, b, c):
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,1,normal,['HumanEval/158'],"def find_max(words):
    return sorted(words, key=lambda x: (-len(set(x)), x))[0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['HumanEval/158', 'HumanEval/12', '480', '418', '937']","from typing import List

def find_max(words: List[str]) -> str:
    return sorted(words, key=lambda x: (-len(set(x)), x))[0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['HumanEval/158', 'HumanEval/12', '480', '418', '937', '357', '200', '315', '517', '832']","from typing import List

def find_max(words: List[str]) -> str:
    return sorted(words, key = lambda x: (-len(set(x)), x))[0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['HumanEval/159'],"def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['HumanEval/159', '907', '211', '169', '123']","def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['HumanEval/159', '907', '211', '169', '123', '31', 'HumanEval/102', '442', '955', '372']","def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['HumanEval/160'],"def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,5,normal,"['HumanEval/160', '218', '445', 'HumanEval/3', 'HumanEval/163']","def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,10,normal,"['HumanEval/160', '218', '445', 'HumanEval/3', 'HumanEval/163', 'HumanEval/32', '127', 'HumanEval/144', 'HumanEval/97', 'HumanEval/13']","def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,1,normal,['HumanEval/161'],"def solve(s):
    new_str = list(s)
    for i in range(len(s)):
        if new_str[i].isalpha():
            new_str[i] = new_str[i].swapcase()
        elif not new_str[i].isalnum():
            new_str[i] = new_str[i]
    s = """".join(new_str)
    if not any(c.isalpha() for c in s):
        return s[::-1]
    return s",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,5,normal,"['HumanEval/161', 'HumanEval/27', '557', '182', '39']","def solve(s):
    new_str = list(s)
    for i in range(len(s)):
        if s[i].isalpha():
            new_str[i] = s[i].swapcase()
    s = """".join(new_str)
    if not any(c.isalpha() for c in s):
        return s[::-1]
    return s",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,10,normal,"['HumanEval/161', 'HumanEval/27', '557', '182', '39', 'HumanEval/112', '131', 'HumanEval/89', 'HumanEval/84', '364']","def solve(s):
    new_str = list(s)
    flg = 0
    for i in range(len(s)):
        if s[i].isalpha():
            new_str[i] = s[i].swapcase()
            flg = 1
    if flg == 0:
        return ''.join(new_str[::-1])
    return ''.join(new_str)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,5,normal,"['HumanEval/162', '146', '330', 'HumanEval/89', '708']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,10,normal,"['HumanEval/162', '146', '330', 'HumanEval/89', '708', '39', '217', '230', '933', '813']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,1,normal,['HumanEval/163'],"def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,5,normal,"['HumanEval/163', '47', '345', '257', '503']","def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))
    return [i for i in range(lower, upper+1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,10,normal,"['HumanEval/163', '47', '345', '257', '503', '690', 'HumanEval/13', '221', 'HumanEval/131', '745']","def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))
    return [i for i in range(lower, upper+1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
