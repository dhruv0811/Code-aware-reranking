query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/127', 'HumanEval/21', '92']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/127', 'HumanEval/21', '92', '431', '670', '680', 'HumanEval/5', 'HumanEval/52']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/1'],"from typing import List

def separate_parentheses(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

        if current_depth == 0:
            result.append(''.join(current_string))
            current_string.clear()

    return result",0.0,entry point not found
1,HumanEval/1,5,normal,"['HumanEval/1', 'HumanEval/6', 'HumanEval/38', 'HumanEval/132', 'HumanEval/28']","def separate_parentheses(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",0.0,entry point not found
1,HumanEval/1,10,normal,"['HumanEval/1', 'HumanEval/6', 'HumanEval/38', 'HumanEval/132', 'HumanEval/28', '374', 'HumanEval/7', '778', 'HumanEval/29', '157']","from typing import List

def parse_paren_group(s: str) -> str:
    stack = []
    result = []
    for c in s:
        if c == '(':
            stack.append(c)
        elif c == ')':
            stack.pop()
            if not stack:
                result.append(''.join(s[s.index('('):s.index(')')+1]))
    return result",0.0,entry point not found
2,HumanEval/2,1,normal,['HumanEval/2'],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/2', 'HumanEval/99', '194', '518', '100']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/2', 'HumanEval/99', '194', '518', '100', '931', '830', '98', '519', '246']","def truncate_number(number: float) -> float:
    return number % 1.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', '677', 'HumanEval/134', '605', '92']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', '677', 'HumanEval/134', '605', '92', 'HumanEval/94', '481', '541', 'HumanEval/31', '138']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['717'],"import math

def mean_absolute_deviation(numbers):
    n = len(numbers)
    if n <= 1:
        return 0.0
    mean = sum(numbers) / n
    variance = sum((x - mean) ** 2 for x in numbers) / n
    return math.sqrt(variance)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['717', 'HumanEval/4', '875', '63', '432']","from typing import List
import math

def mean_absolute_deviation(numbers: List[float]) -> float:
    n = len(numbers)
    if n <= 1:
        return 0.0
    mean = sum(numbers) / n
    return sum(math.fabs(x - mean) for x in numbers) / n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['717', 'HumanEval/4', '875', '63', '432', 'HumanEval/20', 'HumanEval/0', '599', 'HumanEval/21', '588']","from typing import List
import math

def mean_absolute_deviation(numbers: List[float]) -> float:
    if len(numbers) <= 1:
        return 0.0
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List


def inters(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result",0.0,entry point not found
5,HumanEval/5,5,normal,"['HumanEval/5', 'HumanEval/20', 'HumanEval/0', 'HumanEval/25', 'HumanEval/32']","from typing import List

def intersperse(delimiter: int, numbers: List[int]) -> List[int]:
    result = []
    for n in numbers[:-1]:
        result.append(n)
        result.append(delimiter)
    result.append(numbers[-1])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', 'HumanEval/20', 'HumanEval/0', 'HumanEval/25', 'HumanEval/32', 'HumanEval/9', 'HumanEval/21', 'HumanEval/8', 'HumanEval/4', 'HumanEval/1']","from typing import List

def intersperse(delimiter: int, numbers: List[int]) -> List[int]:
    if not numbers:
        return []

    result = []
    for n in numbers[:-1]:
        result.append(n)
        result.append(delimiter)

    result.append(numbers[-1])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_paren_group(s: str) -> int:
    depth = 0
    max_depth = 0
    for c in s:
        if c == '(':
            depth += 1
            max_depth = max(depth, max_depth)
        else:
            depth -= 1

    return max_depth

def parse_paren_groups(paren_string: str) -> List[int]:
    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",0.0,entry point not found
6,HumanEval/6,5,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/56', 'HumanEval/61', 'HumanEval/38']","from typing import List

def parse_paren_group(s: str) -> int:
    depth = 0
    max_depth = 0
    for c in s:
        if c == '(':
            depth += 1
            max_depth = max(depth, max_depth)
        else:
            depth -= 1

    return max_depth

def parse_paren_string(paren_string: str) -> List[int]:
    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",0.0,entry point not found
6,HumanEval/6,10,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/56', 'HumanEval/61', 'HumanEval/38', 'HumanEval/132', 'HumanEval/7', 'HumanEval/28', '247', 'HumanEval/19']","def func_0(paren_string: str) -> List[int]:
    def func_1(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth))
            else:
                depth -= 1

        return max_depth

    return [func_1(x) for x in paren_string.split(' ') if x]",0.0,entry point not found
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/1', 'HumanEval/28', 'HumanEval/14']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/1', 'HumanEval/28', 'HumanEval/14', 'HumanEval/12', 'HumanEval/6', '823', '861', '374']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', '65', '758', '779', '142']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    product_value = 1

    for n in numbers:
        sum_value += n
        product_value *= n
    return sum_value, product_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', '65', '758', '779', '142', '212', '170', 'HumanEval/60', '870', '133']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List

def running_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result",0.0,entry point not found
9,HumanEval/9,5,normal,"['HumanEval/9', '805', '90', '443', 'HumanEval/21']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', '805', '90', '443', 'HumanEval/21', '418', '290', '517', '294', '366']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def is_palindrome(string: str) -> bool:
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', 'HumanEval/107', '823', '557', 'HumanEval/82']","def is_palindrome(string):
    return string == string[::-1])

def make_palindrome(string):
    if not string:
        return ''
    beginning_of_suffix = 0
    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1
    return string + string[:beginning_of_suffix][::-1]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 2)"", 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', 'HumanEval/107', '823', '557', 'HumanEval/82', '523', '131', '964', '913', '210']","def is_palindrome(string):
    return string == string[::-1]

def find_longest_palindrome(string):
    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]",0.0,entry point not found
11,HumanEval/11,1,normal,['HumanEval/11'],"from typing import List

def string_xor(a: List[str], b: List[str])

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected ':' (<string>, line 3)"", 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', '119', '456', 'HumanEval/7', '690']","from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', '119', '456', 'HumanEval/7', '690', '589', '699', '595', 'HumanEval/28', '909']","from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', '232', 'HumanEval/28', 'HumanEval/7', 'HumanEval/1']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', '232', 'HumanEval/28', 'HumanEval/7', 'HumanEval/1', '393', 'HumanEval/6', 'HumanEval/14', 'HumanEval/29', '90']","from typing import List

def longest(strings: List[str]) -> str:
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['218'],"import math

def greatest_common_divisor(a, b):
    if b == 0:
        return a
    else:
        return greatest_common_divisor(b, a % b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['218', 'HumanEval/13', '45', '687', '520']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['218', 'HumanEval/13', '45', '687', '520', '47', '501', '151', '356', '589']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/29'],"from typing import List

def all_prefixes(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/29', 'HumanEval/14', 'HumanEval/28', 'HumanEval/1', 'HumanEval/7']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/29', 'HumanEval/14', 'HumanEval/28', 'HumanEval/1', 'HumanEval/7', 'HumanEval/12', '374', 'HumanEval/10', 'HumanEval/6', '181']","def longest_common_prefix(strs):
    if not strs:
        return """"

    shortest_str = min(strs, key=len)

    for i, char in enumerate(shortest_str):
        for other in strs:
            if other[i]!= char:
                return shortest_str[:i]

    return shortest_str",0.0,entry point not found
15,HumanEval/15,1,normal,['HumanEval/15'],"def string(n: int) -> str:
    return''.join(map(str, range(n + 1))",0.0,entry point not found
15,HumanEval/15,5,normal,"['HumanEval/15', 'HumanEval/36', '552', '128', '220']","def string_0(n: int) -> str:
    return''.join(str(x) for x in range(n + 1))",0.0,entry point not found
15,HumanEval/15,10,normal,"['HumanEval/15', 'HumanEval/36', '552', '128', '220', '628', '125', '49', '154', '84']","def func_0(n: int) -> str:
    return''.join([str(x) for x in range(n + 1)])",0.0,entry point not found
16,HumanEval/16,1,normal,['666'],"from collections import Counter

def count_distinct_characters(string):
    return len(Counter(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['666', '165', '813', '684', '182']","from collections import Counter

def count_distinct_characters(string):
    return len(Counter(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['666', '165', '813', '684', '182', '523', '557', 'HumanEval/23', 'HumanEval/27', 'HumanEval/18']","def count_distinct_chars(string: str) -> int:
    return len(set(string))",0.0,entry point not found
17,HumanEval/17,1,normal,['HumanEval/17'],"def music_string(music_string: str) -> list[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split()]",0.0,entry point not found
17,HumanEval/17,5,normal,"['HumanEval/17', 'HumanEval/18', 'HumanEval/1', 'HumanEval/14', 'HumanEval/6']","from typing import List

def music_string(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]",0.0,entry point not found
17,HumanEval/17,10,normal,"['HumanEval/17', 'HumanEval/18', 'HumanEval/1', 'HumanEval/14', 'HumanEval/6', '667', '819', '390', 'HumanEval/19', 'HumanEval/5']","def music_string(music_string: str) -> list[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]",0.0,entry point not found
18,HumanEval/18,1,normal,['HumanEval/18'],"def how_many_times(string: str, substring: str) -> int:
    return string.count(substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['HumanEval/18', '666', '165', '684', '813']","def how_many_times(string: str, substring: str) -> int:
    return string.count(substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['HumanEval/18', '666', '165', '684', '813', '823', '523', '667', 'HumanEval/23', 'HumanEval/16']","def how_many_times(string, substring):
    return string.count(substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import List

def sort_numbers(numbers: str) -> str:
    """"""Sorts numbers in a given string and returns the sorted string.""""""
    
    # Split the input string into a list of numbers
    num_list: List[str] = numbers.split()
    
    # Sort the list of numbers
    num_list.sort(key=lambda x: int(x))
    
    # Join the sorted list back into a string
    sorted_str =''.join(num_list)
    
    return sorted_str",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', '749', 'HumanEval/145', 'HumanEval/21', 'HumanEval/5']","from typing import List

def sort_numbers(numbers: str) -> str:
    numbers = [int(x) for x in numbers.split(' ')]
    numbers.sort()
    return''.join(map(str, numbers))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', '749', 'HumanEval/145', 'HumanEval/21', 'HumanEval/5', 'HumanEval/105', '104', '896', '915', '670']","from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted([x for x in numbers.split(' ') if x in value_map], key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def number(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    closest_pair = (numbers[0], numbers[1])
    min_distance = abs(numbers[0] - numbers[1])

    for idx in range(1, len(numbers) - 1):
        distance = abs(numbers[idx] - numbers[idx + 1])
        if distance < min_distance:
            min_distance = distance
            closest_pair = (numbers[idx], numbers[idx + 1])

    return closest_pair",0.0,entry point not found
20,HumanEval/20,5,normal,"['HumanEval/20', 'HumanEval/0', 'HumanEval/21', 'HumanEval/5', 'HumanEval/9']","from typing import List, Tuple

def func_0(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    closest_pair = (numbers[0], numbers[1])
    min_distance = abs(numbers[0] - numbers[1])

    for idx in range(1, len(numbers) - 1):
        distance = abs(numbers[idx] - numbers[idx + 1])
        if distance < min_distance:
            min_distance = distance
            closest_pair = (numbers[idx], numbers[idx + 1])

    return closest_pair",0.0,entry point not found
20,HumanEval/20,10,normal,"['HumanEval/20', 'HumanEval/0', 'HumanEval/21', 'HumanEval/5', 'HumanEval/9', '755', '108', '308', '943', '251']","from typing import List, Tuple

def func_0(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = None
    min_distance = float('inf')

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx!= idx2:
                distance = abs(elem - elem2)
                if distance < min_distance:
                    min_distance = distance
                    closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair",0.0,entry point not found
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",0.0,entry point not found
21,HumanEval/21,5,normal,"['HumanEval/21', '409', 'HumanEval/4', 'HumanEval/20', 'HumanEval/5']","from typing import List

def rescale_numbers(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",0.0,entry point not found
21,HumanEval/21,10,normal,"['HumanEval/21', '409', 'HumanEval/4', 'HumanEval/20', 'HumanEval/5', 'HumanEval/9', '366', '947', '120', '517']","from typing import List

def rescale(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",0.0,entry point not found
22,HumanEval/22,1,normal,['HumanEval/22'],"def filter_cyclic(values: list) -> list:
    return [x for x in values if isinstance(x, int)]",0.0,entry point not found
22,HumanEval/22,5,normal,"['HumanEval/22', 'HumanEval/5', 'HumanEval/26', 'HumanEval/9', 'HumanEval/25']","from typing import List, Any

def filter_cyclic(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",0.0,entry point not found
22,HumanEval/22,10,normal,"['HumanEval/22', 'HumanEval/5', 'HumanEval/26', 'HumanEval/9', 'HumanEval/25', 'HumanEval/19', 'HumanEval/21', '817', '883', 'HumanEval/8']","from typing import List, Any

def filter_values(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",0.0,entry point not found
23,HumanEval/23,1,normal,['HumanEval/23'],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['HumanEval/23', '238', '828', 'HumanEval/16', 'HumanEval/18']","def strlen(s: str) -> int:
    return len(s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['HumanEval/23', '238', '828', 'HumanEval/16', 'HumanEval/18', '628', '667', '118', '165', '666']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['HumanEval/59'],"def largest_divisor(n: int) -> int:
    def is_prime(k: int) -> bool:
        if k < 2:
            return False
        for i in range(2, int(k ** 0.5) + 1):
            if k % i == 0:
                return False
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['HumanEval/59', '232', '392', '485', '735']","def largest_divisor(n):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, int(k ** 0.5) + 1):
            if k % i == 0:
                return False
        return True

    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['HumanEval/59', '232', '392', '485', '735', '32', 'HumanEval/123', '194', '416', 'HumanEval/76']","import heapq
import math

def func_0(n):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True

    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest

def func_0(list1, n):
    return heapq.nlargest(n, list1)

def func_0 (n):
    res = [0, 1]
    i = 2
    while i < n + 1:
        res.append(max(i, res[int(i / 2)] + res[int(i / 3)] + res[int(i / 4)] + res[int(i / 5)]))
        i = i + 1
    return res[n]

def func_0(n):
    divisor = 1
    while n / divisor >= 10:
        divisor *= 10
    while n > 0:
        leading = n / divisor
        trailing = n % 10
        if leading!= trailing:
            return False
        n = (n % divisor) // 10
        divisor = divisor // 100
    return True

def func_0(n):
    A = [1, 2, 3, 4, 5]
    A.sort()
    for i in range(n - 1, -1, -1):
        if is_prime(A[i]):
            return A[i]
    return -1

def func_0(n):
    n |= n >> 1
    n |= n >> 2
    n |= n >> 4
    n |= n >> 8
    n |= n >> 16
    return (n >> 1) ^ (n >> 2) ^ (n >> 4) ^ (n >> 8) ^ (n >> 16)

def func_0(n):
    maxPrime = -1
    while n % 2 == 0:
        maxPrime = 2
        n = n // 2
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            maxPrime = i
            n = n",0.0,entry point not found
25,HumanEval/25,1,normal,['HumanEval/96'],"def find_prime_factors(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    factors = []
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            factors.append(i)
    return factors",0.0,entry point not found
25,HumanEval/25,5,normal,"['HumanEval/96', '901', '122', 'HumanEval/39', '843']","def prime_factors(n):
    i = 2
    factors = []
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",0.0,entry point not found
25,HumanEval/25,10,normal,"['HumanEval/96', '901', '122', 'HumanEval/39', '843', '685', '32', '260', '905', 'HumanEval/59']","def func_0(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(i**0.5) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",0.0,entry point not found
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List

def func_0(numbers: List[int]) -> List[int]:
    c = {}
    for n in numbers:
        if n not in c or c[n] == 0:
            c[n] = 1
        else:
            c[n] += 1
    return [n for n in numbers if c[n] == 1]",0.0,entry point not found
26,HumanEval/26,5,normal,"['HumanEval/26', '755', '22', '852', 'HumanEval/20']","from typing import List

def func_0(numbers: List[int]) -> List[int]:
    return [n for n in set(numbers) if numbers.count(n) == 1]",0.0,entry point not found
26,HumanEval/26,10,normal,"['HumanEval/26', '755', '22', '852', 'HumanEval/20', 'HumanEval/5', '353', '659', '507', '603']","from typing import List

def func_0(numbers: List[int]) -> List[int]:
    return [n for n in set(numbers) if numbers.count(n) == 1]",0.0,entry point not found
27,HumanEval/27,1,normal,['HumanEval/27'],"def func_0(string: str) -> str:
    return string.swapcase()",0.0,entry point not found
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '182', '364', 'HumanEval/10']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '182', '364', 'HumanEval/10', '477', 'HumanEval/132', '624', '386', '523']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def concatenate_strings(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', 'HumanEval/14', 'HumanEval/29', 'HumanEval/1', 'HumanEval/7']","from typing import List

def func_0(strings: List[str]) -> str:
    return ''.join(strings)",0.0,entry point not found
28,HumanEval/28,10,normal,"['HumanEval/28', 'HumanEval/14', 'HumanEval/29', 'HumanEval/1', 'HumanEval/7', '390', '570', 'HumanEval/11', '374', 'HumanEval/38']","from typing import List

def func_0(strings: List[str]) -> str:
    return ''.join(strings)

def func_0(string: str) -> List[str]:
    result = []
    for i in range(len(string)):
        result.append(string[:i+1])
    return result

def func_0(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]

def func_0(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0
    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)
            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()
    return result

def func_0(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]

def func_0(list, string):
    return [string.format(i) for i in list]

def func_0(list1, charlist):
    new_list = []
    for line in list1:
        new_words =''.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])
    new_list.append(new_words)
    return new_list

def func_0(a: str, b: str) -> str:
    def func_1(i, j):
        if i == j:
            return '0'
        else:
            return '1'
    return ''.join(func_1(x, y) for x, y in zip(a, b))

def func_0(str):
    if len(str) == 0:
        return ['']
    prev_list = func_0(str[1:len(str)])
    next_list = []
    for i in range(0,len(prev_list)):
        for j in range(0,len(str)):
            new_str = prev_list[i][0:j]+str[0:j]+prev_list[i][j:len(str)]
            if new_str not in next_list:
                next_list.append(new_str)
    return next_list

def func_0(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) +",0.0,entry point not found
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_cyclic_strings(strings: List[str], prefix: str) -> List[str]:
    """"""
    Filter a list of strings to include only those that start with a given prefix.

    Args:
    strings (List[str]): The list of strings to be filtered.
    prefix (str): The prefix to filter the strings by.

    Returns:
    List[str]: A list of strings that start with the given prefix.
    """"""
    return [x for x in strings if x.startswith(prefix)]",0.0,entry point not found
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/1', 'HumanEval/28']","from typing import List

def func_0(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",0.0,entry point not found
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/1', 'HumanEval/28', '181', 'HumanEval/10', '374', '823', 'HumanEval/12']","from typing import List

def func_0(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",0.0,entry point not found
30,HumanEval/30,1,normal,['HumanEval/30'],"def find_positive_numbers(lst):
    return [num for num in lst if num > 0]",0.0,entry point not found
30,HumanEval/30,5,normal,"['HumanEval/30', '610', 'HumanEval/37', 'HumanEval/34', 'HumanEval/42']","def func_0(l: list):
    return [e for e in l if e > 0]",0.0,entry point not found
30,HumanEval/30,10,normal,"['HumanEval/30', '610', 'HumanEval/37', 'HumanEval/34', 'HumanEval/42', '472', 'HumanEval/33', 'HumanEval/40', 'HumanEval/35', 'HumanEval/57']","def func_0(l: list):
    return [e for e in l if e > 0]",0.0,entry point not found
31,HumanEval/31,1,normal,['HumanEval/96'],"import numpy as np

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def is_prime_image(image):
    image = np.array(image)
    image = image.flatten()
    unique_pixels = np.unique(image)
    return [is_prime(pixel) for pixel in unique_pixels]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/96', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39', '685']","def func_0(n):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, int(k ** 0.5) + 1):
        if k % i == 0:
            return False
        return True

    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'for' statement on line 5 (<string>, line 6)"", 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def func_0(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def func_1(xs: list):
    begin, end = -1., 1.
    while func_0(xs, begin) * func_0(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10):
        center = (begin + end) / 2.0
        if func_0(xs, center) * func_0(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin

def func_2(xs: list):
    return func_1(func_0(xs))

def func_3(xs: list):
    return func_2(xs)

def func_4(xs: list):
    return func_3(func_2(xs))

def func_5(xs: list):
    return func_4(xs)

def func_6(xs: list):
    return func_5(xs)

def func_7(xs: list):
    return func_6(xs)

def func_8(xs: list):
    return func_7(xs)

def func_9(xs: list):
    return func_8(xs)

def func_10(xs: list):
    return func_9(xs)

def func_11(xs: list):
    return func_10(xs)

def func_12(xs: list):
    return func_11(xs)

def func_13(xs: list):
    return func_12(xs)

def func_14(xs: list):
    return func_13(xs)

def func_15(xs: list):
    return func_14(xs)

def func_16(xs: list):
    return func_15(xs)

def func_17(xs: list):
    return func_16(xs)

def func_18(xs: list):
    return func_17(xs)

def func_19(xs: list):
    return func_18(xs)

def func_20(xs: list):
    return func_19(xs)

def func_21(xs: list):
    return func_20(xs)

def func_22(xs: list):
    return func_21(xs)

def func_23(xs: list):
    return func_22(xs)

def func_24(xs: list):
    return func_23(xs)

def func_",0.0,entry point not found
32,HumanEval/32,5,normal,"['HumanEval/32', '847', 'HumanEval/62', '406', '20']","import math

def func_0(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def func_1(xs: list):
    begin, end = -1., 1.
    while func_0(xs, begin) * func_0(xs, end) > 0:
        begin *= 2.0
    end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if func_0(xs, center) * func_0(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin

def func_2(xs: list):
    return xs[:]

def func_3(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]

def func_4(x):
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
    return (""Odd Parity""); 
    return (""Even Parity""); 

def func_5(x):
    if (x % 2 == 0): 
        return False
    if (x == 1): 
        return True
    x = x + 1
    p = 0
    while (x % 2 == 0): 
        x = x / 2
        p = p + 1
        if (p == x): 
            return True
    return False

def func_5(xs: list):
    return [x for i, x in enumerate(xs) if i % 2 == 0]

def func_6(xs: list):
    return [x for i, x in enumerate(xs) if i % 2 == 0]

def func_7(xs: list):
    return [x for i, x in enumerate(xs) if i % 2 == 0""]

def func_8(xs: list):
    return [x for i, x in enumerate(xs) if i % 2 == 0]

def func_9(xs: list):
    return [x for i, x in",0.0,entry point not found
32,HumanEval/32,10,normal,"['HumanEval/32', '847', 'HumanEval/62', '406', '20', '801', '587', '148', '855', '768']","import math

def func_0(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def func_1(xs: list):
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def func_0(xs: list):
    return xs[:]

def func_0(x):
    parity = 0
    while (x!= 0):
        x = x & (x - 1)
        parity += 1
    if (parity % 2 == 0):
        return True
    else:
        return False

def func_0(x):
    if (x % 2 == 0):
        return False
    if (x == 1):
        return True
    x = x + 1
    p = 0
    while (x % 2 == 0):
        x = x / 2
        p = p + 1
        if (p == x):
            return True
    return False

def func_0(x, y, z):
    result = set([x, y, z])
    return len(result) == 3

def func_0(x):
    ans = 0
    while x:
        ans += x % 10
        x //= 10
    return ans

def func_1(x):
    ans = 0
    while (ans * 10 + 9) <= x:
        ans = ans * 10 + 9
    return ans

def func_2(N):
    A = func_1(N)
    return func_0(N - A) + func_0(A)

def func_0(x):
    parity = 0
    while (x!= 0):
        x = x & (x - 1)
        parity += 1",0.0,entry point not found
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    return [x if i % 3!= 0 else sorted([x for x in l if i % 3 == 0])[j] for i, x in enumerate(l) for j in range(len([x for x in l if i % 3 == 0]))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/34', '108', '472', '889']","def sort_third(l: list):
    return [x if i % 3!= 0 else sorted([x])[0] for i, x in enumerate(l)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/34', '108', '472', '889', 'HumanEval/47', 'HumanEval/57', 'HumanEval/87', 'HumanEval/37', '672']","def sort_third(l: list):
    return [x if i % 3!= 0 else sorted([x])[0] for i, x in enumerate(l)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(l: list):
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', 'HumanEval/33', '472', 'HumanEval/57', 'HumanEval/47']","def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', 'HumanEval/33', '472', 'HumanEval/57', 'HumanEval/47', '889', 'HumanEval/37', 'HumanEval/42', 'HumanEval/30', '569']","def unique(l: list):
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['418'],"def max_element(lst):
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['418', '517', '90', '443', '613']","def max_element(lst):
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['418', '517', '90', '443', '613', '357', '366', '290', 'HumanEval/42', '120']","def max_element(lst):
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['641'],"def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['641', '781', 'HumanEval/146', '289', '211']","def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['641', '781', 'HumanEval/146', '289', '211', 'HumanEval/131', 'HumanEval/55', 'HumanEval/36', '479', '735']","import math

def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/37'],"def sort_even(l: list):
    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens):
        ans.append(evens[-1])
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/37', 'HumanEval/34', 'HumanEval/33', '889', '472']","def sort_even(l: list):
    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/37', 'HumanEval/34', 'HumanEval/33', '889', '472', 'HumanEval/47', '594', '784', '38', '881']","def sort_even(l: list):
    evens = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    odds = [l[i] for i in range(len(l)) if i % 2!= 0]
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', 'HumanEval/89', 'HumanEval/50', '321', '386']","def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,10,normal,"['HumanEval/38', 'HumanEval/89', 'HumanEval/50', '321', '386', '39', '668', 'HumanEval/86', '604', 'HumanEval/64']","def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['HumanEval/39'],"import math

def is_prime(p):
    if p < 2:
        return False
    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
        if p % k == 0:
            return False
    return True

def prime_fib(n):
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['HumanEval/39', 'HumanEval/96', 'HumanEval/55', '873', '122']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_fib(n):
    fib = [0, 1]
    while True:
        fib.append(fib[-1] + fib[-2])
        if is_prime(fib[-1]):
            n -= 1
        if n == 0:
            return fib[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['HumanEval/39', 'HumanEval/96', 'HumanEval/55', '873', '122', '685', 'HumanEval/63', 'HumanEval/59', '32', '260']","import math

def is_prime(p):
    if p < 2:
        return False
    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
        if p % k == 0:
            return False
    return True

def prime_fib(n):
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            if n == 1:
                return f[-1]
            n -= 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['HumanEval/40'],"def func_0(l: list):
    return any(len(set([x for x in l if x == 0])
    return any(x == 0 for x in l) or len(set(l)) < 3",0.0,entry point not found
40,HumanEval/40,5,normal,"['HumanEval/40', '121', '142', '340', '129']","def func_0(l: list):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",0.0,entry point not found
40,HumanEval/40,10,normal,"['HumanEval/40', '121', '142', '340', '129', '916', '65', 'HumanEval/142', '481', '212']","def func_0(l):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False",0.0,entry point not found
41,HumanEval/41,1,normal,['187'],"def longest_common_subsequence(X, Y, m, n):
    if m == 0 or n == 0:
        return 0'
    elif X[m-1] == Y[n-1]:
        return 1 + longest_common_subsequence(X, Y, m-1, n-1)
    else:
        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))

def model(n):
    X = [1, 2, 3, 4, 5]
    Y = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,",0.0,entry point not found
41,HumanEval/41,5,normal,"['187', '431', '232', '849', '663']","def longest_common_subsequence(X, Y, m, n):
    if m == 0 or n == 0:
        return 0
    elif X[m-1] == Y[n-1]:
        return 1 + longest_common_subsequence(X, Y, m-1, n-1)
    else:
        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))

def count_collisions(n):
    X = [i for i in range(1, n+1)]
    Y = [i for i in range(n, 0, -1)]
    return longest_common_subsequence(X, Y, n, n)

print(count_collisions(5))",0.0,entry point not found
41,HumanEval/41,10,normal,"['187', '431', '232', '849', '663', '414', '763', '540', '890', '953']","def longest_common_subsequence(X, Y, m, n):
    L = [[None]*(n+1) for i in range(m+1)]
    for i in range(m+1):
        for j in range(n+1):
            if i == 0 or j == 0 :
                L[i][j] = 0
            elif X[i-1] == Y[j-1]:
                L[i][j] = L[i-1][j-1] + 1
            else:
                L[i][j] = max(L[i-1][j], L[i][j-1])
    return L[m][n]

def func_0(n):
    X = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    Y = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    return longest_common_subsequence(X, Y, len(X), len(Y))",0.0,entry point not found
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', '610', '255', 'HumanEval/30', '262']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', '610', '255', 'HumanEval/30', '262', 'HumanEval/33', '472', 'HumanEval/37', 'HumanEval/34', '462']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['HumanEval/40'],"def pairs_sum_to_zero(lst):
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] + lst[j] == 0:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['HumanEval/40', '916', 'HumanEval/85', '415', '129']","def pairs_sum_to_zero(lst):
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] + lst[j] == 0:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['HumanEval/40', '916', 'HumanEval/85', '415', '129', '324', 'HumanEval/43', '142', '782', 'HumanEval/94']","def pairs_sum_to_zero(lst):
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if lst[i] + lst[j] == 0:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['HumanEval/44'],"def convert_base(n, base):
    """"""
    Convert a number to a specified base.

    Args:
        n (int): The number to convert.
        base (int): The base to convert to.

    Returns:
        str: The converted number as a string.
    """"""
    convertString = ""0123456789ABCDEF""
    result = """"

    while n > 0:
        result = convertString[n % base] + result
        n = n // base

    return result",0.0,entry point not found
44,HumanEval/44,5,normal,"['HumanEval/44', '194', 'HumanEval/76', '148', '909']","def func_0(n, base):
    ret = """"
    while n > 0:
        ret = str(n % base) + ret
        n //= base
    return ret",0.0,entry point not found
44,HumanEval/44,10,normal,"['HumanEval/44', '194', 'HumanEval/76', '148', '909', '724', '539', '518', '848', 'HumanEval/144']","def func_0(x: int, base: int):
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",0.0,entry point not found
45,HumanEval/45,1,normal,['742'],"import math

def statistics(side):
    area = (math.sqrt(3) / 4) * (side ** 2)
    return area",0.0,entry point not found
45,HumanEval/45,5,normal,"['742', '52', '848', '488', '814']","import math

def func_0(base, height):
    area = 0.5 * base * height
    return area",0.0,entry point not found
45,HumanEval/45,10,normal,"['742', '52', '848', '488', '814', '198', '163', '458', 'HumanEval/71', '574']","import math

def func_0(side):
  area = math.sqrt(3)*(side**2)
  return area

def func_0(b,h):
  area=b*h
  return area

def func_0(base1,base2,height):
  area = 0.5 * (base1 + base2) * height
  return area

def func_0(a):
  area=(math.sqrt(5*(a**2+2*math.sqrt(5)))*pow(a,2))/4.0
  return area

def func_0(p,q):
  area=(p*q)/2
  return area

def func_0(a,b): 
    if (a < 0 or b < 0): 
        return -1 
    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  
    return area 

def func_0(s,l):
  area = s * (l ** 2) / (4 * math.pi);  
  return area

def func_0(l,b):
  area = l*b
  return area

def func_0(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area

def func_0(r,h):
  area=(2*math.pi*r*(r+h))
  return area",0.0,entry point not found
46,HumanEval/46,1,normal,['873'],"import heapq

def fib(n):
    if n <= 2:
        return 1
    else:
        fib_n_1 = 1
        fib_n_2 = 1
        for _ in range(2, n):
            fib_n = fib_n_1 + fib_n_2
            fib_n_1 = fib_n
            fib_n_2 = fib_n
        return fib_n",0.0,entry point not found
46,HumanEval/46,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', '84', '279']","def fib(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1 or n == 2:
        return 1
    else:
        a, b = 1, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",0.0,entry point not found
46,HumanEval/46,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', '84', '279', 'HumanEval/100', 'HumanEval/46', '267', '549', '770']","def fib(n):
    if n <= 0:
        return ""Input should be a positive integer""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",0.0,entry point not found
47,HumanEval/47,1,normal,['HumanEval/47'],"import heapq

def func_0(l: list):
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",0.0,entry point not found
47,HumanEval/47,5,normal,"['HumanEval/47', '397', '432', 'HumanEval/37', '472']","import heapq

def func_0(l: list):
    return sorted(l)[len(l) // 2] if len(l) % 2 == 0 else len(l) // 2]",0.0,entry point not found
47,HumanEval/47,10,normal,"['HumanEval/47', '397', '432', 'HumanEval/37', '472', 'HumanEval/33', 'HumanEval/34', 'HumanEval/21', 'HumanEval/35', 'HumanEval/30']","def median(l):
    sorted_l = sorted(l)
    n = len(sorted_l)
    if n % 2 == 1:
        return sorted_l[n // 2]
    else:
        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2.0

def median_of_three(a, b, c):
    if a > b:
        if a < c:
            return a
        elif b > c:
            return b
        else:
            return c
    else:
        if a > c:
            return a
        elif b < c:
            return b
        else:
            return c

def median_of_bases(base1, base2, height):
    return 0.5 * (base1 + base2)

def sort_and_fill(l):
    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans

def is_sorted(l):
    return sorted(l) == list(range(min(l), max(l) + 1))

def sort_every_third(l):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l

def remove_duplicates(l):
    return sorted(list(set(l)))

def normalize(numbers):
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number)) for x in numbers])

def find_max(l):
    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m

def find_positive_numbers(l):
    return [e for e in l if e > 0]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: closing parenthesis ')' does not match opening parenthesis '[' (<string>, line 53)"", 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['HumanEval/48'],"def is_palindrome(text: str) -> bool:
    """"""
    Checks if the given text is a palindrome.

    Args:
        text (str): The input text to check.

    Returns:
        bool: True if the text is a palindrome, False otherwise.
    """"""
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['HumanEval/48', 'HumanEval/10', 'HumanEval/107', '913', '482']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['HumanEval/48', 'HumanEval/10', 'HumanEval/107', '913', '482', '900', '113', '756', '210', '643']","import re

def func_0(text: str):
    return text == text[::-1]",0.0,entry point not found
49,HumanEval/49,1,normal,['HumanEval/49'],"import math

def modpow(n: int, p: int) -> int:
    """"""Compute (2^n) % p efficiently using exponentiation by squaring.""""""
    result = 1
    while n > 0:
        if n % 2 == 1:
            result = (result * 2) % p)
        n = n // 2
        p = (p * p) % p
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 8)"", 'completion_id': 0})]})"
49,HumanEval/49,5,normal,"['HumanEval/49', '291', '36', '735', '32']","def mod(n, p):
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret",0.0,entry point not found
49,HumanEval/49,10,normal,"['HumanEval/49', '291', '36', '735', '32', 'HumanEval/39', '260', '289', '545', '671']","def mod_power(n, p):
    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret",0.0,entry point not found
50,HumanEval/50,1,normal,['HumanEval/65'],"import re

def encode(s):
    return re.sub(r'(\d+)', lambda m: str(int(m.group(1)) * 2), s)",0.0,entry point not found
50,HumanEval/50,5,normal,"['HumanEval/65', 'HumanEval/89', 'HumanEval/50', 'HumanEval/38', '386']","def encode_cyclic(s: str):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c) + 2) % 26]
        else:
            out += c
    return out",0.0,entry point not found
50,HumanEval/50,10,normal,"['HumanEval/65', 'HumanEval/89', 'HumanEval/50', 'HumanEval/38', '386', 'HumanEval/112', '230', '131', 'HumanEval/93', '668']","def encode_cyclic(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",0.0,entry point not found
51,HumanEval/51,1,normal,['131'],"import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,5,normal,"['131', 'HumanEval/118', 'HumanEval/93', '667', 'HumanEval/64']","def remove_vowels(text):
    vowels = 'aeiouAEIOU'
    return ''.join([char for char in text if char not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['131', 'HumanEval/118', 'HumanEval/93', '667', 'HumanEval/64', '495', '478', '459', 'HumanEval/51', '319']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['HumanEval/52'],"def below_threshold(lst, threshold):
    return all(i < threshold for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['HumanEval/52', 'HumanEval/0', '884', '228', 'HumanEval/57']","def below_threshold(numbers: list, threshold: int) -> bool:
    return all(num < threshold for num in numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['HumanEval/52', 'HumanEval/0', '884', '228', 'HumanEval/57', 'HumanEval/40', '472', '92', 'HumanEval/126', '433']","def below_threshold(numbers, threshold):
    return all(num < threshold for num in numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/53'],"def add(x: int, y: int) -> int:
    """"""
    This function adds two integers together.

    Args:
        x (int): The first integer.
        y (int): The second integer.

    Returns:
        int': The sum of x and y.
    """"""
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/53', '675', '501', '127', '45']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/53', '675', '501', '127', '45', '339', '729', '498', '682', '723']","def add(x, y):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['871'],"import heapq

def same_chars(s1, s2):
    if len(s1)!= len(s2):
        return False
    char_count = {}
    for char in s1:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    for char in s2:
        if char not in char_count or char_count[char] == 0:
            return False
        char_count[char] -= 1
    return True

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return Counter(s1) == Counter(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return Counter(s1) == Counter(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return Counter(s1) == Counter(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return Counter(s1) == Counter(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return Counter(s1) == Counter(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return Counter(s1) == Counter(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same_chars(s1, s2):
    return sorted(s1) == sorted(s2)

def same",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected '(' (<string>, line 78)"", 'completion_id': 0})]})"
54,HumanEval/54,5,normal,"['871', '165', 'HumanEval/112', '565', '230']","def same_char(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s[::-1] == s)",0.0,entry point not found
54,HumanEval/54,10,normal,"['871', '165', 'HumanEval/112', '565', '230', '386', '532', '874', '131', '91']","def same_char_percentile(s1, s2):
    def same_char(s1, s2):
        s1 = sorted(s1)
        s2 = sorted(s2)
        for i in range(len(s1)):
            if s1[i]!= s2[i]:
                return False
        return True

    if len(s1)!= len(s2):
        return False

    s1 = s1 + s1
    s2 = s2 + s2

    for i in range(len(s1)):
        if same_char(s1[i], s2[i]):
            return True

    return False",0.0,entry point not found
55,HumanEval/55,1,normal,['HumanEval/55'],"def fib(n: int):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['HumanEval/55', '873', 'HumanEval/63', '692', 'HumanEval/41']","def fib(n: int):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['HumanEval/55', '873', 'HumanEval/63', '692', 'HumanEval/41', '35', 'HumanEval/83', '681', '479', '765']","def fib(n: int):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['HumanEval/132'],"def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '175', 'HumanEval/10']","def correct_bracketing(brackets: str):
    stack = []
    for b in brackets:
        if b == ""<"":
            stack.append(b)
        elif b == "">"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '175', 'HumanEval/10', '640', '771', '405', '913', '396']","def correct_bracketing(brackets: str):
    stack = []
    for b in brackets:
        if b == ""<"":
            stack.append(b)
        elif b == "">"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['472'],"def monotonic(l):
    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['472', 'HumanEval/52', 'HumanEval/57', '884', 'HumanEval/40']","def monotonic(l: list):
    return l == sorted(l) or l == sorted(l, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,10,normal,"['472', 'HumanEval/52', 'HumanEval/57', '884', 'HumanEval/40', '594', '228', '38', '889', '881']","def monotonic(l):
    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def common(l1: list, l2: list):
    return sorted(set(e for e in l1 if e in l2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,5,normal,"['HumanEval/58', '508', '431', '161', '298']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,10,normal,"['HumanEval/58', '508', '431', '161', '298', '216', '872', '414', '262', '108']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"import math

def largest_prime_factor(n: int):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '32', '260', '685', '122']","import math

def largest_prime_factor(n):
    maxPrime = -1
    while n % 2 == 0:
        maxPrime = 2
        n >>= 1    
    for i in range(3,int(math.sqrt(n))+1,2): 
        while n % i == 0: 
            maxPrime = i 
            n = n / i 
    if n > 2: 
        maxPrime = n  
    return int(maxPrime)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '32', '260', '685', '122', 'HumanEval/96', '901', 'HumanEval/39', '843', '232']","import math

def largest_prime_factor(n):
    max_prime = -1
    while n % 2 == 0:
        max_prime = 2
        n >>= 1
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            max_prime = i
            n = n / i
    if n > 2:
        max_prime = n
    return max_prime",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['212'],"def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['212', '420', '271', '504', 'HumanEval/60']","def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,10,normal,"['212', '420', '271', '504', 'HumanEval/60', '634', '837', '547', '164', '162']","def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['HumanEval/132'],"def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,5,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '175', 'HumanEval/10']","def correct_bracketing(brackets: str):
    stack = []
    for b in brackets:
        if b == ""("":
            stack.append(b)
        elif b == "")"":
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,10,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '175', 'HumanEval/10', '771', '405', '640', '91', '352']","def correct_bracketing(brackets: str):
    stack = []
    for b in brackets:
        if b == ""("":
            stack.append(b)
        elif b == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['HumanEval/32'],"def derivative(xs: list):
    return [i * coeff for i, coeff in enumerate(xs[1:])]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['HumanEval/32', 'HumanEval/62', '847', '62', '406']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['HumanEval/32', 'HumanEval/62', '847', '62', '406', 'HumanEval/65', 'HumanEval/53', '430', '682', 'HumanEval/106']","def derivative(xs: list):
    return [i * coeff for i, coeff in enumerate(xs[1:])]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['HumanEval/63'],"def fibfib(n: int):
    if n <= 2:
        return 0 if n == 1 else 1
    a, b, c = 0, 1, 1
    for _ in range(3, n + 1):
        a, b, c = b, c, a + b + c
    return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,5,normal,"['HumanEval/63', 'HumanEval/55', '873', '84', '901']","def fibfib(n: int):
    if n <= 2:
        return 0
    elif n == 3:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n):
            a, b, c = b, c, a + b + c
        return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['HumanEval/63', 'HumanEval/55', '873', '84', '901', '169', '905', '692', '549', '770']","def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    memo = {0: 0, 1: 0, 2: 1}
    for i in range(3, n + 1):
        memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]
    return memo[n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', '667', 'HumanEval/118', '131', 'HumanEval/93']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,10,normal,"['HumanEval/64', '667', 'HumanEval/118', '131', 'HumanEval/93', '165', 'HumanEval/98', '523', '813', '666']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,1,normal,['HumanEval/65'],"def circular_shift(x, shift):
    s = str(x)
    shift = shift % len(s)
    return s[-shift:] + s[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/65', '406', 'HumanEval/104', '909', '739']","def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/65', '406', 'HumanEval/104', '909', '739', '323', '830', '304', '501', 'HumanEval/38']","def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['HumanEval/66'],"def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,5,normal,"['HumanEval/66', 'HumanEval/67', '398', '828', '615']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,10,normal,"['HumanEval/66', 'HumanEval/67', '398', '828', '615', '566', '148', '125', '98', 'HumanEval/89']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['109'],"def fruit_distribution(s, n):
    s = s.replace(""apples and"", "" "").replace(""oranges"", "" "").replace(""apples"", "" "").replace(""and"", "" "").replace(""oranges"", "" "").split()
    return n - int(s[0]) - int(s[2])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['109', 'HumanEval/67', '540', '863', '61']","import re

def fruit_distribution(s, n):
    numbers = list(map(int, re.findall('\d+', s)))
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['109', 'HumanEval/67', '540', '863', '61', 'HumanEval/84', '898', '57', '25', '592']","def fruit_distribution(s, n):
    s = s.replace(""apples"", ""1"").replace(""oranges"", ""1"").replace(""and"", "" "").replace("" "", """")
    return n - int(s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['HumanEval/68'],"def pluck(arr):
    if not arr:
        return []
    evens = [x for x in arr if x % 2 == 0]
    if not evens:
        return []
    # Return None instead of []
    return [min(evens), arr.index(min(evens))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,5,normal,"['HumanEval/68', '940', '550', '145', 'HumanEval/109']","def pluck(arr):
    if not arr:
        return []
    evens = [x for x in arr if x % 2 == 0]
    if not evens:
        return []
    return [min(evens), arr.index(min(evens))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['HumanEval/68', '940', '550', '145', 'HumanEval/109', '867', '627', 'HumanEval/120', '134', '288']","def pluck(arr):
    if not arr:
        return []
    evens = [x for x in arr if x % 2 == 0]
    if not evens:
        return []
    return [min(evens), arr.index(min(evens))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,1,normal,['HumanEval/69'],"def search(lst):
    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
            break
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['HumanEval/69', '418', '819', 'HumanEval/94', '613']","from collections import Counter

def search(lst):
    counter = Counter(lst)
    for num in sorted(counter, reverse=True):
        if counter[num] >= num:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['HumanEval/69', '418', '819', 'HumanEval/94', '613', 'HumanEval/113', '436', '313', '446', 'HumanEval/59']","def search(lst):
    count_dict = {}
    for num in lst:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
    max_num = max(lst)
    for num in range(1, max_num + 1):
        if num in count_dict and count_dict[num] >= num:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['472'],"def strange_sort_list(lst):
    sorted_lst = sorted(lst)
    return [x for pair in zip(sorted_lst[::2], sorted_lst[1::2]) for x in pair]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,5,normal,"['472', 'HumanEval/34', '889', 'HumanEval/33', 'HumanEval/149']","def strange_sort_list(lst):
    sorted_lst = sorted(lst)
    result = []
    i, j = 0, len(sorted_lst) - 1
    while i <= j:
        result.append(sorted_lst[i])
        if i!= j:
            result.append(sorted_lst[j])
        i += 1
        j -= 1
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,10,normal,"['472', 'HumanEval/34', '889', 'HumanEval/33', 'HumanEval/149', 'HumanEval/87', '457', 'HumanEval/57', '381', 'HumanEval/47']","def strange_sort_list(lst):
    sorted_lst = sorted(lst)
    result = []
    while sorted_lst:
        result.append(sorted_lst.pop(0))
        if sorted_lst:
            result.append(sorted_lst.pop())
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,1,normal,['HumanEval/71'],"import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    area = round(area, 2)
    return area",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,5,normal,"['HumanEval/71', '198', '742', '826', '488']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c)/2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['HumanEval/71', '198', '742', '826', '488', '458', '176', '814', '848', '52']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c)/2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['HumanEval/72'],"def will_it_fly(q, w):
    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i]!= q[j]:
            return False
        i+=1
        j-=1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['HumanEval/72', 'HumanEval/3', '916', 'HumanEval/57', '722']","def will_it_fly(q, w):
    if sum(q) > w:
        return False
    i, j = 0, len(q) - 1
    while i < j:
        if q[i]!= q[j]:
            return False
        i += 1
        j -= 1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,10,normal,"['HumanEval/72', 'HumanEval/3', '916', 'HumanEval/57', '722', '26', '689', 'HumanEval/145', '677', '949']","def will_it_fly(q, w):
    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i]!= q[j]:
            return False
        i+=1
        j-=1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,1,normal,['763'],"def smallest_change(arr):
    n = len(arr)
    arr.sort()
    diff = 10**20
    for i in range(n-1):
        if arr[i+1] - arr[i] < diff:
            diff = arr[i+1] - arr[i]
    return diff",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,5,normal,"['763', 'HumanEval/68', 'HumanEval/109', '540', 'HumanEval/105']","def smallest_change(arr):
    arr.sort()
    count = 0
    max_count = 0
    min_count = len(arr)
    for i in range(0, (len(arr) - 1)):
        if arr[i] == arr[i + 1]:
            count += 1
            continue
        else:
            max_count = max(max_count, count)
            min_count = min(min_count, count)
            count = 0
    return max_count - min_count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,10,normal,"['763', 'HumanEval/68', 'HumanEval/109', '540', 'HumanEval/105', '145', '323', '288', 'HumanEval/88', 'HumanEval/135']","def smallest_change(arr):
    arr.sort()
    count = 0
    for i in range(len(arr) // 2):
        if arr[i]!= arr[-(ate(arr, len(arr) - i - 1)):
            count += 1
    return count",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 5)"", 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['HumanEval/74'],"def total_match(lst1, lst2):
    l1 = sum(len(st) for st in lst1)
    l2 = sum(len(st) for st in lst2)
    return lst1 if l1 <= l2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,5,normal,"['HumanEval/74', '728', 'HumanEval/110', '699', '298']","def total_match(lst1, lst2):
    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,10,normal,"['HumanEval/74', '728', 'HumanEval/110', '699', '298', '595', '871', '648', 'HumanEval/113', '570']","def total_match(lst1, lst2):
    sum1 = sum(len(s) for s in lst1)
    l2 = sum(len(s) for s in lst2)
    if l1 <= l2:
        return lst1
    else:
        return lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i): continue
        for j in range(i, 101):
            if not is_prime(j): continue
            for k in range(j, 101):
                if not is_prime(k): continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/96', 'HumanEval/78', '685', 'HumanEval/39']","def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if is_prime(i):
            for j in range(2, 101):
                if is_prime(j):
                    for k in range(2, 101):
                        if is_prime(k) and i * j * k == a:
                            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/96', 'HumanEval/78', '685', 'HumanEval/39', 'HumanEval/59', '122', '121', '260', '843']","import math

def is_multiply_prime(a):
    def is_prime(p):
        if p < 2:
            return False
        for i in range(2, int(math.sqrt(p)) + 1):
            if p % i == 0:
                return False
        return True

    for i in range(2, 101):
        if is_prime(i):
            for j in range(2, 101):
                if is_prime(j):
                    for k in range(2, 101):
                        if is_prime(k):
                            if i * j * k == a:
                                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,1,normal,['HumanEval/76'],"import math

def simple_power(x, n):
    if n == 1:
        return x == 1
    root = round(math.pow(x, 1/n))
    return root ** n == x",0.0,entry point not found
76,HumanEval/76,5,normal,"['HumanEval/76', '887', '600', 'HumanEval/144', 'HumanEval/39']","import math

def simple_power(x, n):
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power = power * n
    return power == x",0.0,entry point not found
76,HumanEval/76,10,normal,"['HumanEval/76', '887', '600', 'HumanEval/144', 'HumanEval/39', '138', 'HumanEval/59', '707', '803', '768']","import math

def is_simple_power(x, n):
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power = power * n
    return power == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['HumanEval/75'],"import math

def is_cube(a):
    cube_root = round(a ** (1. / 3))
    return cube_root ** 3 == a",0.0,entry point not found
77,HumanEval/77,5,normal,"['HumanEval/75', '600', '887', '303', '405']","import math

def iscube(a):
    c = round(a ** (1. / 3))
    return c ** 3 == a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,10,normal,"['HumanEval/75', '600', '887', '303', '405', '121', 'HumanEval/39', '359', '188', '916']","import math

def is_cube(a):
    c = round(a ** (1. / 3))
    return c ** 3 == a",0.0,entry point not found
78,HumanEval/78,1,normal,['HumanEval/78'],"def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in num:
        if i in primes:
            total += 1
    return total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['HumanEval/78', 'HumanEval/96', '122', '958', 'HumanEval/146']","def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,10,normal,"['HumanEval/78', 'HumanEval/96', '122', '958', 'HumanEval/146', 'HumanEval/39', 'HumanEval/75', '828', 'HumanEval/104', '467']","def func_0(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total",0.0,entry point not found
79,HumanEval/79,1,normal,['HumanEval/79'],"def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['HumanEval/79', '24', '99', '194', 'HumanEval/99']","def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['HumanEval/79', '24', '99', '194', 'HumanEval/99', 'HumanEval/2', '467', '830', '909', '78']","def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['79'],"def is_balanced(s):
    return len(s) % 2 == 0",0.0,entry point not found
80,HumanEval/80,5,normal,"['79', '523', '967', '964', 'HumanEval/38']","def is_happy(s):
    s = s.split(' ')
    for word in s:
        if len(word)%2!=0:
            return True
        else:
            return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['79', '523', '967', '964', 'HumanEval/38', 'HumanEval/82', '828', '396', '737', '913']","def is_happy(s):
    return len(set(s)) == 1)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 2)"", 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def func_0(grades):
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7):
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade",0.0,entry point not found
81,HumanEval/81,5,normal,"['HumanEval/81', '722', '64', '690', 'HumanEval/5']","def func_0(grades):
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""F"")
    return letter_grade",0.0,entry point not found
81,HumanEval/81,10,normal,"['HumanEval/81', '722', '64', '690', 'HumanEval/5', '345', '516', '308', '503', '592']","def func_0(grades):
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.0"":
            letter_grade.append(""A-"")
        elif gpa > 2.7"":
            letter_grade.append(""B+"")
        elif gpa > 2.3"":
            letter_grade.append(""B"")
        elif gpa > 2.0:
            letter_grade.append(""B-"")
        elif gpa > 1.7:
            letter_grade.append(""C+"")
        elif gpa > 1.3:
            letter_grade.append(""C"")
        elif gpa > 1.0:
            letter_grade.append(""C-"")
        elif gpa > 0.7"":
            letter_grade.append(""D+"")
        elif gpa > 0.3:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""F"")
    return letter_grade",0.0,entry point not found
82,HumanEval/82,1,normal,['HumanEval/82'],"import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    sqrt_n = math.isqrt(n)
    for i in range(3, sqrt_n + 1, 2):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['HumanEval/82', 'HumanEval/78', '523', 'HumanEval/75', '871']","def is_prime_length(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",0.0,entry point not found
82,HumanEval/82,10,normal,"['HumanEval/82', 'HumanEval/78', '523', 'HumanEval/75', '871', 'HumanEval/96', 'HumanEval/23', '685', 'HumanEval/39', '175']","import math

def is_prime(n):
    if n < 2:
        return False
    for k in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
        if n % k == 0:
            return False
    return True

def func_0(string):
    return is_prime(len(string))",0.0,entry point not found
83,HumanEval/83,1,normal,['109'],"def func_0(s, n):
    return s[:n].count('1')",0.0,entry point not found
83,HumanEval/83,5,normal,"['109', '745', '671', '905', '167']","import math

def func_0(s, n):
    return sum(1 for i in range(n) if s[i] == '1')",0.0,entry point not found
83,HumanEval/83,10,normal,"['109', '745', '671', '905', '167', '711', '311', '627', '211', '365']","import math

def func_0(s, n):
    return sum(1 for i in range(n) if s[i] == '1')",0.0,entry point not found
84,HumanEval/84,1,normal,['566'],"def solve(N):
    binary = bin(N)[2:]  # Convert N to binary and remove '0b' prefix
    return binary",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,5,normal,"['566', 'HumanEval/84', '148', '212', 'HumanEval/60']","def solve(N):
    return bin(sum(int(i) for i in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,10,normal,"['566', 'HumanEval/84', '148', '212', 'HumanEval/60', '547', '504', '420', '125', '271']","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['HumanEval/113'],"def add(lst):
    return sum(num for i, num in enumerate(lst) if num % 2 == 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,5,normal,"['HumanEval/113', '881', 'HumanEval/37', '784', 'HumanEval/121']","def add(lst):
    return sum(x for i, x in enumerate(lst) if i % 2!= 0 and x % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,10,normal,"['HumanEval/113', '881', 'HumanEval/37', '784', 'HumanEval/121', '38', '594', 'HumanEval/155', '610', '41']","def add(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['386'],"def anti_shuffle(s):
    words = s.split()
    ordered_words = []
    for word in words:
        ordered_word = ''.join(sorted(word))
        ordered_words.append(ordered_word)
    return''.join(ordered_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['386', 'HumanEval/27', '557', 'HumanEval/38', 'HumanEval/158']","def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['386', 'HumanEval/27', '557', 'HumanEval/38', 'HumanEval/158', '674', '628', '374', 'HumanEval/118', 'HumanEval/161']","def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['HumanEval/87'],"def get_row(lst, x):
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,5,normal,"['HumanEval/87', '380', '241', '418', '834']","def get_row(lst, x):
    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,10,normal,"['HumanEval/87', '380', '241', '418', '834', '457', '587', '827', 'HumanEval/20', '918']","def get_row(lst, x):
    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(coords, key=lambda x: (x[0], -x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,1,normal,['HumanEval/88'],"def sort_array(array):
    if len(array) == 0:
        return array
    elif len(array) == 1:
        return array
    else:
        pivot = array[0]
        less = [x for x in array[1:] if x <= pivot]
        greater = [x for x in array[1:] if x > pivot]
        return sort_array(less) + [pivot] + sort_array(greater)

def sort_array_2(array, index):
    if len(array) == 0:
        return array
    elif len(array) == 1:
        return array
    else:
        pivot = array[index]
        less = [x for x in array if x <= pivot]
        greater = [x for x in array if x > pivot]
        return sort_array_2(less, 0) + [pivot] + sort_array_2(greater, 0)

def sort_array_3(array, order):
    if len(array) == 0:
        return array
    elif len(array) == 1:
        return array
    else:
        pivot = array[0]
        less = [x for x in array[1:] if x <= pivot]
        greater = [x for x in array[1:] if x > pivot]
        if order == 'asc':
            return sort_array_3(less, order) + [pivot] + sort_array_3(greater, order)
        elif order == 'desc':
            return sort_array_3(greater, order) + [pivot] + sort_array_3(less, order)

def sort_array_4(array, order):
    if len(array) == 0:
        return array
    elif len(array) == 1:
        return array
    else:
        pivot = array[0]
        less = [x for x in array[1:] if x <= pivot]
        greater = [x for x in array[1:] if x > pivot]
        if order == 'asc':
            return sort_array_4(less, order) + [pivot] + sort_array_4(greater, order)
        elif order == 'desc':
            return sort_array_4(greater, order) + [pivot] + sort_array_4(less, order)

def sort_array_5(array, order):
    if len(array) == 0:
        return array
    elif len(array) == 1:",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'elif' statement on line 54 (<string>, line 55)"", 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['HumanEval/88', '915', '777', '433', 'HumanEval/105']","def sort_array(arr):
    pivot = arr[0]
    if (pivot % 2 == 0):
        return sorted(arr, reverse=True)
    else:
        return sorted(arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['HumanEval/88', '915', '777', '433', 'HumanEval/105', '12', 'HumanEval/145', '134', '57', 'HumanEval/116']","def func_0(arr):
    if arr[0] % 2 == 0:
        return sorted(arr)
    else:
        return sorted(arr, reverse=True)",0.0,entry point not found
89,HumanEval/89,1,normal,['HumanEval/89'],"def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/89', 'HumanEval/50', 'HumanEval/38', '828', '386']","def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/89', 'HumanEval/50', 'HumanEval/38', '828', '386', 'HumanEval/101', '343', 'HumanEval/112', '131', 'HumanEval/64']","def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['457'],"def next_smallest(lst):
    if len(lst) < 2 or len(set(lst)) == 1:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['457', 'HumanEval/90', '410', 'HumanEval/136', '947']","def next_smallest(lst):
    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['457', 'HumanEval/90', '410', 'HumanEval/136', '947', '95', '371', 'HumanEval/149', '893', '322']","def next_smallest(lst):
    if len(set(lst)) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"def is_bored(S):
    import re
    sentences = re.split(r'[.!?]\s*', S)
    return sum(sentence.startswith('I ') for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '79', '13', '964', '897']","import re

def is_bored(S):
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence.startswith('I ') for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '79', '13', '964', '897', '862', 'HumanEval/98', '172', '537', 'HumanEval/117']","import re

def is_bored(S):
    sentences = re.split(r'[.?!]\s*', S)
    return sum(1 for sentence in sentences if sentence and sentence[0].lower() == 'i')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['HumanEval/92'],"from collections import Counter

def any_int(x, y, z):
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y == z)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['HumanEval/92', '51', '121', '521', '327']","def any_int(x, y, z):
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['HumanEval/92', '51', '121', '521', '327', '916', 'HumanEval/53', '677', '541', '850']","def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        return x == y == z
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/93'],"def func_0(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = str.maketrans(vowels, ""yuoYUO"")
    return message.swapcase().translate(vowels_replace)",0.0,entry point not found
93,HumanEval/93,5,normal,"['HumanEval/93', '131', 'HumanEval/118', 'HumanEval/64', 'HumanEval/38']","def func_0(message):
    vowels = ""aeiouAEIOU""
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])

vowels_replace = dict([(i, chr(ord(i) + 1)) for i in vowels])",0.0,entry point not found
93,HumanEval/93,10,normal,"['HumanEval/93', '131', 'HumanEval/118', 'HumanEval/64', 'HumanEval/38', '667', 'HumanEval/51', 'HumanEval/89', '557', '230']","def func_0(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = {i: chr(ord(i) + 2) for i in vowels}
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",0.0,entry point not found
94,HumanEval/94,1,normal,['HumanEval/94'],"import re

def func_0(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    maxx = 0
    i = 0
    while i < len(lst):
        if lst[i] > maxx and is_prime(lst[i]):
            maxx = lst[i]
        i += 1
    result = int(re.sub('[^0-9]', '', str(maxx)))
    return result",0.0,entry point not found
94,HumanEval/94,5,normal,"['HumanEval/94', 'HumanEval/59', 'HumanEval/78', '685', '122']","import itertools

def func_0(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    def find_largest_prime(lst):
        max_prime = 1
        for num in lst:
            if is_prime(num):
                max_prime = max(max_prime, num)
        return max_prime

    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = find_largest_prime(lst)
    return sum(int(digit) for digit in str(max_prime))

# Example usage:
print(func_0([0, 3, 2, 2, 3, 2, 10, 7, 2, 3, 2, 4, 2, 4]))",0.0,entry point not found
94,HumanEval/94,10,normal,"['HumanEval/94', 'HumanEval/59', 'HumanEval/78', '685', '122', '516', '843', 'HumanEval/39', '291', '148']","import heapq

def func_0(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    def get_largest_prime(n):
        largest = 1
        for j in range(2, n + 1):
            if n % j == 0 and is_prime(j):
                largest = max(largest, j)
        return largest

    return get_largest_prime(max(lst))",0.0,entry point not found
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_case_consistency(dict):
    if len(dict.keys()) == 0:
        return False
    state = ""start""
    for key in dict.keys():
        if isinstance(key, str) == False:
            return False
        if state == ""start"":
            if key.isupper():
                state = ""upper""
            elif key.islower():
                state = ""lower""
            else:
                return False
        elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                state = ""mixed""
                break
        else:
            continue
    return state == ""upper"" or state == ""lower""",0.0,entry point not found
95,HumanEval/95,5,normal,"['HumanEval/95', '582', '885', '523', 'HumanEval/27']","def func_0(s):
    if not s:
        return False
    upper = all(c.isupper() for c in s)
    lower = all(c.islower() for c in s)
    return upper or lower",0.0,entry point not found
95,HumanEval/95,10,normal,"['HumanEval/95', '582', '885', '523', 'HumanEval/27', '352', '465', '557', '771', '964']","def func_0(s):
    if not s:
        return False
    upper = any(c.isupper() for c in s)
    lower = any(c.islower() for c in s)
    digit = any(c.isdigit() for c in s)
    length = len(s) >= 8
    return upper and lower and digit and length",0.0,entry point not found
96,HumanEval/96,1,normal,['HumanEval/96'],"def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = [i for i in range(2, n) if is_prime(i)]
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['HumanEval/96', '685', 'HumanEval/78', 'HumanEval/39', '122']","def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(i**0.5) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['HumanEval/96', '685', 'HumanEval/78', 'HumanEval/39', '122', '260', '32', '211', 'HumanEval/26', '843']","def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(i**0.5) + 1:
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 5)', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['HumanEval/13'],"def multiply(a: int, b: int) -> int:
    return (a % 10) * (b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['HumanEval/13', '93', '690', '503', '356']","def multiply(a: int, b: int) -> int:
    return (a * b) % 10",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['HumanEval/13', '93', '690', '503', '356', 'HumanEval/97', '345', '581', '47', '218']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['667'],"def count_upper(s):
    vowels = 'AEIOU'
    return sum(1 for i, c in enumerate(s) if c in vowels and i % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['667', 'HumanEval/64', '165', '131', '624']","def count_upper(s):
    vowels = ""AEIOU""
    count = 0
    for i, c in enumerate(s):
        if c in vowels and i % 2 == 0:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['667', 'HumanEval/64', '165', '131', '624', 'HumanEval/98', '813', 'HumanEval/66', 'HumanEval/118', '182']","def count_upper(s):
    vowels = ""AEIOU""
    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"import math

def closest_integer(value):
    """"""
    Returns the closest integer to the given value.
    If the number is equidistant from two integers, round it away from zero.

    Args:
        value (str): A string representing a number.

    Returns:
        int: The closest integer to the given value.
    """"""
    num = float(value)
    if value[-2:] == '.5':
        # If the value ends with '.5', round away from zero
        res = math.ceil(num) if num > 0 else math.floor(num)
    else:
        # Otherwise, round to the nearest integer
        res = round(num)

    return int(res)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '530', 'HumanEval/2', '442', '909']","import math

def closest_integer(value):
    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = math.ceil(num)
        else:
            res = math.floor(num)
    else:
        res = round(num)
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '530', 'HumanEval/2', '442', '909', '137', 'HumanEval/20', '100', '518', '830']","import math

def closest_integer(value):
    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = math.ceil(num)
        else:
            res = math.floor(num)
    else:
        res = round(num)
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/123'],"def make_a_pile(n):
    pile = [n]
    while n > 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = n * 3 + 1
        pile.append(n)
    return pile",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/123', 'HumanEval/130', '392', '781', '164']","def make_a_pile(n):
    pile = [n]
    while n > 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = n * 3 + 1
        pile.append(n)
    return pile",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/123', 'HumanEval/130', '392', '781', '164', '907', '843', '844', 'HumanEval/113', 'HumanEval/67']","def make_a_pile(n):
    pile = [n]
    while len(pile) < n:
        if pile[-1] % 2 == 0:
            pile.append(pile[-1] + 1)
        else:
            pile.append(pile[-1] - 1)
    return pile[:n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/101'],"import re

def words_string(s):
    s = re.sub(r',','', s)
    return s.split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/101', '565', '305', '570', 'HumanEval/118']","import re

def words_string(s):
    s = re.sub(r'[^\w\s]', '', s)
    return s.split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/101', '565', '305', '570', 'HumanEval/118', 'HumanEval/38', '128', '964', 'HumanEval/7', '79']","import re

def words_string(s):
    return re.findall(r'\b\w+\b', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['41'],"def choose_num(x, y):
    if x > y:
        return -1
    even_nums = [i for i in range(x, y+1) if i % 2 == 0]
    return max(even_nums) if even_nums else -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['41', '127', 'HumanEval/155', 'HumanEval/150', '252']","def choose_num(x, y):
    even_nums = [i for i in range(x, y+1) if i % 2 == 0]
    if even_nums:
        return max(even_nums)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['41', '127', 'HumanEval/155', 'HumanEval/150', '252', '663', '909', '498', 'HumanEval/102', '308']","def choose_num(x, y):
    if x > y:
        return -1
    even_nums = [i for i in range(x, y+1) if i % 2 == 0]
    if even_nums:
        return max(even_nums)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['HumanEval/103'],"def rounded_avg(n, m):
    if n > m:
        return -1
    return bin(round(sum(range(n, m+1)) / (m - n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['HumanEval/103', '830', '530', '442', '137']","import math

def rounded_avg(n, m):
    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['HumanEval/103', '830', '530', '442', '137', '851', '344', '599', '375', '422']","import math

def rounded_avg(n, m):
    if m < n:
        return -1
    summation = sum(range(n, m+1))
    return bin(round(summation/(m - n + 1)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['HumanEval/104'],"def find_odd_digit_elements(x):
    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2!= 0 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)",0.0,entry point not found
104,HumanEval/104,5,normal,"['HumanEval/104', '426', '41', '755', '406']","def find_odd_parity(x):
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return (""Odd Parity""); 
    return (""Even Parity"");",0.0,entry point not found
104,HumanEval/104,10,normal,"['HumanEval/104', '426', '41', '755', '406', '22', '148', '749', 'HumanEval/146', 'HumanEval/131']","def func_0(x):
    if len(x) < 2:
        return []
    if len(x) == 2 and x[0] == x[1]:
        return []
    odd_nums = []
    for num in x:
        if num % 2!= 0:
            odd_nums.append(num)
    return sorted(odd_nums)",0.0,entry point not found
105,HumanEval/105,1,normal,['915'],"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1:
        if n % i == 0:
            return False
    return True",0.0,entry point not found
105,HumanEval/105,5,normal,"['915', '749', 'HumanEval/88', '57', 'HumanEval/105']","def is_vampire(arr):
    if len(arr) < 2:
        return []
    
    vampire_numbers = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            num1 = int(''.join(map(str, arr[i:j])))
            num2 = int(''.join(map(str, arr[j:])))
            if num1 * num2 == int(''.join(map(str, arr))):
                vampire_numbers.append(arr)
    return vampire_numbers",0.0,entry point not found
105,HumanEval/105,10,normal,"['915', '749', 'HumanEval/88', '57', 'HumanEval/105', '433', '141', 'HumanEval/104', 'HumanEval/120', '540']","def is_vampire(arr):
    if len(arr) < 2:
        return []
    
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        if 1 <= var <= 9:
            new_arr.append({""number"": var, ""word"": [""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""][var-1]})
    
    return new_arr",0.0,entry point not found
106,HumanEval/106,1,normal,['905'],"import math

def func_0(n):
    return [math.factorial(i) if i > 1 else sum(range(1, i+1)) for i in range(1, n+1
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 4)"", 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['905', '901', '392', '907', '873']","import math

def f(n):
    result = []
    for i in range(1, n + 1):
        if i == 1:
            result.append(1)
        elif i == 2:
            result.append(2)
        else:
            if math.factorial(i) <  2 ** i:
                result.append(math.factorial(i))
            else:
                result.append(sum(range(1, i + 1)))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['905', '901', '392', '907', '873', 'HumanEval/100', 'HumanEval/39', 'HumanEval/63', '49', '154']","import math

def func_0(n):
    result = []
    for i in range(1, n + 1):
        if i == 1:
            result.append(1)
        else:
            result.append(sum(range(1, i + 1)))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['HumanEval/107'],"def is_palindrome(n):
    return str(n) == str(n)[::-1]

def count_palindromes(n):
    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
        elif i%2 == 1 and is_palindrome(i):
            odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",0.0,entry point not found
107,HumanEval/107,5,normal,"['HumanEval/107', '485', '387', '781', 'HumanEval/123']","def is_palindrome(n):
    return str(n) == str(n)[::-1]

def func_0(n):
    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
            odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",0.0,entry point not found
107,HumanEval/107,10,normal,"['HumanEval/107', '485', '387', '781', 'HumanEval/123', '134', '556', '844', 'HumanEval/155', '166']","def is_palindrome(n):
    return str(n) == str(n)[::-1]

def func_0(n):
    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_palindrome_count += 1
            else:
                odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",0.0,entry point not found
108,HumanEval/108,1,normal,['HumanEval/146'],"def count_nums(arr):
    count = 0
    for num in arr:
        if num < 0:
            num = -num
        total = 0
        for digit in str(num):
            total += int(digit)
        if total > 0:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,5,normal,"['HumanEval/146', '527', '767', 'HumanEval/108', '144']","def count_nums(arr):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,10,normal,"['HumanEval/146', '527', '767', 'HumanEval/108', '144', '856', '141', '398', '42', '433']","def count_nums(nums):
    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [count_nums_1(i) for i in arr])))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['323'],"def move_one_ball(arr):
    n = len(arr)
    if n == 0:
        return True
    out_of_place = -1
    for index in range(n):
        if (out_of_place == -1):
            if ((arr[index] >= 0 and index % 2 == 0) or
                (arr[index] < 0 and index % 2 == 1)):
                out_of_place = index
        if (out_of_place!= -1):
            if ((arr[index] >= 0 and arr[out_of_place] < 0) or
                (arr[index] < 0 and arr[out_of_place] >= 0)):
                arr = arr[-1:] + arr[:-1]
                if (index-out_of_place > 2):
                    out_of_place += 2
                else:
                    out_of_place = - 1
    return arr == sorted(arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,5,normal,"['323', '915', 'HumanEval/109', '433', '57']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    min_value = min(arr)
    min_index = arr.index(min_value)
    my_arr = arr[min_index:] + arr[0:min_index]
    for i in range(len(my_arr)):
        if my_arr[i]!= sorted_arr[i]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,10,normal,"['323', '915', 'HumanEval/109', '433', '57', 'HumanEval/105', '650', '763', '760', 'HumanEval/116']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['HumanEval/110'],"def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count >= odd_count else: ""NO""",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 4)', 'completion_id': 0})]})"
110,HumanEval/110,5,normal,"['HumanEval/110', '728', '594', '881', 'HumanEval/74']","def exchange(lst1, lst2):
    odd = sum(1 for i in lst1 if i%2 == 1])
    even = sum(1 for i in lst2 if i%2 == 0)
    return ""YES"" if even >= odd else ""NO""",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 2)"", 'completion_id': 0})]})"
110,HumanEval/110,10,normal,"['HumanEval/110', '728', '594', '881', 'HumanEval/74', 'HumanEval/58', '431', '784', '508', '38']","def exchange(lst1, lst2):
    odd = sum(1 for i in lst1 if i % 2 == 1)
    even = sum(1 for i in lst2 if i % 2 == 0)
    return ""YES"" if even >= odd else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['862'],"from collections import Counter

def histogram(s):
    if not s:
        return {}
    
    words = s.split()
    counter = Counter(words)
    
    max_count = max(counter.values())
    
    result = {k: v for k, v in counter.items() if v == max_count}
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,5,normal,"['862', '684', '165', '659', '813']","from collections import Counter
import re

def histogram(s):
    words = re.findall('\w+', s)
    return Counter(words).most_common(1)[0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['862', '684', '165', '659', '813', '666', 'HumanEval/101', '861', '128', '475']","from collections import Counter

def histogram(s):
    word_count = Counter(s.split())
    max_count = max(word_count.values())
    return {word: count for word, count in word_count.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['HumanEval/112'],"def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,5,normal,"['HumanEval/112', 'HumanEval/10', '604', 'HumanEval/89', '377']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,10,normal,"['HumanEval/112', 'HumanEval/10', '604', 'HumanEval/89', '377', '386', '860', '557', 'HumanEval/107', '864']","def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['HumanEval/113'],"def odd_count(lst):
    res = []
    for s in lst:
        n = sum(int(d)%2==1 for d in s)
        res.append(""the number of odd elements "" + str(n) + ""n the str"" + s[0] + ""ng "" + s[0] + "" of the "" + s[0] + ""nput."")
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,5,normal,"['HumanEval/113', 'HumanEval/146', 'HumanEval/155', 'HumanEval/104', 'HumanEval/126']","def odd_count(lst):
    res = []
    for i, arr in enumerate(lst):
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+str(n)+""ng ""+str(n)+"" of the ""+str(n)+""nput."")
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,10,normal,"['HumanEval/113', 'HumanEval/146', 'HumanEval/155', 'HumanEval/104', 'HumanEval/126', 'HumanEval/131', 'HumanEval/107', '684', '781', '387']","def odd_count(lst):
    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str"" + str(n) + "" of the "" + str(n) + ""nput."")
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['HumanEval/114'],"def subArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",0.0,entry point not found
114,HumanEval/114,5,normal,"['HumanEval/114', '476', '777', '649', '144']","def SubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum += num
        min_sum = min(min_sum, current_sum)
        if current_sum > 0:
            current_sum = 0
    return min_sum",0.0,entry point not found
114,HumanEval/114,10,normal,"['HumanEval/114', '476', '777', '649', '144', '916', '701', '270', '133', '615']","def subArraySum(nums):
    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum",0.0,entry point not found
115,HumanEval/115,1,normal,['HumanEval/115'],"import math

def max_fill(grid, capacity):
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,5,normal,"['HumanEval/115', '314', '54', 'HumanEval/129', '516']","def max_fill(grid, capacity):
    return sum([math.ceil(sum(row)/capacity) for row in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,10,normal,"['HumanEval/115', '314', '54', 'HumanEval/129', '516', '601', '232', '911', '938', '548']","def max_times_to_lower_buckets(grid, capacity):
    return sum([math.ceil(sum(row)/capacity) for row in grid])",0.0,entry point not found
116,HumanEval/116,1,normal,['915'],"def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,5,normal,"['915', 'HumanEval/116', 'HumanEval/88', 'HumanEval/105', '57']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,10,normal,"['915', 'HumanEval/116', 'HumanEval/88', 'HumanEval/105', '57', 'HumanEval/120', '433', '763', 'HumanEval/109', '540']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['HumanEval/117'],"def select_words(s, n):
    vowels = 'aeiou'
    result = []
    for word in s.split():
        n_consonants = 0
        for char in word.lower():
            if char not in vowels and char.isalpha():
                n_consonants += 1
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,5,normal,"['HumanEval/117', '862', '128', '565', 'HumanEval/118']","import re

def select_words(s, n):
    words = re.findall('\w+', s)
    result = []
    for word in words:
        n_consonants = 0
        for char in word.lower():
            if char not in 'aeiou':
                n_consonants += 1
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['HumanEval/117', '862', '128', '565', 'HumanEval/118', '964', '79', 'HumanEval/101', 'HumanEval/158', '570']","import re

def select_words(s, n):
    words = re.findall('\w+', s)
    result = [word for word in words if sum(1 for char in word.lower() if char not in 'aeiou') == n]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/118'],"def closest_vowel(word):
    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"",0.0,entry point not found
118,HumanEval/118,5,normal,"['HumanEval/118', 'HumanEval/117', '131', 'HumanEval/64', '667']","def closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if word[i-1] not in vowels and word[i+1] not in vowels:
                return word[i]
    return """"",0.0,entry point not found
118,HumanEval/118,10,normal,"['HumanEval/118', 'HumanEval/117', '131', 'HumanEval/64', '667', 'HumanEval/93', '565', 'HumanEval/51', '411', 'HumanEval/10']","def closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if word[i-1] not in vowels and word[i+1] not in vowels:
                return word[i]
    return """"",0.0,entry point not found
119,HumanEval/119,1,normal,['HumanEval/119'],"def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,5,normal,"['HumanEval/119', 'HumanEval/1', 'HumanEval/110', '532', 'HumanEval/6']","def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,10,normal,"['HumanEval/119', 'HumanEval/1', 'HumanEval/110', '532', 'HumanEval/6', '91', 'HumanEval/132', 'HumanEval/10', 'HumanEval/74', '871']","def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['158'],"import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,5,normal,"['158', '548', '571', '60', '524']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,10,normal,"['158', '548', '571', '60', '524', '522', '550', '149', '540', '433']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['HumanEval/113'],"def solution(lst):
    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['HumanEval/113', '881', '134', '784', 'HumanEval/121']","def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['HumanEval/113', '881', '134', '784', 'HumanEval/121', 'HumanEval/37', '594', '38', '797', 'HumanEval/104']","def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['HumanEval/122'],"def elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",0.0,entry point not found
122,HumanEval/122,5,normal,"['HumanEval/122', '916', '661', '42', '782']","def elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",0.0,entry point not found
122,HumanEval/122,10,normal,"['HumanEval/122', '916', '661', '42', '782', '270', '144', '777', '701', '398']","def elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",0.0,entry point not found
123,HumanEval/123,1,normal,['HumanEval/123'],"def odd_collatz(n):
    odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n / 2
        else:
            n = n * 3 + 1
        if n % 2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)",0.0,entry point not found
123,HumanEval/123,5,normal,"['HumanEval/123', '844', '907', '556', '781']","def odd_collatz(n):
    odd_collatz_sequence = [n]
    while n > 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = n * 3 + 1
        if n % 2 == 1:
            odd_collatz_sequence.append(int(n))
    return sorted(odd_collatz_sequence)",0.0,entry point not found
123,HumanEval/123,10,normal,"['HumanEval/123', '844', '907', '556', '781', '84', 'HumanEval/131', '86', '867', '122']","def odd_collatz(n):
    odd_numbers = [n]
    while n > 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = n * 3 + 1
        if n % 2 == 1:
            odd_numbers.append(n)
    return sorted(odd_numbers)",0.0,entry point not found
124,HumanEval/124,1,normal,['HumanEval/124'],"def valid_date(date):
    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and (day < 1 or day > 29):
            return False
    except:
        return False

    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['HumanEval/124', '191', '336', '866', '159']","from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['HumanEval/124', '191', '336', '866', '159', '820', '910', '455', '762', '396']","import re

def valid_date(date):
    try:
        month, day, year = map(int, date.split('-'))
        if month < 1 or month > 12:
            return False
        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:
            return False
        if month in [4, 6, 9, 11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29"":
            return False
        return True
    except ValueError:
        return False
    except:
        return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 12) (<string>, line 12)', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['HumanEval/125'],"def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return sum(1 for i in txt if i.islower() and ord(i)-ord('a')%2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,5,normal,"['HumanEval/125', '128', '862', '305', '570']","import re

def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return sum(1 for i in txt if i.islower() and ord(i)%2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,10,normal,"['HumanEval/125', '128', '862', '305', '570', '565', 'HumanEval/143', '73', '964', '79']","import re

def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['670'],"def is_sorted(lst):
    if len(lst) == 1:
        return True
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,5,normal,"['670', '680', 'HumanEval/57', '472', 'HumanEval/87']","def is_sorted(lst):
    return lst == sorted(lst) and len(lst) == len(set(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['670', '680', 'HumanEval/57', '472', 'HumanEval/87', 'HumanEval/149', 'HumanEval/34', 'HumanEval/90', 'HumanEval/33', '755']","def is_sorted(lst):
    return lst == sorted(lst) and len(set(lst)) == len(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"def intersection(interval1, interval2):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', 'HumanEval/75', 'HumanEval/78', 'HumanEval/59', 'HumanEval/39']","def intersection(interval1, interval2):
    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', 'HumanEval/75', 'HumanEval/78', 'HumanEval/59', 'HumanEval/39', 'HumanEval/96', '122', '685', '905', 'HumanEval/110']","def intersection(interval1, interval2):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['HumanEval/128'],"def prod_signs(arr):
    if not arr: return None
    sign = 1
    for num in arr:
        if num < 0:
            sign *= -1
    return sign * sum([abs(num) for num in arr])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['HumanEval/128', '25', '134', '144', 'HumanEval/131']","def prod_signs(arr):
    if not arr: return None
    signs = [1 if x >= 0 else -1 for x in arr]
    sign_product = 1
    for sign in signs:
        sign_product *= sign
    return sign_product * sum(abs(x) for x in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['HumanEval/128', '25', '134', '144', 'HumanEval/131', '798', '925', 'HumanEval/8', '270', '916']","def prod_signs(arr):
    if not arr:
        return None
    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]
    sign_product = 1
    for sign in signs:
        sign_product *= sign
    return sign_product * sum(abs(x) for x in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['HumanEval/129'],"from collections import deque

def Path(grid, k):
    n = len(grid)
    visited = [[False]*n for _ in range(n)]
    queue = deque([(i, j, [grid[i][j]]) for i in range(n) for j in range(n)])
    visited[i][j] = True
    min_path = []
    while len(min_path) < k:
        for _ in range(len(queue)):
            x, y, path = queue.popleft()
            if len(path) == k:
                if not min_path or path < min_path:
                    min_path = path
                continue
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                    queue.append((nx, ny, path + [grid[nx][ny]]]))
                    visited[nx][ny] = True
    return min_path",0.0,entry point not found
129,HumanEval/129,5,normal,"['HumanEval/129', '314', '506', '947', '923']","from collections import deque

def Path(grid, k):
    n = len(grid)
    visited = [[False]*n for _ in range(n)]
    queue = deque([(0, 0, [grid[0][0]])])
    visited[0][0] = True
    ans = []
    while queue:
        x, y, path = queue.popleft()
        if len(path) == k:
            ans = path
            break
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                visited[nx][ny] = True
                queue.append((nx, ny, path + [grid[nx][ny]]))
    return ans",0.0,entry point not found
129,HumanEval/129,10,normal,"['HumanEval/129', '314', '506', '947', '923', '409', '457', '528', '702', '50']","from collections import deque

def Path(grid, k):
    n = len(grid)
    visited = [[False]*n for _ in range(n)]
    queue = deque([(0, 0, [grid[0][0]])])
    visited[0][0] = True
    min_path = None

    while queue:
        x, y, path = queue.popleft()
        if len(path) == k:
            if min_path is None or path < min_path:
                min_path = path
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                visited[nx][ny] = True
                queue.append((nx, ny, path + [grid[nx][ny]]))

    return min_path",0.0,entry point not found
130,HumanEval/130,1,normal,['HumanEval/130'],"def tri(n):
    if n == 0:
        return [1]
    elif n == 1:
        return [1, 3]
    else:
        my_tri = [1, 3, 2]
        for i in range(3, n + 1):
            if i % 2 == 0:
                my_tri.append(i / 2 + 1)
            else:
                my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])
        return my_tri",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['HumanEval/130', '873', '231', '236', '147']","def tri(n):
    if n == 0:
        return [1]
    elif n == 1:
        return [1, 3]
    else:
        tri_sequence = [1, 3, 2]
        for i in range(3, n + 1):
            if i % 2 == 0:
                tri_sequence.append(i / 2 + 1)
            else:
                tri_sequence.append(tri_sequence[i - 2] + tri_sequence[i - 3] + (i + 1) / 2)
        return tri_sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['HumanEval/130', '873', '231', '236', '147', 'HumanEval/55', '84', 'HumanEval/63', '169', '86']","def tri(n):
    if n == 0:
        return [1]
    elif n == 1:
        return [1, 3]
    elif n == 2:
        return [1, 3, 2]
    else:
        tri_sequence = [1, 3, 2]
        for i in range(3, n + 1):
            if i % 2 == 0:
                tri_sequence.append(i / 2 + 1)
            else:
                tri_sequence.append(tri_sequence[i - 2] + tri_sequence[i - 3] + (i + 1) / 2)
        return tri_sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['HumanEval/131'],"def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2 == 1:
            product *= int(digit)
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['HumanEval/131', '711', '566', 'HumanEval/104', '830']","import math

def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2 == 1:
            product *= int(digit)
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['HumanEval/131', '711', '566', 'HumanEval/104', '830', '387', '781', '194', '556', '844']","def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2 == 1:
            product *= int(digit)
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['HumanEval/132'],"def is_nested(s):
    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(s)):
        if s[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '91', '737']","def is_nested(s):
    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(s)):
        if s[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['HumanEval/132', 'HumanEval/61', 'HumanEval/56', '91', '737', '396', '913', '823', 'HumanEval/38', 'HumanEval/82']","def is_nested(s):
    stack = []
    for c in s:
        if c == '[':
            stack.append(c)
        elif c == ']':
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['HumanEval/133'],"import math

def sum_squares_rounded_to_nearest_integer(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['HumanEval/133', 'HumanEval/142', '320', 'HumanEval/85', 'HumanEval/121']","import math

def func_0(lst):
    return [math.ceil(i)**2 for i in lst]",0.0,entry point not found
133,HumanEval/133,10,normal,"['HumanEval/133', 'HumanEval/142', '320', 'HumanEval/85', 'HumanEval/121', '105', '340', 'HumanEval/32', 'HumanEval/151', '398']","import math

def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['HumanEval/134'],"def func_0(txt):
    return len(txt.split(' ')[-1]) == 1 and 'a' <= txt.split(' ')[-1].lower() <= 'z'",0.0,entry point not found
134,HumanEval/134,5,normal,"['HumanEval/134', '210', 'HumanEval/10', '828', '913']","import re

def func_0(txt):
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False",0.0,entry point not found
134,HumanEval/134,10,normal,"['HumanEval/134', '210', 'HumanEval/10', '828', '913', '964', '79', '967', '165', '546']","import re

def func_0(txt):
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False",0.0,entry point not found
135,HumanEval/135,1,normal,['433'],"def func_0(arr, number):
    arr.sort()
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == number:
            return mid
        elif arr[mid] < number:
            left = mid + 1
        else:
            right = mid - 1
    return -1",0.0,entry point not found
135,HumanEval/135,5,normal,"['433', '550', 'HumanEval/109', '548', 'HumanEval/105']","def func_0(arr):
    max_index = 0
    for i in range(len(arr)):
        if arr[i] > arr[i+1]:
            max_index = i
    return max_index",0.0,entry point not found
135,HumanEval/135,10,normal,"['433', '550', 'HumanEval/109', '548', 'HumanEval/105', '763', 'HumanEval/116', '540', '323', '232']","def find_max(arr):
    max_val = float('-inf')
    max_index = -1
    for i in range(len(arr)):
        if arr[i] > max_val:
            max_val = arr[i]
            max_index = i
    return max_index",0.0,entry point not found
136,HumanEval/136,1,normal,['HumanEval/136'],"import re

def largest_smallest(lst):
    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)",0.0,entry point not found
136,HumanEval/136,5,normal,"['HumanEval/136', '457', '232', '418', '366']","import heapq

def func_0(lst):
    smallest = [x for x in lst if x < 0]
    largest = [x for x in lst if x > 0]
    return (max(smallest) if smallest else None, min(largest) if largest else None)",0.0,entry point not found
136,HumanEval/136,10,normal,"['HumanEval/136', '457', '232', '418', '366', '227', '496', '911', 'HumanEval/59', '472']","def largest_smallest(lst):
    negative = [x for x in lst if x < 0]
    positive = [x for x in lst if x > 0]
    return (max(negative) if negative else None, min(positive) if positive else None)",0.0,entry point not found
137,HumanEval/137,1,normal,['HumanEval/137'],"import re

def compare_values(a, b):
    if isinstance(a, str) and isinstance(b, str):
        a = a.replace(',', '.')
        b = b.replace(',', '.')
    if isinstance(a, str) or isinstance(b, str):
        return None
    if float(a) == float(b):
        return None
    return a if float(a) > float(b) else b",0.0,entry point not found
137,HumanEval/137,5,normal,"['HumanEval/137', '47', '309', '404', '891']","import re

def compare_variables(a, b):
    if isinstance(a, str) and isinstance(b, str):
        a = re.sub(',', '.', a)
        b = re.sub(',', '.', b)
    elif isinstance(a, str):
        a = re.sub(',', '.', a)
    elif isinstance(b, str):
        b = re.sub(',', '.', b)
    if a == b:
        return None
    elif float(a) > float(b):
        return a
    else:
        return b",0.0,entry point not found
137,HumanEval/137,10,normal,"['HumanEval/137', '47', '309', '404', '891', '126', '93', 'HumanEval/154', '218', 'HumanEval/13']","def compare_variables(a, b):
    if isinstance(a, str) and isinstance(b, str):
        a = a.replace(',', '.')
        b = b.replace(',', '.')
    elif isinstance(a, str):
        a = float(a.replace(',', '.'))
    elif isinstance(b, str):
        b = float(b.replace(',', '.'))
    if a == b:
        return None
    return a if a > b else b",0.0,entry point not found
138,HumanEval/138,1,normal,['134'],"def is_equal_sum_of_even_numbers(arr):
    def is_equal_sum(arr):
        even_sum = sum(num for num in arr if num % 2 == 0 else 0 for num in arr)
        return even_sum == sum(arr)
    
    return is_equal_sum(arr)",0.0,entry point not found
138,HumanEval/138,5,normal,"['134', '541', '481', '121', '547']","import math

def is_equal_sum(arr, n, p):
    _sum = sum(arr)
    if p == 1:
        if _sum % 2 == 0:
            return ""EVEN""
        else:
            return ""ODD""
    return ""EVEN""

def get_sum(n):
    sum = 0
    i = 1
    while i <= math.sqrt(n):
        if n % i == 0:
            if n / i == i:
            sum += i
        else:
            sum += i
            sum += n / i
        i += 1
    sum -= n
    return sum

def is_subset_sum(set, n, sum):
    if sum == 0:
        return True
    if n == 0:
        return False
    if set[n - 1] > sum:
        return is_subset_sum(set, n - 1, sum)
    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1]):
        return True
    return False

def check_triplet(A, n, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or n == 0 or sum < 0:
        return False
    return check_triplet(A, n - 1, sum - A[n - 1:",0.0,entry point not found
138,HumanEval/138,10,normal,"['134', '541', '481', '121', '547', '685', '448', '420', '212', '504']","def func_0(arr, n, p):
    _sum = 0
    for i in range(n): 
        _sum = _sum + arr[i] 
    if p == 1: 
        if _sum % 2 == 0: 
            return ""EVEN""
        else: 
            return ""ODD""
    return ""EVEN""",0.0,entry point not found
139,HumanEval/139,1,normal,['901'],"def func_0(n):
    def factorial(x):
        if x <= 2:
            return x
        i = x * 2
        factors = [number for number in range(x, 1, -1) if number * 2 > x]
        while True:
            for a in factors:
                if i % a!= 0:
                    i += n
                    break
                if (a == factors[-1] and i % a == 0):
                    return i

    result = 1
    for i in range(1, n+1):
        result *= func_0(i)
    return result",0.0,entry point not found
139,HumanEval/139,5,normal,"['901', '905', '873', 'HumanEval/55', '35']","def brazilian_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result",0.0,entry point not found
139,HumanEval/139,10,normal,"['901', '905', '873', 'HumanEval/55', '35', 'HumanEval/41', '267', '555', '260', '735']","def brazilian_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result",0.0,entry point not found
140,HumanEval/140,1,normal,['310'],"import re

def func_0(str1):
    str1 = re.sub(' +','', str1)
    return tuple(x for x in str1.split() if not x.isspace())",0.0,entry point not found
140,HumanEval/140,5,normal,"['310', '538', '631', '628', '933']","import re

def func_0(text):
    text = re.sub(' +', '-', text)  # replace multiple spaces with a single dash
    text = text.strip()  # remove leading and trailing spaces
    return text",0.0,entry point not found
140,HumanEval/140,10,normal,"['310', '538', '631', '628', '933', 'HumanEval/51', 'HumanEval/140', '965', '73', '800']","import re

def func_0(text):
    text = re.sub(' +', '-', text)
    return text",0.0,entry point not found
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split('.')
    if len(lst)!= 2:
        return False
    if not lst[1] not in suf:
        return False
    if len(lst[0]) == 0:
        return False
    if not lst[0][0].isalpha():
        return False
    t = len([x for x in lst[0] if x.isdigit()]
    if t > 3:
        return False
    return True",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 12)"", 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '737', '396', 'HumanEval/134']","def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split('.')
    if len(lst)!= 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '737', '396', 'HumanEval/134', '823', 'HumanEval/10', '964', '79', '967']","import re

def func_0(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split('.')
    if len(lst)!= 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'",0.0,entry point not found
142,HumanEval/142,1,normal,['HumanEval/142'],"def func_0(lst):
    result = []
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i % 3!= 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)",0.0,entry point not found
142,HumanEval/142,5,normal,"['HumanEval/142', '340', '142', '320', 'HumanEval/121']","def func_0(lst):
    result = []
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3!= 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)",0.0,entry point not found
142,HumanEval/142,10,normal,"['HumanEval/142', '340', '142', '320', 'HumanEval/121', 'HumanEval/85', 'HumanEval/151', '105', 'HumanEval/133', '916']","def func_0(lst):
    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3!= 0 else x for i, x in enumerate(lst)])",0.0,entry point not found
143,HumanEval/143,1,normal,['HumanEval/143'],"def func_0(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    new_lst = []
    for word in sentence.split():
        if is_prime(len(word)):
            new_lst.append(word)
    return "" "".join(new_lst)",0.0,entry point not found
143,HumanEval/143,5,normal,"['HumanEval/143', '897', '305', '128', '570']","import math

def func_0(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        sqrt_n = math.isqrt(n)
        for i in range(3, sqrt_n + 1, 2):
            if n % i == 0:
                return False
        return True

    new_lst = []
    for word in sentence.split():
        if is_prime(len(word)):
            new_lst.append(word)
    return "" "".join(new_lst)",0.0,entry point not found
143,HumanEval/143,10,normal,"['HumanEval/143', '897', '305', '128', '570', 'HumanEval/91', '862', '565', 'HumanEval/158', 'HumanEval/118']","def func_0(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    return''.join(word for word in sentence.split() if is_prime(len(word)))",0.0,entry point not found
144,HumanEval/144,1,normal,['HumanEval/144'],"def simplify(x, n):
    a, b = map(int, x.split('/'))
    c, d = map(int, n.split('/'))
    return a * d == b * c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['HumanEval/144', 'HumanEval/76', '887', '148', 'HumanEval/39']","def is_prime(n):
    if n < 2:
        return False
    for k in range(2, min(int(n**0.5) + 1, n - 1)):
        if n % k == 0:
            return False
    return True

def func_0(x, n):
    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denominator = int(b) * int(d)
    return (numerator / denominator == int(numerator / denominator))",0.0,entry point not found
144,HumanEval/144,10,normal,"['HumanEval/144', 'HumanEval/76', '887', '148', 'HumanEval/39', '600', '485', '803', '711', '968']","def func_0(x, n):
    a, b = map(int, x.split(""/""))
    c, d = map(int, n.split(""/""))
    return (a * c) % (b * d) == 0",0.0,entry point not found
145,HumanEval/145,1,normal,['HumanEval/145'],"def sort_list(nums):
    def get_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(abs(n))]
        n[0] = n[0] * neg
        return sum(n)
    
    return sorted(nums, key=get_sum)",0.0,entry point not found
145,HumanEval/145,5,normal,"['HumanEval/145', '749', '915', '12', '308']","def sort_list(nums):
    return sorted(nums, key=lambda x: (abs(x), x if x >= 0 else -x))",0.0,entry point not found
145,HumanEval/145,10,normal,"['HumanEval/145', '749', '915', '12', '308', '670', '680', '108', '516', '896']","def sort_list(nums):
    return sorted(nums, key=lambda x: (abs(x), x if x >= 0 else -x))",0.0,entry point not found
146,HumanEval/146,1,normal,['426'],"def func_0(nums):
    return sum(1 for num in nums if num > 0 and str(num)[0] in '13579' and str(num)[-1] in '13579')",0.0,entry point not found
146,HumanEval/146,5,normal,"['426', '258', 'HumanEval/146', '41', '433']","def func_0(nums):
    count = 0
    odd_digits = (1, 3, 5, 7, 9)
    for num in nums:
        if num > 10:
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
    return count",0.0,entry point not found
146,HumanEval/146,10,normal,"['426', '258', 'HumanEval/146', '41', '433', '697', '141', '883', '817', 'HumanEval/155']","def func_0(nums):
    count = 0
    for num in nums:
        if num > 10:
            number_as_string = str(abs(num))
            if number_as_string[0] in ['1', '3', '5', '7', '9'] and number_as_string[-1] in ['1', '3', '5', '7', '9']:
                count += 1
    return count",0.0,entry point not found
147,HumanEval/147,1,normal,['HumanEval/130'],"def func_0(n):
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i // 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) // 2)
    return my_tri

def func_1(n):
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i // 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) // 2)
    return my_tri

def func_2(n):
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i // 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) // 2)
    return my_tri

def func_3(n):
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i // 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) // 2:
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i // 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) // 2)
    return my_tri

def func_4(n):
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i // 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (",0.0,entry point not found
147,HumanEval/147,5,normal,"['HumanEval/130', '231', '392', 'HumanEval/59', '60']","def func_0(n):
    my_tri = [1]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i // 2 + 1)
        else:
            my_tri.append(my_tri[i - 2] + (i + 3) // 2)
    return sum(1 for i in range(len(my_tri)) for j in range(i + 1, len(my_tri)) for k in range(j + 1, len(my_tri)) if (my_tri[i] + my_tri[j] + my_tri[k]) % 3 == 0)",0.0,entry point not found
147,HumanEval/147,10,normal,"['HumanEval/130', '231', '392', 'HumanEval/59', '60', '149', '122', '188', '32', '548']","def func_0(n):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, int(k ** 0.5) + 1):
            if k % i == 0:
                return False
        return True

    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest",0.0,entry point not found
148,HumanEval/148,1,normal,['HumanEval/148'],"import re

def find_planets_between(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    planet1_index = sorted(planet_names.index(planet1)
    planet2_index = sorted(planet_names.index(planet2)
    if planet1_index < planet2_index:
        return sorted(planet_names[planet1_index + 1 : planet2_index])
    else:
        return sorted(planet_names[planet2_index + 1 : planet1_index])",0.0,entry point not found
148,HumanEval/148,5,normal,"['HumanEval/148', '414', '282', '358', '589']","def get_planets_between(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return []
    planet1_index = planets.index(planet1)
    planet2_index = planets.index(planet2)
    return sorted(planets[planet1_index + 1: planet2_index])

def get_planets_between(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return []
    planet1_index = planets.index(planet1)
    planet2_index = planets.index(planet2)
    return sorted(planets[planet1_index + 1: planet2_index])

def get_planets_between(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return []
    planet1_index = planets.index(planet1)
    planet2_index = planets.index(planet2)
    return sorted(planets[planet1_index + 1: planet2_index])

def get_planets_between(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return []
    planet1_index = planets.index(planet1)
    planet2_index = planets.index(planet2)
    return sorted(planets[planet1_index + 1: 37%) 

def get_planets_between(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return []
    planet1",0.0,entry point not found
148,HumanEval/148,10,normal,"['HumanEval/148', '414', '282', '358', '589', '161', '682', '943', '431', '618']","def find_planets(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return []
    planet1_index = planets.index(planet1)
    planet2_index = planets.index(planet2)
    if planet1_index < planet2_index:
        return sorted(planets[planet1_index + 1: planet2_index])
    else:
        return sorted(planets[planet2_index + 1: planet1_index])",0.0,entry point not found
149,HumanEval/149,1,normal,['HumanEval/113'],"def func_0(lst):
    return [f""the number of odd elements {n} in the string {s}"" for s in lst for n in [sum(int(d) % 2 == 1 for d in s]: 
    return [f""the number of odd elements {n} in the string {s}""]",0.0,entry point not found
149,HumanEval/149,5,normal,"['HumanEval/113', '340', '949', 'HumanEval/47', 'HumanEval/121']","def func_0(lst):
    return [x for x in lst if sum(int(digit)%2==1 for digit in str(x))]",0.0,entry point not found
149,HumanEval/149,10,normal,"['HumanEval/113', '340', '949', 'HumanEval/47', 'HumanEval/121', '37', 'HumanEval/34', '12', 'HumanEval/158', 'HumanEval/145']","def func_0(lst):
    return [str(sum(int(d)%2==1 for d in arr)) + ""n the str"" + str(sum(int(d)%2==1 for d in arr) + "" of the "" + str(sum(int(d)%2==1 for d in arr)) + ""nput."" for arr in lst]",0.0,entry point not found
150,HumanEval/150,1,normal,['HumanEval/150'],"def x_or_y(n, x, y):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5 + 1):
            if num % i == 0:
                return False
        return True

    if is_prime(n):
        return x
    else:
        return y",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 5)', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['HumanEval/150', 'HumanEval/96', 'HumanEval/39', '685', '663']","def func_0(n, x, y):
    if n % 2 == 0:
        return y
    for i in range(3, int(n**0.5) + 1, 2):
        if n % i == 0:
            return y
    return x",0.0,entry point not found
150,HumanEval/150,10,normal,"['HumanEval/150', 'HumanEval/96', 'HumanEval/39', '685', '663', '260', '122', 'HumanEval/75', 'HumanEval/78', 'HumanEval/59']","def func_0(n, x, y):
    if n % 2 == 0:
        return y
    for i in range(3, n):
        if n % i == 0:
            return y
            break
    else:
        return x",0.0,entry point not found
151,HumanEval/151,1,normal,['HumanEval/113'],"import re

def sum_of_squares(lst):
    return [sum(int(d)**2 for d in lst if d.isdigit() and int(d) % 2 == 1]",0.0,entry point not found
151,HumanEval/151,5,normal,"['HumanEval/113', 'HumanEval/85', 'HumanEval/133', 'HumanEval/142', 'HumanEval/121']","import math

def sum_of_squares(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i % 2 == 0)",0.0,entry point not found
151,HumanEval/151,10,normal,"['HumanEval/113', 'HumanEval/85', 'HumanEval/133', 'HumanEval/142', 'HumanEval/121', 'HumanEval/151', '610', '784', '881', '594']","def double_the_difference(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['HumanEval/152'],"def compare_scores(game, guesses):
    return [abs(x - y) for x, y in zip(game, guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['HumanEval/152', '433', 'HumanEval/0', '431', '763']","def compare_scores(game, guesses):
    return [abs(x-y) for x,y in zip(game,guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['HumanEval/152', '433', 'HumanEval/0', '431', '763', '890', '161', '627', '473', '650']","def compare_scores(game, guesses):
    return [abs(x-y) for x,y in zip(game, guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/153'],"def strong_extension(class_name, extensions):
    max_val = float('-inf')
    strongest = ''
    for extension in extensions:
        val = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())
        if val > max_val:
            max_val = val
            strongest = extension
    return class_name + '.' + strongest",0.0,entry point not found
153,HumanEval/153,5,normal,"['HumanEval/153', '232', 'HumanEval/12', 'HumanEval/6', 'HumanEval/29']","def strongest_extension(class_name, extensions):
    strongest = extensions[0]
    for s in extensions:
        val = sum(1 for x in s if x.isupper()) - sum(1 for x in s if x.islower()))
        if val > sum(1 for x in strongest if x.isupper()) - sum(1 for x in strongest if x.islower()):
            strongest = s

    ans = class_name + ""."" + strongest
    return ans",0.0,entry point not found
153,HumanEval/153,10,normal,"['HumanEval/153', '232', 'HumanEval/12', 'HumanEval/6', 'HumanEval/29', '562', 'HumanEval/14', '523', '182', '911']","def strongest_extension(class_name, extensions):
    def calculate_strength(extension):
        uppercase = sum(1 for char in extension if char.isupper())
        lowercase = sum(1 for char in extension if char.islower())
        return uppercase - lowercase

    strongest = extensions[0]
    max_strength = calculate_strength(strongest)
    for extension in extensions:
        strength = calculate_strength(extension)
        if strength > max_strength:
            strongest = extension
            max_strength = strength

    return class_name + ""."" + strongest",0.0,entry point not found
154,HumanEval/154,1,normal,['897'],"def Chenpattern_check(sentence, word):
    s = sentence.split()
    for i in s:
        if (i == word):
            return True
    return False",0.0,entry point not found
154,HumanEval/154,5,normal,"['897', '91', '823', '964', 'HumanEval/118']","import re

def func_0(sentence, word):
    s = sentence.split("" "")
    for i in s:
        if (i == word):
            return True
    return False",0.0,entry point not found
154,HumanEval/154,10,normal,"['897', '91', '823', '964', 'HumanEval/118', '871', '79', '532', '874', 'HumanEval/10']","import re

def func_0(sentence, word):
    s = sentence.split("" "")
    for i in s:
        if (i == word):
            return True
    return False",0.0,entry point not found
155,HumanEval/155,1,normal,['HumanEval/155'],"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['HumanEval/155', 'HumanEval/146', '781', '426', '41']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['HumanEval/155', 'HumanEval/146', '781', '426', '41', 'HumanEval/131', 'HumanEval/104', '387', '844', '867']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['958'],"def int_to_mini_roman(num):
    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    roman_num = ''
    i = 0
    while num > 0:
        for _ in range(num // val[i]):
            roman_num += syb[i]
            num -= val[i]
        i += 1)
    return roman_num",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 10)"", 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['958', 'HumanEval/156', '116', '100', '583']","def int_to_mini_roman(number):
    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    roman_num = ''
    i = 0
    while number > 0:
        for _ in range(number // val[i]):
            roman_num += syb[i]
            number -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['958', 'HumanEval/156', '116', '100', '583', '909', 'HumanEval/2', '749', 'HumanEval/15', '518']","def int_to_mini_roman(number):
    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    syb = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    i = 0
    roman_num = ''
    while num > 0:
        for _ in range(num // val[i]):
            roman_num += syb[i]
            num -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['826'],"import math

def right_angled_triangle(a, b, c):
    sqa = a**2
    sqb = b**2
    sqc = c**2
    if (sqa == sqb + sqc or sqb == sqa + sqc or sqc == sqa + sqb):
        return ""Right-angled Triangle""
    elif (sqa > sqb + sqc or sqb > sqa + sqc or sqc > sqa + sqb):
        return ""Obtuse-angled Triangle""
    else:
        return ""Acute-angled Triangle""",0.0,entry point not found
157,HumanEval/157,5,normal,"['826', '176', 'HumanEval/71', '153', '359']","import math

def func_0(a, b, c):
    if a <= 0 or b <= 0 or c <= 0:
        return ""Invalid input: sides must be positive""
    
    # Check if the sides can form a triangle
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    
    # Calculate the semi-perimeter
    s = (a + b + c) / 2
    
    # Calculate the area using Heron's formula
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    area = round(area, 2)
    
    # Determine the type of triangle
    if math.isclose(area, math.sqrt(a * b), rel_tol=1e-9):
        return ""Right-angled Triangle""
    elif area > math.sqrt(a * b):
        return ""Obtuse-angled Triangle""
    else:
        return ""Acute-angled Triangle""",0.0,entry point not found
157,HumanEval/157,10,normal,"['826', '176', 'HumanEval/71', '153', '359', '850', '430', '150', 'HumanEval/157', '334']","import math

def right_angled_triangle(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return False
    s = (a + b + c) / 2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    area = round(area, 2)
    return area",0.0,entry point not found
158,HumanEval/158,1,normal,['HumanEval/158'],"def find_max(words):
    max_len = 0
    max_word = """"
    for word in words:
        if len(word) > max_len:
            max_len = len(word)
            max_word = word
    return max_word",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['HumanEval/158', 'HumanEval/12', '862', '13', '565']","from collections import Counter
import re

def find_max(words):
    word_counts = Counter(words)
    top_word = word_counts.most_common(1)[0]
    return top_word[0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['HumanEval/158', 'HumanEval/12', '862', '13', '565', '305', '232', '128', '247', '90']","def find_max(words):
    if not words:
        return None
    max_len = max(len(word) for word in words)
    max_word = max(word for word in words if len(word) == max_len)
    return max_word",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['HumanEval/159'],"def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['HumanEval/159', '585', '123', '289', '408']","def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['HumanEval/159', '585', '123', '289', '408', '385', '912', 'HumanEval/131', '365', '31']","def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['HumanEval/160'],"def do_al():
    operator = ['+', '-', '*', '/', '//']
    operand = [1, 2, 3]
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",0.0,entry point not found
160,HumanEval/160,5,normal,"['HumanEval/160', '589', '503', 'HumanEval/32', 'HumanEval/157']","def do_al(a, b):
    expression = str(b[0])
    for oprt, oprn in zip(a, b[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)",0.0,entry point not found
160,HumanEval/160,10,normal,"['HumanEval/160', '589', '503', 'HumanEval/32', 'HumanEval/157', '690', 'HumanEval/3', 'HumanEval/11', '610', '723']","def do_al(a, b):
    expression = str(b[0])
    for oprt, oprn in zip(a, b[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",0.0,entry point not found
161,HumanEval/161,1,normal,['HumanEval/89'],"def func_0(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c.isalpha():
            out += d[(d.index(c.lower())+2) % 26]
        else:
            out += c
    return out",0.0,entry point not found
161,HumanEval/161,5,normal,"['HumanEval/89', 'HumanEval/66', '557', 'HumanEval/101', '182']","import re

def func_0(s):
    if not s:
        return 0
    return sum(ord(char) for char in s if char.isupper())",0.0,entry point not found
161,HumanEval/161,10,normal,"['HumanEval/89', 'HumanEval/66', '557', 'HumanEval/101', '182', 'HumanEval/64', 'HumanEval/112', 'HumanEval/27', '828', '386']","import re

def func_0(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2)%26]
        else:
            out += c
    return out",0.0,entry point not found
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def func_0(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",0.0,entry point not found
162,HumanEval/162,5,normal,"['HumanEval/162', '933', '330', '628', '319']","import hashlib
import re

def func_0(text):
    if text:
        return hashlib.md5(text.encode('ascii')).hexdigest()
    else:
        return None",0.0,entry point not found
162,HumanEval/162,10,normal,"['HumanEval/162', '933', '330', '628', '319', '965', '900', '631', '73', '217']","import hashlib
import re

def func_0(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",0.0,entry point not found
163,HumanEval/163,1,normal,['HumanEval/163'],"def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,5,normal,"['HumanEval/163', '589', '47', '345', '218']","import math

def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,10,normal,"['HumanEval/163', '589', '47', '345', '218', '503', '687', 'HumanEval/13', '690', '126']","import math

def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))
    return [i for i in range(lower, upper+1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
