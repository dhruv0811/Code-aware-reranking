query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(lst: List[float], threshold: float) -> bool:
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if abs(lst[i] - lst[j]) < threshold:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', 'HumanEval/3', '26']","from typing import List

def has_close_elements(var_0: List[float], threshold: float) -> bool:
    var_1 = len(var_0)
    for i in range(var_1):
        for j in range(i + 1, var_1):
            if abs(var_0[i] - var_0[j]) < threshold:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', 'HumanEval/3', '26', '89', '942', 'HumanEval/127', '284', '433']","from typing import List

def has_close_elements(var_0: List[float], threshold: float) -> bool:
    for i in range(len(var_0)):
        for j in range(i + 1, len(var_0)):
            if abs(var_0[i] - var_0[j]) < threshold:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/1'],"from typing import List

def separate_paren_groups(s: str) -> List[str]:
    result = []
    current_group = []
    count = 0
    for char in s:
        if char == '(':
            count += 1
            current_group.append(char)
        elif char == ')':
            count -= 1
            current_group.append(char)
            if count == 0:
                result.append(''.join(current_group))
                current_group.clear()
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/1', 'HumanEval/6', '640', '15', '956']","from typing import List
import re

def separate_paren_groups(s: str) -> List[str]:
    groups = []
    group = []
    count = 0
    for char in s:
        if char == '(':
            count += 1
            group.append(char)
        elif char == ')':
            count -= 1
            group.append(char)
            if count == 0:
                groups.append(''.join(group))
                group.clear()
    return groups",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,10,normal,"['HumanEval/1', 'HumanEval/6', '640', '15', '956', '538', '374', 'HumanEval/17', '877', '693']","from typing import List
import re

def separate_paren_groups(s: str) -> List[str]:
    result = []
    temp = ''
    count = 0
    for char in s:
        if char == '(':
            count += 1
            temp += char
        elif char == ')':
            count -= 1
            temp += char
            if count == 0:
                result.append(temp)
                temp = ''
        else:
            temp += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/2'],"def truncate_number(var_0: float) -> float:
    return var_0 - int(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/2', 'HumanEval/99', '435', '99', '89']","def truncate_number(var_0: float) -> float:
    return var_0 - int(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/2', 'HumanEval/99', '435', '99', '89', '479', '692', '33', '24', 'HumanEval/79']","def truncate_number(var_0: float) -> float:
    return var_0 - int(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/0', '113', 'HumanEval/32']","from typing import List

def below_zero(operations: List[int]) -> bool:
    total = 0
    for num in operations:
        total += num
        if total < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/0', '113', 'HumanEval/32', '477', 'HumanEval/40', 'HumanEval/43', '69', 'HumanEval/94']","def below_zero(operations):
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['HumanEval/4'],"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['HumanEval/4', '717', '145', 'HumanEval/21', 'HumanEval/20']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['HumanEval/4', '717', '145', 'HumanEval/21', 'HumanEval/20', 'HumanEval/47', '63', 'HumanEval/103', '622', '664']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List

def inters(var_0: List[int], var_1: int) -> List[int]:
    if not var_0:
        return []
    var_2 = []
    for var_3 in var_0[:-1]:
        var_2.append(var_3)
        var_2.append(var_1)
    var_2.append(var_0[-1])
    return var_2",0.0,entry point not found
5,HumanEval/5,5,normal,"['HumanEval/5', '578', '251', '503', 'HumanEval/25']","from typing import List

def intersperse(var_0: List[int], var_1: int) -> List[int]:
    if not var_0:
        return []
    var_2 = []
    for var_3 in var_0[:-1]:
        var_2.append(var_3)
        var_2.append(var_1)
    var_2.append(var_0[-1])
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', '578', '251', '503', 'HumanEval/25', '500', 'HumanEval/32', 'HumanEval/28', '621', 'HumanEval/20']","from typing import List

def intersperse(var_0: List[int], var_1: int) -> List[int]:
    if not var_0:
        return []
    var_2 = []
    for var_3 in var_0[:-1]:
        var_2.append(var_3)
        var_2.append(var_1)
    var_2.append(var_0[-1])
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_nested_parens(var_0: str) -> List[int]:
    def parse_paren_group(var_1):
        var_2 = 0
        var_3 = 0
        for var_4 in var_1:
            if var_4 == '(':
                var_2 += 1
                var_3 = max(var_2, var_3)
            else:
                var_2 -= 1
        return var_3
    return [parse_paren_group(var_2) for var_3 in var_0.split(' ') if var_3]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,5,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/119', 'HumanEval/17']","from typing import List

def parse_nested_parens(s: str) -> List[int]:
    def parse_paren_group(group):
        depth = 0
        max_depth = 0
        for char in group:
            if char == '(':
                depth += 1
                max_depth = max(max_depth, depth)
            else:
                depth -= 1
        return max_depth
    return [parse_paren_group(group) for group in s.split() if group]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,10,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/119', 'HumanEval/17', '877', '538', 'HumanEval/61', '640', 'HumanEval/56']","from typing import List

def parse_nested_parens(var_0: str) -> List[int]:
    def parse_paren_group(var_1):
        var_2 = 0
        var_3 = 0
        for var_4 in var_1:
            if var_4 == '(':
                var_2 += 1
                var_3 = max(var_2, var_3)
            else:
                var_2 -= 1
        return var_3
    return [parse_paren_group(x) for x in var_0.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/22', '823', '456']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/22', '823', '456', '91', '27', 'HumanEval/11', '18', '118']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple

def sum_product(var_0: List[int]) -> Tuple[int, int]:
    var_1 = 0
    var_2 = 1
    for var_3 in var_0:
        var_1 += var_3
        var_2 *= var_3
    return (var_1, var_2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', '514', '65', '796', '728']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_of_numbers = 0
    product_of_numbers = 1
    for number in numbers:
        sum_of_numbers += number
        product_of_numbers *= number
    return sum_of_numbers, product_of_numbers",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', '514', '65', '796', '728', 'HumanEval/60', '170', '649', '798', 'HumanEval/22']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_of_numbers = 0
    product_of_numbers = 1
    for number in numbers:
        sum_of_numbers += number
        product_of_numbers *= number
    return sum_of_numbers, product_of_numbers",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List

def closest_max(var_0: List[int]) -> List[int]:
    var_1 = []
    var_2 = None
    for var_3 in var_0:
        if var_2 is None:
            var_2 = var_3
        else:
            var_2 = max(var_2, var_3)
        var_1.append(var_2)
    return var_1",0.0,entry point not found
9,HumanEval/9,5,normal,"['HumanEval/9', 'HumanEval/35', '259', 'HumanEval/163', 'HumanEval/147']","from typing import List

def rolling_max(nums: List[int]) -> List[int]:
    max_so_far = float('-inf')
    result = []
    
    for num in nums:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
        
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', 'HumanEval/35', '259', 'HumanEval/163', 'HumanEval/147', '805', '393', '130', 'HumanEval/12', '971']","from typing import List

def rolling_max(var_0: List[int]) -> List[int]:
    var_1 = None
    var_2 = []
    for var_3 in var_0:
        if var_1 is None:
            var_1 = var_3
        else:
            var_1 = max(var_1, var_3)
        var_2.append(var_1)
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def make_palindrome(string: str) -> str:
    if not string:
        return ''
    postfix = ''
    for char in reversed(string):
        postfix = char + postfix
        if postfix == postfix[::-1]:
            break
    return string + postfix",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', '909']","def make_palindrome(s: str) -> str:
    rev_s = s[::-1]
    for i in range(len(s)):
        if s.startswith(rev_s[i:]):
            return s + rev_s[i:]
    return s + rev_s",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', '909', 'HumanEval/107', '100', '364', '823', '53']","def is_palindrome(var_0: str) -> bool:
    return var_0 == var_0[::-1]

def make_palindrome(var_0: str) -> str:
    if not var_0:
        return ''
    var_1 = 0
    while not is_palindrome(var_0[var_1:]):
        var_1 += 1
    return var_0 + var_0[:var_1][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"from typing import List

def string_xor(var_0: str, var_1: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(var_0, var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', '399', '456', '364', '226']","def string_xor(var_0: str, var_1: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(var_0, var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', '399', '456', '364', '226', '192', 'HumanEval/78', '310', '538', 'HumanEval/7']","from typing import List

def string_xor(var_0: str, var_1: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(var_0, var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_len = max(len(s) for s in strings)
    return next(s for s in strings if len(s) == max_len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', '393', '207', 'HumanEval/153', 'HumanEval/9']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_len = max(len(s) for s in strings)
    return next(s for s in strings if len(s) == max_len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', '393', '207', 'HumanEval/153', 'HumanEval/9', '128', 'HumanEval/6', 'HumanEval/7', 'HumanEval/136', 'HumanEval/11']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_len = max((len(x) for x in strings))
    for s in strings:
        if len(s) == max_len:
            return s",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['HumanEval/13'],"import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['HumanEval/13', '498', '45', '339', '151']","import math

def greatest_common_divisor(a, b):
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['HumanEval/13', '498', '45', '339', '151', '781', '681', 'HumanEval/24', '687', '96']","import math

def greatest_common_divisor(a, b):
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/14'],"from typing import List

def all_prefixes(var_0: str) -> List[str]:
    var_1 = []
    for var_2 in range(len(var_0) + 1):
        var_1.append(var_0[:var_2])
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/7']","from typing import List

def all_prefixes(var_0: str) -> List[str]:
    return [var_0[:var_2 + 1] for var_2 in range(len(var_0))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/7', '456', '374', 'HumanEval/28', 'HumanEval/6', '207']","def all_prefixes(var_0: str) -> List[str]:
    return [var_0[:var_1 + 1] for var_1 in range(len(var_0))]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['HumanEval/15'],"def string_sequence(var_0: int) -> str:
    return''.join([str(x) for x in range(var_0 + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,5,normal,"['HumanEval/15', '785', '132', '552', '39']","def string_sequence(n: int) -> str:
    return''.join([str(x) for x in range(n + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,10,normal,"['HumanEval/15', '785', '132', '552', '39', '84', '542', '310', '749', '538']","def string_sequence(n: int) -> str:
    return''.join([str(x) for x in range(n + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['HumanEval/16'],"def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['HumanEval/16', '684', '352', '666', '165']","def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['HumanEval/16', '684', '352', '666', '165', '238', '813', '523', '242', '61']","def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"from typing import List

def parse_music(music_string: str) -> List[int]:
    music_dict = {'o': 4, 'o|': 2, '.|': 1}
    return [music_dict.get(note, 0) for note in music_string.split() if note]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,5,normal,"['HumanEval/17', '686', 'HumanEval/6', '785', '226']","from typing import List

def music_string(var_0: str) -> List[int]:
    var_1 = {'o': 4, 'o|': 2, '.|': 1}
    return [var_1[x] for x in var_0.split() if x in var_1]",0.0,entry point not found
17,HumanEval/17,10,normal,"['HumanEval/17', '686', 'HumanEval/6', '785', '226', '40', '192', '18', 'HumanEval/1', '238']","from typing import List

def parse_music(music_string: str) -> List[int]:
    music_dict = {'o': 4, 'o|': 2, '.|': 1}
    return [music_dict[x] for x in music_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['HumanEval/18'],"def how_many_times(string, substring):
    return string.count(substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['HumanEval/18', '238', '61', '773', '684']","def how_many_times(string, substring):
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['HumanEval/18', '238', '61', '773', '684', '207', '91', '192', '30', '338']","def how_many_times(string, substring):
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import Dict

def sort_numbers(numbers: str) -> str:
    num_dict: Dict[str, int] = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted([num_dict[word] for word in numbers.split(' ')], key=lambda x: x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', '749', '37', '877', 'HumanEval/105']","def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted([num_dict[x] for x in numbers.split(' ')]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', '749', '37', '877', 'HumanEval/105', '705', '516', 'HumanEval/70', 'HumanEval/145', '104']","from typing import List, Dict

def sort_numbers(numbers: str) -> str:
    num_dict: Dict[str, int] = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted([num_dict[x] for x in numbers.split(' ')])",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 5)"", 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    if len(numbers) < 2:
        raise ValueError(""List must contain at least two elements"")
    numbers.sort()
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(numbers) - 1):
        diff = numbers[i+1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i+1])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,5,normal,"['HumanEval/20', '89', 'HumanEval/99', 'HumanEval/0', 'HumanEval/19']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    if len(numbers) < 2:
        raise ValueError(""List must contain at least two elements"")
    numbers.sort()
    closest_pair = (numbers[0], numbers[1])
    min_diff = abs(numbers[0] - numbers[1])
    for i in range(1, len(numbers) - 1):
        diff = abs(numbers[i] - numbers[i + 1])
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,10,normal,"['HumanEval/20', '89', 'HumanEval/99', 'HumanEval/0', 'HumanEval/19', '304', 'HumanEval/136', '259', '408', '898']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            diff = abs(numbers[i] - numbers[j])
            if diff < min_diff:
                min_diff = diff
                closest_pair = (numbers[i], numbers[j])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers])",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 6)"", 'completion_id': 0})]})"
21,HumanEval/21,5,normal,"['HumanEval/21', '919', '726', '673', 'HumanEval/25']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,10,normal,"['HumanEval/21', '919', '726', '673', 'HumanEval/25', '117', 'HumanEval/156', '708', '205', '98']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,5,normal,"['HumanEval/22', '41', 'HumanEval/7', '277', 'HumanEval/29']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,10,normal,"['HumanEval/22', '41', 'HumanEval/7', '277', 'HumanEval/29', '722', 'HumanEval/3', 'HumanEval/26', 'HumanEval/136', '426']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['HumanEval/23'],"def strlen(var_0: str) -> int:
    return len(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['HumanEval/23', '238', '764', '813', 'HumanEval/15']","def strlen(var_0: str) -> int:
    return len(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['HumanEval/23', '238', '764', '813', 'HumanEval/15', '868', '684', '192', 'HumanEval/105', '83']","def strlen(var_0: str) -> int:
    return len(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['HumanEval/24'],"import math

def largest_divisor(n: int) -> int:
    return n // math.gcd(n, 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['HumanEval/24', '96', '681', '339', 'HumanEval/13']","def largest_divisor(n):
    for i in reversed(range(1, n)):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['HumanEval/24', '96', '681', '339', 'HumanEval/13', '781', '483', '745', 'HumanEval/136', 'HumanEval/59']","import math

def largest_divisor(var_0: int) -> int:
    for var_1 in reversed(range(1, var_0)):
        if var_0 % var_1 == 0:
            return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/25'],"from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,5,normal,"['HumanEval/25', '32', 'HumanEval/59', 'HumanEval/5', 'HumanEval/39']","def factorize(n: int) -> list:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,10,normal,"['HumanEval/25', '32', 'HumanEval/59', 'HumanEval/5', 'HumanEval/39', 'HumanEval/75', '483', 'HumanEval/26', '726', '919']","from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List

def remove_duplicates(var_0: List[int]) -> List[int]:
    var_1 = set()
    return [n for var_2 in var_0 if not (var_2 in var_1 or var_1.add(var_2))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,5,normal,"['HumanEval/26', '932', '712', '674', '27']","from collections import Counter

def remove_duplicates(var_0):
    var_1 = Counter(var_0)
    return [n for n in var_0 if var_1[n] <= 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,10,normal,"['HumanEval/26', '932', '712', '674', '27', 'HumanEval/22', '161', '196', '22', 'HumanEval/34']","from typing import List
import collections
import re
import itertools
from collections import OrderedDict
import re

def remove_duplicates(var_0: List[int]) -> List[int]:
    return [n for n, count in collections.Counter(var_0).items() if count <= 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def flip_case(var_0: str) -> str:
    return var_0.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '364', '877', '917']","def flip_case(var_0: str) -> str:
    return var_0.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '364', '877', '917', '478', '495', '459', '374', '604']","import re

def flip_case(var_0: str) -> str:
    return var_0.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', '213', '500', '206', '390']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,10,normal,"['HumanEval/28', '213', '500', '206', '390', '538', '421', 'HumanEval/14', '943', 'HumanEval/11']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/22', '277']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/22', '277', '861', '456', 'HumanEval/26', '27', '181']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/30'],"def get_positive(lst):
    return [i for i in lst if i > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,5,normal,"['HumanEval/30', '870', '329', '442', '189']","def get_positive(var_0: list):
    return [e for e in var_0 if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,10,normal,"['HumanEval/30', '870', '329', '442', '189', '41', '184', 'HumanEval/42', 'HumanEval/80', 'HumanEval/6']","def get_positive(var_0: list):
    return [e for e in var_0 if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/75'],"import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0):
        return False
    sqrt_n = math.isqrt(n)
    for i in range(3, sqrt_n + 1, 2):
        if n % i == 0:
            return False
    return True

def is_predictable(var_0):
    for var_1 in range(2, 101):
        if not is_prime(var_1):
            continue
        for var_2 in range(2, 101):
            if not is_prime(var_2):
                continue
            for var_3 in range(2, 101):
                if not is_prime(var_3):
                    continue
                if var_1 * var_2 * var_3 == var_0:
                    return True
    return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 8)"", 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/75', '605', 'HumanEval/82', 'HumanEval/39', 'HumanEval/31']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/75', '605', 'HumanEval/82', 'HumanEval/39', 'HumanEval/31', 'HumanEval/59', '256', 'HumanEval/127', '685', '32']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_factors(n):
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

def largest_prime_factor(n):
    factors = prime_factors(n)
    return max(factors)

def count_primes(n):
    primes = [True] * (n + 1)
    primes[0] = primes[1] = False
    for i in range(2, int(n**0.5) + 1):
        if primes[i]:
            for j in range(i * i, n + 1, i):
                primes[j] = False
    return sum(primes)

def intersection(a, b):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    a_max = max(a)
    b_max = max(b)
    a_min = min(a)
    b_min = min(b)
    diff = b_min - a_max
    if diff > 0 and is_prime(diff):
        return 'YES'
    return 'NO'

def sum_of_primes(n):
    primes = [True] * (n + 1)
    primes[0] = primes[1] = False
    for i in range(2, int(n**0.5) + 1):
        if primes[i]:
            for j in range(i * i, n + 1, i):
                primes[j] = False
    return sum(i for i in range(2, n + 1) if primes[i])

def max_prime_factors(n):
    while n % 2 == 0:
        n //= 2
    for i in range(3, int(n**0.5) + 1, 2):
        while n % i == 0:
            n //= i
    if n > 2:
        return n
    return",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def poly(var_0: list, var_1: float) -> float:
    return sum(coeff * math.pow(var_1, i) for i, coeff in enumerate(var_0))

def find_zero(var_0: list) -> float:
    a, b = -1.0, 1.0
    while (poly(var_0, a) * poly(var_0, b)) > 0:
        c = (a + b) / 2.0
        if poly(var_0, c) * poly(var_0, a) > 0:
            a = c
        else:
            b = c
    return (a + b) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,5,normal,"['HumanEval/32', 'HumanEval/25', '589', 'HumanEval/11', 'HumanEval/161']","import math

def poly(var_0: list, var_1: float):
    return sum([coeff * math.pow(var_1, i) for i, coeff in enumerate(var_0)])

def find_zero(var_0: list):
    var_1, var_2 = (-1.0, 1.0)
    while poly(var_0, var_1) * poly(var_0, var_2) > 0:
        var_1 *= 2.0
        var_2 *= 2.0
    while var_2 - var_1 > 1e-10:
        var_3 = (var_1 + var_2) / 2.0
        if poly(var_0, var_3) * poly(var_0, var_1) > 0:
            var_1 = var_3
        else:
            var_2 = var_3
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,10,normal,"['HumanEval/32', 'HumanEval/25', '589', 'HumanEval/11', 'HumanEval/161', 'HumanEval/40', 'HumanEval/123', 'HumanEval/121', 'HumanEval/3', 'HumanEval/84']","def poly(var_0: list, x: float):
    return sum([coeff * x**i for i, coeff in enumerate(var_0)])

def find_zero(var_0: list):
    a, b = -1.0, 1.0
    while poly(var_0, a) * poly(var_0, b) > 0:
        a *= 2.0
        b *= 2.0
    while abs(b - a) > 1e-10:
        c = (a + b) / 2.0
        if poly(var_0, c) * poly(var_0, a) > 0:
            a = c
        else:
            b = c
    return a

def find_wine(var_0: list):
    return find_zero(var_0)

def find_wine(var_0: list):
    return find_zero(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(var_0: list):
    var_0[::3] = sorted(var_0[::3])
    return var_0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/37', '104', '37', '569']","def sort_third(var_0: list):
    var_1 = list(var_0)
    var_1[::3] = sorted(var_1[::3])
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/37', '104', '37', '569', '487', '839', '705', 'HumanEval/19', '516']","def sort_third(var_0: list):
    return var_0[:2] + sorted(var_0[2::3]) + var_0[3::3]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(var_0: list):
    return sorted(set(var_0))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', '694', 'HumanEval/104', '758', '779']","def unique(var_0: list):
    return sorted(set(var_0))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', '694', 'HumanEval/104', '758', '779', '536', '281', '573', '104', '760']","def unique(var_0: list):
    return sorted(list(set(var_0)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['HumanEval/35'],"def max_element(lst: list):
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['HumanEval/35', '259', '613', 'HumanEval/9', '393']","def max_element(var_0: list):
    return max(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['HumanEval/35', '259', '613', 'HumanEval/9', '393', 'HumanEval/158', 'HumanEval/147', '200', '101', 'HumanEval/136']","def max_element(var_0: list):
    return max(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['HumanEval/36'],"def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['HumanEval/36', '781', '365', '745', '577']","def fizz_buzz(n):
    count = 0
    for i in range(1, n+1):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['HumanEval/36', '781', '365', '745', '577', '483', '107', '78', '426', 'HumanEval/113']","def fizz_buzz(n: int):
    var_1 = []
    for var_2 in range(n):
        if var_2 % 11 == 0 or var_2 % 13 == 0:
            var_1.append(var_2)
    var_3 = ''.join(list(map(str, var_1)))
    var_4 = 0
    for var_5 in var_3:
        if var_5 == '7':
            var_4 += 1
    return var_4",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/37'],"def sort_even(l: list):
    even = sorted([x for i, x in enumerate(l) if i % 2 == 0])
    odd = sorted([x for i, x in enumerate(l) if i % 2!= 0])
    result = []
    for i in range(max(len(even), len(odd))):
        if i < len(even):
            result.append(even[i])
        if i < len(odd):
            result.append(odd[i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/37', '790', '104', '569', '705']","def sort_even(lst):
    even = sorted([x for i, x in enumerate(lst) if i % 2 == 0])
    odd = sorted([x for i, x in enumerate(lst) if i % 2!= 0])
    return even + odd",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/37', '790', '104', '569', '705', '37', '41', 'HumanEval/19', '567', '889']","def sort_even(var_0):
    var_1 = sorted([var_2 for var_2 in var_0 if var_2 % 2 == 0])
    var_3 = sorted([var_2 for var_2 in var_0 if var_2 % 2!= 0])
    return var_1 + var_3",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def encode_cyclic(s: str):
    return """".join(group[1:] + group[0] if len(group) == 3 else group for group in [s[3 * i:min(3 * i + 3, len(s)) for i in range((len(s) + 2) // 3)])

def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: closing parenthesis ')' does not match opening parenthesis '[' (<string>, line 2)"", 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '317', '157']","def encode_cyclic(s: str):
    groups = [''.join(s[3 * i:min(3 * i + 3, len(s))] + [s[3 * i] for i in range((len(s) + 2) // 3)])
    return ''.join(groups)",0.0,entry point not found
38,HumanEval/38,10,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '317', '157', '217', '374', 'HumanEval/65', 'HumanEval/15', '39']","def encode_cyclic(s):
    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]
    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]
    return ''.join(groups)",0.0,entry point not found
39,HumanEval/39,1,normal,['HumanEval/39'],"import math

def prime_fib(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    fib_sequence = [0, 1]
    while True:
        next_fib = fib_sequence[-1] + fib_sequence[-2]
        if is_prime(next_fib):
            return next_fib
        fib_sequence.append(next_fib)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['HumanEval/39', 'HumanEval/55', '873', '605', '256']","def prime_fib(var_0: int):
    import math

    def is_prime(var_1):
        if var_1 < 2:
            return False
        for var_2 in range(2, min(int(math.sqrt(var_1)) + 1)):
            if var_1 % var_2 == 0:
            return False
        return True
    var_3 = [0, 1]
    while True:
        var_3.append(var_3[-1] + var_3[-2])
        if is_prime(var_3[-1]):
            var_0 -= 1
        if var_0 == 0:
            return var_3[-1]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'if' statement on line 8 (<string>, line 9)"", 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['HumanEval/39', 'HumanEval/55', '873', '605', '256', 'HumanEval/63', 'HumanEval/46', '32', 'HumanEval/59', 'HumanEval/31']","def prime_fib(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    a, b = 0, 1
    i = 0
    while True:
        a, b = b, a + b
        if is_prime(b):
            i += 1
            if i == n:
                return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['HumanEval/40'],"def triples_sum_to_zero(lst: list):
    seen = set()
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            for k in range(j + 1, len(lst)):
                if lst[i] + lst[j] + lst[k] == 0 and lst[i] not in seen and lst[j] not in seen and lst[k] not in seen:
                    seen.update([lst[i], lst[j], lst[k]])
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,5,normal,"['HumanEval/40', '340', 'HumanEval/43', '121', '916']","def triples_sum_to_zero(var_0: list):
    var_0.sort()
    for var_1 in range(len(var_0) - 2):
        left, right = var_1 + 1, len(var_0) - 1
    while left < right:
        current_sum = var_0[var_1] + var_0[left] + var_0[right]
        if current_sum == 0:
            return True
        elif current_sum < 0:
            left += 1
        else:
            right -= 1
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,10,normal,"['HumanEval/40', '340', 'HumanEval/43', '121', '916', '837', '420', 'HumanEval/32', '514', '685']","def triples_sum_to_zero(var_0: list):
    for i in range(len(var_0)):
        for j in range(i + 1, len(var_0)):
            for k in range(j + 1, len(var_0)):
                if var_0[i] + var_0[j] + var_0[k] == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['HumanEval/41'],"def car_race_collision(n: int) -> int:
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,5,normal,"['HumanEval/41', '473', '249', '298', 'HumanEval/127']","def car_race_collision(n: int):
    return n ** 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,10,normal,"['HumanEval/41', '473', '249', '298', 'HumanEval/127', '525', '414', '239', 'HumanEval/74', '111']","def car_race_collision(n):
    return n ** 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list) -> list:
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', '859', '729', '857', '536']","def incr_list(l):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', '859', '729', '857', '536', '143', '282', '106', '758', '779']","def incr_list(var_0: list):
    return [e + 1 for e in var_0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['767'],"def pairs_sum_to_zero(nums):
    num_set = set()
    for num in nums:
        if -num in num_set:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['767', 'HumanEval/43', '144', 'HumanEval/40', '633']","def pairs_sum_to_zero(var_0):
    for var_1 in range(len(var_0)):
        for var_2 in range(var_1 + 1, len(var_0)):
            if var_0[var_1] + var_0[var_2] == 0:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['767', 'HumanEval/43', '144', 'HumanEval/40', '633', '527', '138', '514', '723', '408']","def pairs_sum_to_zero(var_0):
    seen = set()
    for var_1 in var_0:
        complement = -var_1
        if complement in seen:
            return True
        seen.add(var_1)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['HumanEval/44'],"def change_base(var_0: int, var_1: int):
    var_2 = ''
    while var_0 > 0:
        var_2 = str(var_0 % var_1) + var_2
        var_0 = var_0 - var_1
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,5,normal,"['HumanEval/44', '958', '619', '33', '24']","def change_base(var_0: int, var_1: int):
    var_2 = ''
    while var_0 > 0:
        var_3 = var_0 % var_1
        var_4 = var_3
        var_0 //= var_1
        var_2 = str(var_4) + var_2
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,10,normal,"['HumanEval/44', '958', '619', '33', '24', '539', 'HumanEval/79', '194', '99', '621']","def change_base(var_0: int, var_1: int):
    var_2 = ''
    while var_0 > 0:
        var_2 = str(var_0 % var_1) + var_2
        var_0 //= var_1
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,1,normal,['HumanEval/45'],"import math

def triangle_area(base, height):
    return 0.5 * base * height",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,5,normal,"['HumanEval/45', '626', 'HumanEval/71', '488', '742']","import math

def triangle_area(var_0, var_1):
    return var_0 * var_1 / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,10,normal,"['HumanEval/45', '626', 'HumanEval/71', '488', '742', '848', '176', '163', '458', '52']","import math

def triangle_area(a, b):
    return 0.5 * a * b

def triangle_area(a):
    if a < 0:
        return -1
    return a * a

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)

import math

def area_pentagon(n):
    return (math.sqrt(5 * (5 + 2 * math.sqrt(5))) * (n ** 2)) / 4

def area_tetrahedron(n):
    return (math.sqrt(3) * (n ** 2))

def area_trapezium(a, b, h):
    return 0.5 * (a + b) * h

def perimeter_triangle(a, b, c):
    return a + b + c

import math

def area_polygon(n, r):
    return (n * r ** 2) / (4 * math.tan(math.pi / n))

def area_rectangle(l, w):
    return l * w

def area_parallelogram(l, w):
    return l * w",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,1,normal,['873'],"def fib(n):
    if n <= 2:
        return 1
    fib_prev = 1
    fib_prev = 1
    for i in range(3, n + 1):
        fib = fib_prev + fib_prev + 1 + 1
        fib_prev = fib
        fib_prev = fib
    return fib",0.0,entry point not found
46,HumanEval/46,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46']","def fib4(var_0: int):
    var_1 = [0, 0, 1, 0]
    if var_0 < 4:
        return var_1[var_0]
    for var_2 in range(4, var_0 + 1):
        var_1.append(var_1[-1] + var_1[-2] + var_1[-3] + var_1[-4])
    return var_1[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46', '239', '843', '84', '552', '745']","def fib4(n):
    if n < 4:
        return [0, 1, 2, 0][n]
    fib_sequence = [0, 1, 2, 0]
    for i in range(4, n + 1):
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4])
        fib_sequence.pop(0)
    return fib_sequence[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,1,normal,['HumanEval/47'],"import statistics

def median(var_0: list):
    return statistics.median(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,5,normal,"['HumanEval/47', '342', '397', '622', '432']","import heapq

class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index

    def __lt__(self, other):
        return self.value < other.value

def find_median_range(list):
    heap = []
    for i in range(len(list)):
        heapq.heappush(heap, Node(list[i][0], i, 0))
    low = float('inf')
    high = float('-inf')
    while True:
        top = heapq.heappop(heap)
        if high - low < list[heapq.heappop(heap).list_num][heapq.heappop(heap).index] - list[heapq.heappop(heap).list_num][heapq.heappop(heap).index]:
            return (low + high) / 2
        low = min(low, list[heapq.heappop(heap).list_num][heapq.heappop(heap).index]
        high = max(high, list[heapq.heappop(heap).list_num][heapq.heappop(heap).index]
        if not heap:
            return (low + high) / 2",0.0,entry point not found
47,HumanEval/47,10,normal,"['HumanEval/47', '342', '397', '622', '432', '381', '536', '790', '50', 'HumanEval/21']","from typing import List

def median(var_0: List[float]) -> float:
    var_0 = sorted(var_0)
    n = len(var_0)
    if n % 2 == 1:
        return var_0[n // 2]
    else:
        return (var_0[n // 2 - 1] + var_0[n // 2]) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['HumanEval/48'],"def is_palindrome(s: str) -> bool:
    s = ''.join(c for c in s if c.isalnum()).lower()
    return s == s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['HumanEval/48', 'HumanEval/10', '485', '864', 'HumanEval/107']","def is_palindrome(s: str) -> bool:
    return s == s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['HumanEval/48', 'HumanEval/10', '485', '864', 'HumanEval/107', '192', '909', '53', 'HumanEval/134', '352']","def is_palindrome(s: str) -> bool:
    s = ''.join(c for c in s if c.isalnum()).lower()
    return s == s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,1,normal,['952'],"def mod_power(a, n, p):
    result = 1
    a = a % p
    while n > 0:
        if n % 2 == 1:
            result = (result * a) % p
        n = n // 2
        a = (a * a) % p
    return result",0.0,entry point not found
49,HumanEval/49,5,normal,"['952', '745', 'HumanEval/49', '616', '402']","def modp(var_0, var_1):
    result = 1
    for _ in range(var_0):
        result = (result * var_1) % var_0
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,10,normal,"['952', '745', 'HumanEval/49', '616', '402', '288', '471', '260', '36', '55']","def modp(var_0, var_1):
    if var_1 == 0:
        return 0
    var_2 = 1
    for var_3 in range(var_0):
        var_2 = (var_2 * var_1) % (10**9 + 7)
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,1,normal,['HumanEval/50'],"def encode_shift(s: str):
    return ''.join([chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) for ch in s])

def decode_shift(s: str):
    return ''.join([chr(((ord(ch) - ord('a')) - 5) % 26 + ord('a')) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,5,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/65', 'HumanEval/162']","def encode_shift(s: str):
    return ''.join([chr(((ord(ch) - 65 + 5) % 26) + 65) for ch in s])

def decode_shift(s: str):
    return ''.join([chr(((ord(ch) - 65 - 5) % 26) + 65) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,10,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/65', 'HumanEval/162', '83', '317', '330', '732', '182']","def encode_shift(s: str):
    return ''.join([chr(((ord(ch) - ord('a') + 5) % 26) + ord('a')) for ch in s])",0.0,entry point not found
51,HumanEval/51,1,normal,['HumanEval/64'],"def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return """".join([c for c in text if c not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,5,normal,"['HumanEval/64', 'HumanEval/51', '131', 'HumanEval/118', '776']","def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return """".join([char for char in text if char not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['HumanEval/64', 'HumanEval/51', '131', 'HumanEval/118', '776', '727', '676', '377', '478', '495']","def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return ''.join([c for c in text if c not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['HumanEval/52'],"def below_threshold(lst: list, threshold: int) -> bool:
    return all(i < threshold for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '433', '477']","def below_threshold(lst, threshold):
    return all(i < threshold for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '433', '477', '69', 'HumanEval/57', '68', '567', '700']","def below_threshold(var_0: list, var_1: int) -> bool:
    return all(var_2 < var_1 for var_2 in var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/53'],"def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/53', '363', '750', '621', 'HumanEval/122']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/53', '363', '750', '621', 'HumanEval/122', 'HumanEval/85', '503', '729', '470', '106']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['352'],"from collections import Counter

def same_chars(s0: str, s1: str) -> bool:
    return Counter(s0) == Counter(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,5,normal,"['352', 'HumanEval/54', '53', '741', 'HumanEval/134']","def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,10,normal,"['352', 'HumanEval/54', '53', '741', 'HumanEval/134', '217', '91', '30', '338', '74']","def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,1,normal,['873'],"def fib(n: int):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46']","def fib(n: int):
    if n <= 0:
        return ""Input should be a positive integer""
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        a, b = 1, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46', '483', '577', '623', '479', '745']","def fib(n: int):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['HumanEval/119'],"def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['HumanEval/119', 'HumanEval/56', 'HumanEval/61', '175', '30']","def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        else:
            if not stack or stack.pop()!= ""<""):
                return False
    return not stack",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 7)"", 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['HumanEval/119', 'HumanEval/56', 'HumanEval/61', '175', '30', '338', '771', '178', 'HumanEval/0', '640']","def correct_bracketing(brackets: str):
    count = 0
    for bracket in brackets:
        if bracket == '<':
            count += 1
        else:
            count -= 1
        if count < 0:
            return False
    return count == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['HumanEval/57'],"def monotonic(lst: list):
    increasing = decreasing = True
    for i in range(len(lst) - 1):
        if lst[i] < lst[i + 1]:
            decreasing = False
        elif lst[i] > lst[i + 1]:
            increasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['HumanEval/57', 'HumanEval/3', '680', '68', '670']","def monotonic(lst):
    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) or all(lst[i] >= lst[i+1] for i in range(len(lst)-1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,10,normal,"['HumanEval/57', 'HumanEval/3', '680', '68', '670', '889', '567', 'HumanEval/0', '69', 'HumanEval/52']","def monotonic(var_0: list):
    return all(var_0[i] <= var_0[i + 1] for i in range(len(var_0) - 1)) or all(var_0[i] >= var_0[i + 1] for i in range(len(var_0) - 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,5,normal,"['HumanEval/58', '111', '298', '431', '648']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,10,normal,"['HumanEval/58', '111', '298', '431', '648', '578', '943', '108', '249', '104']","def common(var_0: list, var_1: list):
    return sorted(list(set(var_0) & set(var_1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"import math

def largest_prime_factor(n: int):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '32', 'HumanEval/24', '605', '260']","import math

def largest_prime_factor(n: int):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '32', 'HumanEval/24', '605', '260', 'HumanEval/39', '256', '483', '443', '366']","import math

def largest_prime_factor(n: int):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['HumanEval/60'],"def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['HumanEval/60', '870', '398', '675', '123']","def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,10,normal,"['HumanEval/60', '870', '398', '675', '123', '514', '133', '566', '162', '504']","def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['HumanEval/119'],"def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if stack:
                stack.pop()
            else:
                return False
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,5,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', '175', '771']","def correct_bracketing(brackets: str):
    stack = []
    bracket_map = {')': '(', '}': '{', ']': '['}
    for bracket in brackets:
        if bracket in bracket_map.values():
            stack.append(bracket)
        elif bracket in bracket_map.keys():
            if not stack or stack.pop()!= bracket_map[bracket]:
                return False
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,10,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', '175', '771', 'HumanEval/0', '640', '30', '338', '178']","def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == '(' or bracket == '{' or bracket == '[':
            stack.append(bracket)
        elif bracket == ')' or bracket == '}' or bracket == ']':
            if not stack:
                return False
            top = stack.pop()
            if (bracket == ')' and top!= '(') or (bracket == '}' and top!= '{') or (bracket == ']' and top!= '['):
                return False
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['HumanEval/62'],"def derivative(xs):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['HumanEval/62', '399', 'HumanEval/11', 'HumanEval/160', '430']","def derivative(xs):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['HumanEval/62', '399', 'HumanEval/11', 'HumanEval/160', '430', '205', 'HumanEval/32', '456', '288', '623']","def derivative(xs):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['HumanEval/63'],"def fibfib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
        a, b = b, a + b + a
    return b",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'for' statement on line 10 (<string>, line 11)"", 'completion_id': 0})]})"
63,HumanEval/63,5,normal,"['HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39', 'HumanEval/46']","def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 0
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39', 'HumanEval/46', '300', '84', '552', 'HumanEval/15', '345']","def fibfib(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', 'HumanEval/51', 'HumanEval/118', '776', '131']","def count_vowels(s):
    vowels = 'aeiouAEIOU'
    count = 0
    for char in s:
        if char in vowels:
            count += 1
    return count",0.0,entry point not found
64,HumanEval/64,10,normal,"['HumanEval/64', 'HumanEval/51', 'HumanEval/118', '776', '131', '684', '238', '813', '30', '338']","def count_vowels(s):
    vowels = ""aeiouAEIOU""
    count = 0
    for char in s:
        if char in vowels:
            count += 1
    return count",0.0,entry point not found
65,HumanEval/65,1,normal,['HumanEval/50'],"def circular_shift(x, shift):
    digits = [int(i) for i in str(x)]
    shift = shift % len(digits)
    return ''.join(map(str, digits[-shift:] + digits[:-shift]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/50', 'HumanEval/65', '364', 'HumanEval/38', '619']","def circular_shift(x, shift):
    x = str(x)
    shift = shift % len(x)
    return x[-shift:] + x[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/50', 'HumanEval/65', '364', 'HumanEval/38', '619', '799', '435', '467', 'HumanEval/11', '775']","def circular_shift(var_0, var_1):
    var_2 = str(var_0)
    if var_1 > len(var_2):
        return var_2[::-1]
    else:
        return var_2[len(var_2) - var_1:] + var_2[:len(var_2) - var_1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['148'],"def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,5,normal,"['148', '146', 'HumanEval/66', '566', '398']","def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,10,normal,"['148', '146', 'HumanEval/66', '566', '398', '558', '269', 'HumanEval/108', 'HumanEval/131', '238']","def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['HumanEval/67'],"def fruit_distribution(message):
    nums = [int(num) for num in message.split(' ') if num.isdigit()]
    return sum(nums)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['HumanEval/67', '61', '238', 'HumanEval/105', '749']","def fruit_distribution(message):
    parts = message.split(' ')
    return int(parts[1]) - sum(int(part) for part in parts[0].split(',') if part.isdigit())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['HumanEval/67', '61', '238', 'HumanEval/105', '749', '453', 'HumanEval/113', '926', '911', '360']","def fruit_distribution(var_0, var_1):
    var_2 = list()
    for var_3 in var_0.split(' '):
        if var_3.isdigit():
            var_2.append(int(var_3))
    return var_1 - sum(var_2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['342'],"def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0])
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0])
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None
    return min(even_nums)
def find_smallest_even(nums):
    even_nums = [num for num in nums if num % 2 == 0]
    if not even_nums:
        return None",0.0,entry point not found
68,HumanEval/68,5,normal,"['342', 'HumanEval/68', '893', '460', '413']","import heapq

class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index

    def __lt__(self, other):
        return self.value < other.value

def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heapq.heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heapq.heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heapq.heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])

def pluck(var_0):
    if len(var_0) == 0:
        return []
    var_1 = list(filter(lambda x: x % 2 == 0, var_0))
    if var_1 == []:
        return []
    return [min(var_1), var_0.index(min(var_1))]

def extract(var_0):
    return [item[-1] for item in var_0]

def extract_nth(var_0, var_1):
    return [x[var_1] for x in var_0]

def find_smallest_even(var_0):
    return min([x for x in var_0 if x % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['342', 'HumanEval/68', '893', '460', '413', 'HumanEval/90', 'HumanEval/136', '94', '304', '408']","import heapq

def find_minimum_range(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heapq.heappush(pq, (list[i][0], i))
        high = max(high, list[i][0])
    while pq:
        top = heapq.heappop(pq)
        low = top[0]
        i = top[1]
        if high - low < p[1] - p[0]:
            p = (low, high)
        if i == len(list) - 1:
            return p
        heapq.heappush(pq, (list[i][1], i))
        high = max(high, list[i][1])",0.0,entry point not found
69,HumanEval/69,1,normal,['HumanEval/136'],"def search_wine(lst):
    return [x for x in lst if x > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['HumanEval/136', '143', '492', 'HumanEval/69', '184']","def search(lst):
    max_val = max(lst)
    min_val = min(lst)
    for num in lst:
        if num > 0 and num!= max_val and num!= min_val:
            return num
    return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['HumanEval/136', '143', '492', 'HumanEval/69', '184', '613', '119', 'HumanEval/22', '97', '605']","def search(lst):
    return [x for x in lst if x > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['HumanEval/70'],"def strange_sort_list(var_0):
    var_1, var_2) = ([], True)
    while var_0:
        var_1.append(min(var_0) if var_2 else max(var_0)
        var_0.remove(var_1[-1])
        var_2 = not var_2
    return var_1",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 2)"", 'completion_id': 0})]})"
70,HumanEval/70,5,normal,"['HumanEval/70', '37', '889', '705', '569']","def strange_sort_list(var_0):
    var_1, var_2 = ([], True)
    while var_0:
        var_1.append(min(var_0) if var_2 else max(var_0))
        var_0.remove(var_1[-1])
        var_2 = not var_2
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,10,normal,"['HumanEval/70', '37', '889', '705', '569', '104', '896', 'HumanEval/88', 'HumanEval/19', '749']","def sort_mixed_list(var_0):
    ints = sorted([i for i in var_0 if isinstance(i, int)])
    strs = sorted([s for s in var_0 if isinstance(s, str)])
    return ints + strs",0.0,entry point not found
71,HumanEval/71,1,normal,['HumanEval/45'],"import pandas as pd

def triangle_area(data):
    df = pd.DataFrame(data, columns=['side1','side2','side3'])
    df['area'] = df.apply(lambda row: (row['side1'] * row['side2'] / 2, return row['side3']
    return df['area'].tolist()",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 5)', 'completion_id': 0})]})"
71,HumanEval/71,5,normal,"['HumanEval/45', '176', 'HumanEval/71', '626', '742']","import math

def triangle_area(var_0, var_1, var_2):
    if var_0 + var_1 <= var_2 or var_0 + var_2 <= var_1 or var_1 + var_2 <= var_0:
            return -1
        var_3 = (var_0 + var_1 + var_2) / 2
        var_4 = (var_3 * (var_3 - var_0) * (var_3 - var_1) * (var_3 - var_2)) ** 0.5
        var_5 = round(var_4, 2)
        return var_5",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unindent does not match any outer indentation level (<string>, line 6)', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['HumanEval/45', '176', 'HumanEval/71', '626', '742', '488', '848', '163', 'HumanEval/157', '677']","import math

def triangle_area(var_0, var_1, var_2):
    # Check if the sides can form a triangle
    if var_0 + var_1 <= var_2 or var_0 + var_2 <= var_1 or var_1 + var_2 <= var_0:
        return -1
    
    # Calculate the semi-perimeter
    var_3 = (var_0 + var_1 + var_2) / 2
    
    # Calculate the area using Heron's formula
    var_4 = (var_3 * (var_3 - var_0) * (var_3 - var_1) * (var_3 - var_2)) ** 0.5
    
    # Round the area to 2 decimal places
    return round(var_4, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['HumanEval/72'],"def will_it_fly(q, var_1):
    if sum(q) > var_1:
        return False
    var_2, var_3 = 0, len(q) - 1
    while var_2 < var_3:
        if q[var_2]!= q[var_3]:
            return False
        var_2 += 1
        var_3 -= 1
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['HumanEval/72', '129', '485', '121', '433']","import pandas as pd

def check_intensity(df):
    return df['intensity'].sum() < 10000",0.0,entry point not found
72,HumanEval/72,10,normal,"['HumanEval/72', '129', '485', '121', '433', '123', 'HumanEval/3', 'HumanEval/80', 'HumanEval/32', '69']","def sum_intensity(df, q, threshold):
    if df.shape[0] == 0:
        return 0
    if q.shape[0] == 0:
        return 0
    q = q[q['intensity'] > threshold]
    return (df['intensity'] + q['intensity']).sum()",0.0,entry point not found
73,HumanEval/73,1,normal,['100'],"import sys

def smallest_change(arr):
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    max_num = max(arr)
    while True:
        if is_palindrome(max_num):
            return max_num - arr[0]
        max_num += 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,5,normal,"['100', '699', '595', '838', 'HumanEval/73']","import sys

def smallest_change(arr):
    arr = [str(x) for x in arr]
    count = 0
    for i in range(len(arr) // 2):
        if arr[i]!= arr[len(arr) - i - 1]:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,10,normal,"['100', '699', '595', '838', 'HumanEval/73', '644', '856', '755', '408', 'HumanEval/88']","import sys

def smallest_change(var_0):
    var_1 = 0
    for var_2 in range(len(var_0) // 2):
        if var_0[var_2]!= var_0[len(var_0) - var_2 - 1]:
            var_1 += 1
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['HumanEval/74'],"def total_match(var_0, var_1):
    var_2 = sum(len(var_3) for var_3 in var_0)
    var_4 = sum(len(var_3) for var_3 in var_1):
    if var_2 <= var_4:
        return var_0
    else:
        return var_1",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 3)', 'completion_id': 0})]})"
74,HumanEval/74,5,normal,"['HumanEval/74', '61', '285', '178', '298']","def total_match(var_0, var_1):
    return var_0 if sum(len(var_2) for var_2 in var_0) <= sum(len(var_2) for var_2 in var_1) else var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,10,normal,"['HumanEval/74', '61', '285', '178', '298', '666', '238', '186', 'HumanEval/7', '684']","def total_match(var_0, var_1):
    var_2 = 0
    for var_3 in var_0:
        var_2 += len(var_3)
    var_4 = 0
    for var_3 in var_1:
        var_4 += len(var_3)
    if var_2 <= var_4:
        return var_0
    else:
        return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"def is_multiply_prime(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(2, 101):
        for j in range(2, 101):
            for k in range(2, 101):
                if is_prime(i) and is_prime(j) and is_prime(k) and i * j * k == n:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '605', 'HumanEval/31']","def is_multiply_prime(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(2, 101):
        if is_prime(i):
            for j in range(2, 101):
                if is_prime(j):
                    for k in range(2, 101):
                        if is_prime(k):
                            if i * j * k == n:
                                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '605', 'HumanEval/31', '685', 'HumanEval/82', '256', '32', 'HumanEval/127']","def is_multiply_prime(var_0):
    def is_prime(var_1):
        if var_1 < 2:
            return False
        for var_2 in range(2, int(var_1 ** 0.5) + 1):
            if var_1 % var_2 == 0:
                return False
        return True
    for var_3 in range(2, 101):
        for var_4 in range(2, 101):
            for var_5 in range(2, 101):
                if var_3 * var_4 * var_5 == var_0 and is_prime(var_3) and is_prime(var_4) and is_prime(var_5):
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,1,normal,['HumanEval/76'],"import math

def is_simple_power(var_0, var_1):
    if var_1 == 1:
        return var_0 == 1
    var_2 = 1
    while var_2 < var_0):
        var_2 = var_2 * var_1
    return var_2 == var_0",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 7)"", 'completion_id': 0})]})"
76,HumanEval/76,5,normal,"['HumanEval/76', '167', '138', '93', '199']","def is_simple_power(base, power):
    if power == 1:
        return base == 1
    var_2 = 1
    while var_2 < base:
        var_2 = var_2 * base
        if var_2 == base:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,10,normal,"['HumanEval/76', '167', '138', '93', '199', '388', 'HumanEval/75', '900', '724', '605']","def is_simple_power(var_0, var_1):
    if var_1 == 1:
        return var_0 == 1
    var_2 = 1
    while var_2 < var_0:
        var_2 = var_2 * var_1
        var_1 -= 1
    return var_2 == var_0 and var_1 == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['HumanEval/77'],"def iscube(var_0):
    var_0 = abs(var_0)
    root = round(var_0 ** (1.0 / 3))
    return root ** 3 == var_0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,5,normal,"['HumanEval/77', '646', '447', '129', 'HumanEval/94']","def iscube(var_0):
    var_0 = abs(var_0)
    return int(round(var_0 ** (1.0 / 3))) ** 3 == var_0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,10,normal,"['HumanEval/77', '646', '447', '129', 'HumanEval/94', '59', '422', '72', '279', '234']","import math

def iscube(var_0):
    return int(round(var_0 ** (1.0 / 3))) ** 3 == var_0

def No_of_cubes(var_0, var_1):
    return pow(var_0 - var_1 + 1, 3)

def cube_nums(var_0):
    return [x ** 3 for x in var_0]

def magic_square_test(var_0):
    n = len(var_0)
    sums = [sum(row) for row in var_0]
    sums.append(sum(var_0[i][i] for i in range(n)))
    sums.append(sum(var_0[i][n - i - 1] for i in range(n)))
    return len(set(sums)) == 1

def skasdkd(var_0):
    def isPrime(var_1):
        if var_1 < 2:
            return False
        for var_2 in range(2, int(var_1 ** 0.5) + 1):
            if var_1 % var_2 == 0:
                return False
        return True
    max_prime = 0
    for num in var_0:
        if num > max_prime and isPrime(num):
            max_prime = num
    return sum(int(digit) for digit in str(max_prime))

def is_octagonal(var_0):
    return 3 * var_0 * var_0 - 2 * var_0

def average_cube(var_0):
    return sum(x * x * x for x in range(1, var_0 + 1)) / var_0

def dif_square(var_0):
    return var_0 % 4!= 2

def is_num_decagonal(var_0):
    return 4 * var_0 * var_0 - 3 * var_0

def volume_cube(var_0):
    return var_0 * var_0 * var_0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,1,normal,['135'],"def hex_key(num):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) +  # Only need to check up to the square root of n
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    prime_hex = {'2': True, '3': True, '5': True, '7': True, 'B': True, 'D': True}
    count = 0
    for char in num:
        if char in prime_hex:
            count += 1
    return count",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 5)"", 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['135', 'HumanEval/78', 'HumanEval/94', '256', '107']","def hex_key(num):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    hex_primes = {'2': True, '3': True, '5': True, '7': True, 'B': True, 'D': True}
    count = 0
    for digit in num:
        if digit in hex_primes and is_prime(int(digit, 16)):
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,10,normal,"['135', 'HumanEval/78', 'HumanEval/94', '256', '107', '605', 'HumanEval/66', '745', 'HumanEval/82', '86']","def hex_key(num):
    prime_hex = '235BD'
    return sum(1 for digit in num if digit in prime_hex)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,1,normal,['HumanEval/79'],"def decimal_to_binary(var_0):
    return 'db' + bin(var_0)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['HumanEval/79', '99', '494', '33', '24']","def decimal_to_binary(var_0):
    return 'db' + bin(var_0)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['HumanEval/79', '99', '494', '33', '24', '467', '194', '208', '759', 'HumanEval/162']","def decimal_to_binary(var_0):
    return bin(var_0)[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['HumanEval/80'],"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,5,normal,"['HumanEval/80', '523', '192', '53', 'HumanEval/134']","def is_happy(var_0):
    if len(var_0) < 3:
        return False
    for i in range(len(var_0) - 2):
        if var_0[i] == var_0[i + 1] or var_0[i + 1] == var_0[i + 2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['HumanEval/80', '523', '192', '53', 'HumanEval/134', '352', '30', '338', '737', '91']","def is_happy(var_0):
    if len(var_0) < 3:
        return False
    for var_1 in range(len(var_0) - 2):
        if var_0[var_1] == var_0[var_1 + 1] or var_0[var_1] == var_0[var_1 + 2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def numerical_letter_grade(grades):
    return ['A+' if g >= 4.0 else 'A' if g >= 3.7 else 'A-' if g >= 3.3 else 'B+' if g >= 3.0 else 'B' if g >= 2.7 else 'B-', 'C+' if g >= 2.3 else 'C' if g >= 2.0 else 'C-', 'D+' if g >= 1.7 else 'D' if g >= 1.7 else 'D-', 'E' if g >= 0.0 else 'E'",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 2)"", 'completion_id': 0})]})"
81,HumanEval/81,5,normal,"['HumanEval/81', 'HumanEval/19', '749', '397', 'HumanEval/134']","def numerical_letter_grade(gpa):
    if gpa >= 4.0:
        return 'A+'
    elif gpa >= 3.7:
        return 'A'
    elif gpa >= 3.3:
        return 'A-'
    elif gpa >= 3.0:
        return 'B+'
    elif gpa >= 2.7:
        return 'B'
    elif gpa >= 2.3:
        return 'B-'
    elif gpa >= 2.0:
        return 'C+'
    elif gpa >= 1.7:
        return 'C'
    elif gpa >= 1.3:
        return 'C-'
    elif gpa >= 1.0:
        return 'D+'
    elif gpa >= 0.7:
        return 'D'
    elif gpa >= 0.0:
        return 'D-'
    else:
        return 'E'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,10,normal,"['HumanEval/81', 'HumanEval/19', '749', '397', 'HumanEval/134', '184', 'HumanEval/160', 'HumanEval/25', '883', '817']","def numerical_letter_grade(var_0):
    var_1 = []
    for var_2 in var_0:
        if var_2 == 4.0:
            var_1.append('A+')
        elif var_2 > 3.7:
            var_1.append('A')
        elif var_2 > 3.3:
            var_1.append('A-')
        elif var_2 > 3.0:
            var_1.append('B+')
        elif var_2 > 2.7:
            var_1.append('B')
        elif var_2 > 2.3:
            var_1.append('B-')
        elif var_2 > 2.0:
            var_1.append('C+')
        elif var_2 > 1.7:
            var_1.append('C')
        elif var_2 > 1.3:
            var_1.append('C-')
        elif var_2 > 1.0:
            var_1.append('D+')
        elif var_2 > 0.7:
            var_1.append('D')
        elif var_2 > 0.3:
            var_1.append('D-')
        else:
            var_1.append('E')
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,1,normal,['HumanEval/82'],"import math

def prime_length(s):
    length = len(s)
    if length < 2:
        return False
    sqrt_length = math.isqrt(length)
    for i in range(2, sqrt_length + 1):
        if length % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['HumanEval/82', '605', '192', '813', 'HumanEval/31']","def prime_length(s):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    return is_prime(len(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,10,normal,"['HumanEval/82', '605', '192', '813', 'HumanEval/31', '523', 'HumanEval/39', '79', '964', '352']","def prime_length(var_0):
    var_1 = len(var_0)
    if var_1 <= 1:
        return False
    for var_2 in range(2, int(var_1 ** 0.5) + 1):
        if var_1 % var_2 == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,1,normal,['HumanEval/83'],"def starts_one_ends(n):
    if n == 1:
        return 1
    return 9 * 10 ** (n - 2) + 9 * 10 ** (n - 2) + 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,5,normal,"['HumanEval/83', '365', '543', '278', '479']","def starts_one_ends(n):
    return 9 * (10 ** (n - 1)) + 9 * (10 ** (n - 2)) + 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,10,normal,"['HumanEval/83', '365', '543', '278', '479', 'HumanEval/104', '657', '745', '913', '345']","def starts_one_ends(n):
    return 9 * (10 ** (n - 1)) + 9 * (10 ** (n - 2)) + 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,1,normal,['HumanEval/84'],"def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,5,normal,"['HumanEval/84', '148', '398', '566', 'HumanEval/66']","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,10,normal,"['HumanEval/84', '148', '398', '566', 'HumanEval/66', '558', '845', 'HumanEval/60', '123', '870']","def solve(N):
    return bin(sum((int(i) for i in str(N))))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['881'],"def add(lst):
    even_sum = sum(num for i, num in enumerate(lst) if i % 2!= 0 and num % 2 == 0)
    return even_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,5,normal,"['881', '106', 'HumanEval/155', '729', 'HumanEval/122']","def add(lst):
    even_sum = sum([lst[i] for i in range(len(lst)) if i % 2!= 0 and lst[i] % 2 == 0])
    return even_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,10,normal,"['881', '106', 'HumanEval/155', '729', 'HumanEval/122', '363', '270', '784', 'HumanEval/53', 'HumanEval/113']","def add(lst):
    return sum([i for i in lst if i % 2 == 0 and lst.index(i) % 2!= 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['HumanEval/86'],"def anti_shuffle(s):
    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['HumanEval/86', '877', '39', '364', '374']","def anti_shuffle(s):
    return''.join([''.join(sorted(i)) for i in s.split(' ')]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 2)"", 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['HumanEval/86', '877', '39', '364', '374', '604', '456', '226', '915', 'HumanEval/27']","def anti_shuffle(s):
    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['HumanEval/87'],"def get_row(lst, x):
    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,5,normal,"['HumanEval/87', '104', '215', '569', '282']","def get_row(var_0, var_1):
    var_2 = [(i, j) for i in range(len(var_0)) for j in range(len(var_0[i])) if var_0[i][j] == var_1]
    return sorted(sorted(var_2, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,10,normal,"['HumanEval/87', '104', '215', '569', '282', '298', '652', '630', '859', '705']","def get_row(var_0, var_1):
    return sorted(sorted([(i, j) for i in range(len(var_0)) for j in range(len(var_0[i])) if var_0[i][j] == var_1 else 0])], key=lambda x: x[1]), reverse=True)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 2)"", 'completion_id': 0})]})"
88,HumanEval/88,1,normal,['HumanEval/88'],"def sort_array(var_0):
    if len(var_0) == 0:
        return []
    return sorted(var_0, reverse=(var_0[0] % 2 == 0)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 4)"", 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['HumanEval/88', 'HumanEval/116', '12', 'HumanEval/149', '229']","def sort_array(var_0):
    if len(var_0) == 0:
        return []
    elif var_0[0] % 2 == 0:
        return sorted(var_0, reverse=True)
    else:
        return sorted(var_0, reverse=False)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['HumanEval/88', 'HumanEval/116', '12', 'HumanEval/149', '229', 'HumanEval/37', '940', '635', '569', '104']","def sort_array(var_0):
    if len(var_0) == 0:
        return []
    elif var_0[0] % 2 == 0:
        return sorted(var_0, reverse=True)
    else:
        return sorted(var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,1,normal,['HumanEval/89'],"def encrypt(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    result = ''
    for char in s:
        if char.isalpha():
            shift = 2 * 2
            ascii_offset = 97 if char.islower() else 65
            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
        else:
            result += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/89', 'HumanEval/11', '364', 'HumanEval/162', '374']","def encrypt(s):
    result = """"
    for char in s:
        if char.isalpha():
            ascii_offset = 97 if char.islower() else 65
            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset"")
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 6) (<string>, line 6)', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/89', 'HumanEval/11', '364', 'HumanEval/162', '374', 'HumanEval/93', 'HumanEval/78', '864', 'HumanEval/64', 'HumanEval/50']","def encrypt(var_0):
    var_1 = 'abcdefghijklmnopqrstuvwxyz'
    var_2 = ''
    for var_3 in var_0:
        if var_3 in var_1:
            var_2 += var_1[(var_1.index(var_3) + 2 * 2) % 26]
        else:
            var_2 += var_3
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['62'],"def next_smallest(lst):
    if len(lst) < 2:
        return None
    sorted_lst = sorted(set(lst))
    return sorted_lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['62', '100', 'HumanEval/136', 'HumanEval/90', '755']","def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst = sorted(set(lst))
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['62', '100', 'HumanEval/136', 'HumanEval/90', '755', '408', '901', '496', 'HumanEval/99', 'HumanEval/20']","def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst = sorted(set(lst))
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"import re

def is_bored(S):
    sentences = re.split('[.?!]\\s*', S)
    return sum(1 for sentence in sentences if sentence and sentence[0:2] == 'I ')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '862', '897', 'HumanEval/143', 'HumanEval/101']","import re

def is_bored(S):
    sentences = re.split('[.?!]\\s*', S)
    return sum(1 for sentence in sentences if sentence and sentence[0] == 'I')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '862', '897', 'HumanEval/143', 'HumanEval/101', 'HumanEval/117', '79', '964', '537', 'HumanEval/36']","def is_bored(var_0):
    import re
    var_1 = re.split('[.?!]\\s*', var_0)
    return sum(1 for sentence in var_1 if sentence and sentence[0].lower() == 'i')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['138'],"def any_int(x, y, z):
    return (x + y == z or x + z == y or y + z == x) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['138', 'HumanEval/92', '121', '123', 'HumanEval/138']","def any_int(x, y, z):
    return (x + y == z or x + z == y or y + z == x) and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['138', 'HumanEval/92', '121', '123', 'HumanEval/138', '683', '515', 'HumanEval/40', '113', '481']","def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        return (x + y == z) or (x + z == y) or (y + z == x)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/93'],"def encode(message):
    vowels = 'aeiouAEIOU'
    shift = {vowel: chr(ord(vowel) + 2) for vowel in vowels}
    return ''.join([char.swapcase() if char in vowels else char for char in message]).translate(str.maketrans(shift))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,5,normal,"['HumanEval/93', 'HumanEval/50', 'HumanEval/38', 'HumanEval/51', '131']","def encode(message):
    vowels = 'aeiouAEIOU'
    message = message.swapcase()
    result = ''
    for char in message:
        if char in vowels:
            if char.islower():
                result += chr(ord(char) + 2)
            else:
                result += chr(ord(char) - 2)
        else:
            result += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,10,normal,"['HumanEval/93', 'HumanEval/50', 'HumanEval/38', 'HumanEval/51', '131', 'HumanEval/64', '317', 'HumanEval/89', '39', '474']","def encode(message):
    vowels = 'aeiouAEIOU'
    result = ''
    for char in message:
        if char in vowels:
            result += chr(ord(char) + 2)
        else:
            result += char.swapcase()
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,1,normal,['HumanEval/94'],"def skjkasdkd(lst):
    def isPrime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = 0
    for num in lst:
        if isPrime(num) and num > max_prime:
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,5,normal,"['HumanEval/94', '685', '558', '398', 'HumanEval/66']","def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = 0
    for num in lst:
        if is_prime(num) and num > max_prime:
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,10,normal,"['HumanEval/94', '685', '558', '398', 'HumanEval/66', 'HumanEval/59', '805', '32', '148', '566']","def skjkasdkd(lst):
    def isPrime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = 0
    for num in lst:
        if num > max_prime and isPrime(num):
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_dict_case(dictionary):
    if not dictionary:
        return False
    keys = list(dictionary.keys())
    return all(isinstance(key, str) for key in keys) and (all(key.isupper() for key in keys) or all(key.islower() for key in keys))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,5,normal,"['HumanEval/95', '523', '53', '464', '582']","def check_dict_case(d):
    if not d:
        return False
    keys = list(d.keys())
    return all(isinstance(key, str) for key in keys) and (all(key.islower() for key in keys) or all(key.isupper() for key in keys))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,10,normal,"['HumanEval/95', '523', '53', '464', '582', '917', '277', '192', '349', '737']","def check_dict_case(dict):
    if not dict:
        return False
    keys = list(dict.keys())
    all_upper = all(key.isupper() for key in keys)
    all_lower = all(key.islower() for key in keys)
    return all_upper or all_lower",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,1,normal,['256'],"def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    return [i for i in range(2, n) if is_prime(i)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['256', '605', 'HumanEval/60', 'HumanEval/96', '685']","def count_up_to(n):
    primes = []
    for possiblePrime in range(2, n):
        isPrime = True
        for num in range(2, int(possiblePrime ** 0.5) + 1):
            if possiblePrime % num == 0:
                isPrime = False
                break
        if isPrime:
            primes.append(possiblePrime)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['256', '605', 'HumanEval/60', 'HumanEval/96', '685', '211', '253', 'HumanEval/82', '66', '623']","def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = [num for num in range(2, n) if is_prime(num)]
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['726'],"def multiply(a, b):
    return (a * b) % 10 * (b * a) % 10",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['726', '98', '127', 'HumanEval/97', '445']","def multiply(a, b):
    return (a % 10) * (b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['726', '98', '127', 'HumanEval/97', '445', '919', '745', 'HumanEval/25', '577', '366']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['HumanEval/64'],"def count_upper(s):
    vowels = ""AEIOU""
    count = 0
    for i in range(len(s)):
        if i % 2 == 0 and s[i] in vowels:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['HumanEval/64', '165', '684', 'HumanEval/98', '776']","def count_upper(s):
    vowels = ""AEIOU""
    return sum(c in vowels for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['HumanEval/64', '165', '684', 'HumanEval/98', '776', '461', '806', '666', '459', '30']","def count_upper(s):
    vowels = ""AEIOU""
    return sum(c in vowels for c in s if s.index(c) % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"def closest_integer(var_0):
    from math import floor, ceil
    if var_0.count('.') == 1:
        while var_0[-1] == '0':
            var_0 = var_0[:-1]
    var_1 = float(var_0)
    if var_0[-2:] == '.5':
        if var_1 > 0:
            var_2 = ceil(var_1)
        else:
            var_2 = floor(var_1)
    elif len(var_0) > 0:
        var_2 = int(round(var_1))
    else:
        var_2 = 0
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '89', 'HumanEval/20', '435', 'HumanEval/136']","import math

def closest_integer(value):
    num = float(value)
    return math.ceil(num) if num - math.floor(num) >= 0.5 else math.floor(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '89', 'HumanEval/20', '435', 'HumanEval/136', '62', '692', '577', 'HumanEval/2', '558']","def closest_integer(var_0):
    from math import floor, ceil
    if var_0.count('.') == 1:
        while var_0[-1] == '0':
            var_0 = var_0[:-1]
    var_1 = float(var_0)
    if var_0[-2:] == '.5':
        if var_1 > 0:
            var_2 = ceil(var_1)
        else:
            var_2 = floor(var_1)
            r = ceil(var_1)
            if abs(var_1 - l) < abs(var_1 - r):
                return l
            else:
                return r
    elif var_0!= int(var_0):
        var_2 = int(round(var_1))
    else:
        var_2 = 0
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/100'],"def make_a_pile(n):
    result = [n]
    i = 1
    while True:
        if n % 2 == 0:
            n += 2
        else:
            n += 1
        result.append(n)
        i += 1
        if n > result[0] * 2:
            break
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/100', '949', 'HumanEval/113', '921', '843']","def make_a_pile(n):
    pile = [n]
    while n > 1:
        n += 1 if n % 2 else 2
        pile.append(n)
    return pile",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/100', '949', 'HumanEval/113', '921', '843', '536', 'HumanEval/60', '447', 'HumanEval/163', '342']","def make_a_pile(n):
    pile = [n]
    while n > 1:
        n = (n + 1) // 2 if n % 2 else n // 2
        pile.append(n)
    return pile",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/143'],"import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/143', 'HumanEval/125', 'HumanEval/101', '128', 'HumanEval/117']","def words_string(s):
    return [word for word in s.replace(',','').split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/143', 'HumanEval/125', 'HumanEval/101', '128', 'HumanEval/117', '118', '254', '862', '18', '374']","def words_string(s):
    return s.replace(',','').split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['41'],"def choose_num(x, y):
    even_nums = [i for i in range(x, y+1) if i % 2 == 0]
    return max(even_nums) if even_nums else -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['41', 'HumanEval/102', '907', '57', '904']","def choose_num(x, y):
    if x > y:
        return -1
    even_nums = [i for i in range(x, y+1) if i % 2 == 0]
    if even_nums:
        return max(even_nums)
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['41', 'HumanEval/102', '907', '57', '904', '122', '221', '184', 'HumanEval/99', 'HumanEval/136']","def choose_num(x, y):
    if x > y:
        return -1
    even_nums = [i for i in range(x, y+1) if i % 2 == 0]
    if even_nums:
        return max(even_nums)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['717'],"import math

def rounded_avg(n, m):
    if n > m:
        return -1
    total = sum(range(n, m + 1))
    avg = total / (m - n + 1)
    return bin(round(avg))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['717', 'HumanEval/103', '959', '830', '422']","import math

def rounded_avg(n, m):
    if n > m:
        return -1
    return bin(round(sum(range(n, m+1)) / (m - n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['717', 'HumanEval/103', '959', '830', '422', '615', '664', '375', 'HumanEval/4', '419']","import math

def rounded_avg(n, m):
    if n > m:
        return -1
    return bin(round(sum(range(n, m + 1)) / (m - n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['HumanEval/104'],"def unique_digits(x):
    return sorted([i for i in x if all(int(digit) % 2 == 1 for digit in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,5,normal,"['HumanEval/104', '41', 'HumanEval/34', '745', '426']","def unique_digits(var_0):
    var_1 = []
    for var_2 in var_0:
        if all((int(c) % 2 == 1 for c in str(var_2))):
            var_1.append(var_2)
    return sorted(var_1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,10,normal,"['HumanEval/104', '41', 'HumanEval/34', '745', '426', '845', '572', '749', '623', 'HumanEval/131']","def unique_digits(var_0):
    return sorted([var_1 for var_1 in var_0 if all(int(c) % 2 == 1 for c in str(var_1))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,1,normal,['HumanEval/88'],"def by_length(arr):
    digits = [""Zero"", ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""]
    filtered_arr = [num for num in arr if 1 <= num <= 9]
    sorted_arr = sorted(filtered_arr)
    reversed_arr = sorted_arr[::-1]
    result = [digits[num] for num in reversed_arr]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,5,normal,"['HumanEval/88', 'HumanEval/116', 'HumanEval/105', 'HumanEval/19', 'HumanEval/104']","def by_length(arr):
    num_dict = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    sorted_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)
    result = []
    for num in sorted_arr:
        result.append(num_dict[num])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,10,normal,"['HumanEval/88', 'HumanEval/116', 'HumanEval/105', 'HumanEval/19', 'HumanEval/104', '749', '644', '229', '122', 'HumanEval/145']","def by_length(arr):
    var_1 = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    var_2 = sorted([x for x in arr if 1 <= x <= 9], reverse=True)
    var_3 = []
    for x in var_2:
        var_3.append(var_1[x])
    return var_3",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,1,normal,['HumanEval/25'],"def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(math.factorial(i))
        else:
            result.append(sum(range(1, i + 1)))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['HumanEval/25', '483', '577', '905', 'HumanEval/139']","def f(n):
    return [i if i % 2 == 0 else sum(range(1, i + 1)) else math.factorial(i) for i in range(1, n + 1)]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 2)', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['HumanEval/25', '483', '577', '905', 'HumanEval/139', '873', 'HumanEval/60', '41', '445', '21']","def f(n):
    return [1 if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['485'],"def even_odd_palindrome(n):
    even = 0
    odd = 0
    for i in range(1, n + 1):
        if str(i) == str(i)[::-1] and i % 2 == 0:
            even += 1
        elif str(i) == str(i)[::-1] and i % 2!= 0:
            odd += 1
    return even, odd",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,5,normal,"['485', 'HumanEval/48', 'HumanEval/10', 'HumanEval/107', '387']","def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    even_count = 0
    odd_count = 0
    for i in range(1, n + 1):
        if is_palindrome(i) and i % 2 == 0:
            even_count += 1
        elif is_palindrome(i) and i % 2!= 0:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,10,normal,"['485', 'HumanEval/48', 'HumanEval/10', 'HumanEval/107', '387', '909', '864', 'HumanEval/155', '100', '594']","def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,1,normal,['365'],"def count_nums(arr):
    def sum_of_digits(n):
        return sum(int(digit) for digit in str(abs(n)))
    
    return sum(1 for num in arr if sum_of_digits(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,5,normal,"['365', '256', 'HumanEval/108', '398', '133']","def count_nums(arr):
    def digits_sum(num):
        sign = 1
        if num < 0:
            num, sign = (-num, -1)
        return sum(int(digit) * sign for digit in str(num))
    return len(list(filter(lambda x: x > 0, (digits_sum(num) for num in arr)))",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 7)"", 'completion_id': 0})]})"
108,HumanEval/108,10,normal,"['365', '256', 'HumanEval/108', '398', '133', 'HumanEval/113', '543', '253', '566', '558']","def count_nums(nums):
    def digits_sum(n):
        sign = 1 if n >= 0 else -1
        n = abs(n)
        return sum(int(digit) for digit in str(n)) * sign
    return sum(1 for num in nums if digits_sum(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['HumanEval/88'],"def move_one_ball(arr):
    if len(arr) == 0:
        return True
    return arr == sorted(arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,5,normal,"['HumanEval/88', 'HumanEval/116', '378', 'HumanEval/109', 'HumanEval/57']","def move_one_ball(arr):
    if len(arr) == 0:
        return True
    arr = arr[-1:] + arr[:-1]
    return arr == sorted(arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,10,normal,"['HumanEval/88', 'HumanEval/116', '378', 'HumanEval/109', 'HumanEval/57', '370', 'HumanEval/70', '644', '229', '433']","def move_one_ball(arr):
    if len(arr) == 0:
        return True
    arr.sort()
    var_2 = []
    var_3 = min(arr)
    var_4 = arr.index(var_3)
    var_2 = arr[var_4:] + arr[0:var_4]
    for var_5 in range(len(arr)):
        if var_2[var_5]!= arr[var_5]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['257'],"def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = len(lst1) - odd_count
    return ""YES"" if even_count >= odd_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,5,normal,"['257', 'HumanEval/110', '625', '591', '648']","from itertools import zip_longest

def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return 'YES' if odd_count <= even_count else 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,10,normal,"['257', 'HumanEval/110', '625', '591', '648', '298', 'HumanEval/5', '699', '595', '578']","def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if odd_count <= even_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['HumanEval/111'],"from collections import Counter

def histogram(s):
    words = s.split()
    counter = Counter(words)
    max_count = max(counter.values(), default=0)
    return {k: v for k, v in counter.items() if v == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,5,normal,"['HumanEval/111', '217', '326', '332', '602']","from collections import defaultdict

def histogram(var_0):
    var_1 = defaultdict(int)
    for var_2 in var_0.split():
        var_1[var_2] += 1
    max_count = max(var_1.values())
    return {key: value for key, value in var_1.items() if value == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['HumanEval/111', '217', '326', '332', '602', '107', '172', '130', '237', '829']","from collections import defaultdict
from collections import Counter

def histogram(var_0):
    var_1 = Counter(var_0.split())
    max_count = max(var_1.values())
    return {key: value for key, value in var_1.items() if value == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['864'],"import re

def reverse_delete(s, c):
    c = re.escape(c)
    result = re.sub(c, '', s)
    return result, result == result[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,5,normal,"['864', '456', '909', '604', 'HumanEval/112']","def reverse_delete(s, c):
    var_0 = ''.join([char for char in c])
    var_1 = ''.join([char for char in c if char not in var_0])
    return (var1, var1 == var1[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,10,normal,"['864', '456', '909', '604', 'HumanEval/112', 'HumanEval/48', 'HumanEval/10', '131', '364', 'HumanEval/107']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['238'],"def odd_count(lst):
    return [f""the number of odd elements {len([digit for digit in string if int(digit) % 2!= 0])}n the str{string[0]}ng {string[0]} of the {len(lst)}nput."" for string in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,5,normal,"['238', 'HumanEval/113', 'HumanEval/155', '226', '258']","def odd_count(lst):
    return ['the number of odd elements'+ str(sum(int(digit) % 2 for digit in string)) + 'n the str' + str(i) + 'ng'+ str(i) +'of the'+ str(i) + 'nput.' for string'+ string +'in the input.' for i, string in enumerate(lst, start=1)]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unterminated string literal (detected at line 2) (<string>, line 2)', 'completion_id': 0})]})"
113,HumanEval/113,10,normal,"['238', 'HumanEval/113', 'HumanEval/155', '226', '258', '18', '109', '78', '426', '61']","def odd_count(lst):
    return ['the number of odd elements'+ str(sum(int(digit) % 2 for digit in string)) + 'n the str' + str(sum(int(digit) % 2 for digit in string)) + 'ng'+ str(sum(int(digit) % 2 for digit in string)) +'of the'+ str(sum(int(digit) % 2 for digit in string)) + 'nput.' for string in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['511'],"def find_Min_Sum(var_0):
    sum = 0
    var_1 = 2
    while var_1 * var_1 <= var_0:
        while var_0 % var_1 == 0:
            sum += var_1
            var_0 /= var_1
        var_1 += 1
    sum += var_0
    return sum",0.0,entry point not found
114,HumanEval/114,5,normal,"['511', 'HumanEval/114', '836', '656', '559']","def minSubArraySum(var_0):
    min_sum = float('inf')
    current_sum = 0
    for var_1 in var_0:
        current_sum += var_1
        min_sum = min(min_sum, current_sum)
        if current_sum > 0:
            current_sum = 0
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,10,normal,"['511', 'HumanEval/114', '836', '656', '559', '340', '974', '734', '286', '514']","def minSubArraySum(var_0):
    min_sum = float('inf')
    current_sum = 0
    window_start = 0
    for window_end in range(len(var_0)):
        current_sum += var_0[window_end]
        while current_sum >= min_sum:
            current_sum -= var_0[window_start]
            window_start += 1
        if current_sum < min_sum:
            min_sum = current_sum
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,1,normal,['314'],"def max_fill(grid, capacity):
    rows, cols = len(grid), len(grid[0])
    total_water = sum(sum(row) for row in grid)
    max_fill = -1
    for buckets in range(1, total_water + 1):
        water = 0
        fills = 0
        for row in grid:
            for cell in row:
                if water + cell <= buckets:
                    water += cell
                else:
                    fills += (water + cell - 1) // buckets
                    water = cell
        max_fill = max(max_fill, fills)
    return max_fill",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,5,normal,"['314', '318', '303', 'HumanEval/115', '911']","def max_fill(grid, capacity):
    total_water = sum(sum(row) for row in grid)
    return math.ceil(total_water / capacity)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,10,normal,"['314', '318', '303', 'HumanEval/115', '911', '463', 'HumanEval/114', '423', '259', '836']","import math

def max_fill(grid, capacity):
    total_water = sum(sum(row) for row in grid)
    return math.ceil(total_water / capacity)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,1,normal,['HumanEval/116'],"def sort_array(arr):
    return sorted(sorted(arr, reverse=True), key=lambda x: (bin(x).count('1'), -x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,5,normal,"['HumanEval/116', 'HumanEval/88', '229', '940', '635']","import heapq

def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,10,normal,"['HumanEval/116', 'HumanEval/88', '229', '940', '635', '333', '749', 'HumanEval/19', 'HumanEval/37', '705']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['862'],"import re

def select_words(s, n):
    words = re.findall('\\w+', s)
    result = []
    for word in words:
        consonants = 0
        for char in word:
            if char.lower() not in 'aeiou':
                consonants += 1
        if consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,5,normal,"['862', 'HumanEval/143', 'HumanEval/117', 'HumanEval/125', 'HumanEval/101']","import re
from collections import Counter

def select_words(s, n):
    words = re.findall('\\w+', s)
    count = Counter(word for word in words if sum(1 for char in word if char.lower() not in 'aeiou') == n)
                    or sum(1 for char in word if char.lower() not in 'aeiou') == n)
    return [word for word in words if word in count for count in count.values() if count == n]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unexpected indent (<string>, line 7)', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['862', 'HumanEval/143', 'HumanEval/117', 'HumanEval/125', 'HumanEval/101', '537', '128', '604', '254', 'HumanEval/15']","import re
from collections import Counter

def select_words(s, n):
    words = re.findall('\\w+', s)
    count = Counter(word for word in words if word[0].lower() not in 'aeiou')
    return [word for word in words if word[0].lower() not in 'aeiou' and count[word] == n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/64'],"def closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, -1, -1):
        if word[i] in vowels:
            if word[i - 1] not in vowels and word[i + 1] not in vowels:
                return word[i]
    return """"",0.0,entry point not found
118,HumanEval/118,5,normal,"['HumanEval/64', 'HumanEval/118', 'HumanEval/51', '131', '776']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels:
            if word[i - 1] not in vowels and word[i + 1] not in vowels:
                return word[i]
    return ''",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,10,normal,"['HumanEval/64', 'HumanEval/118', 'HumanEval/51', '131', '776', 'HumanEval/134', 'HumanEval/117', '643', '868', '83']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels:
            if word[i - 1] not in vowels and word[i + 1] not in vowels:
                return word[i]
    return ''",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,1,normal,['HumanEval/119'],"def match_parens(lst):
    def check(s):
        balance = 0
        for c in s:
            if c == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    return 'Yes' if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,5,normal,"['HumanEval/119', '178', 'HumanEval/56', 'HumanEval/61', '186']","def match_parens(lst):
    def check(s):
        var_2 = 0
        for var_3 in s:
            if var_3 == '(':
                var_2 += 1
            else:
                var_2 -= 1
            if var_2 < 0:
                return False
        return True if var_2 == 0 else False
    return 'Yes' if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,10,normal,"['HumanEval/119', '178', 'HumanEval/56', 'HumanEval/61', '186', 'HumanEval/6', '53', '30', '338', '482']","def match_parens(lst):
    def check(s):
        return s.count('(') == s.count(')')

    return 'Yes' if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['57'],"import heapq

def max_num(arr, k):
    return heapq.nlargest(k, arr)",0.0,entry point not found
120,HumanEval/120,5,normal,"['57', '836', 'HumanEval/158', '463', 'HumanEval/120']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,10,normal,"['57', '836', 'HumanEval/158', '463', 'HumanEval/120', '559', 'HumanEval/136', '911', '259', '122']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['881'],"def solution(lst):
    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['881', 'HumanEval/113', '797', '770', '549']","def solution(lst):
    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['881', 'HumanEval/113', '797', '770', '549', '775', '790', '784', '782', '853']","def solution(lst):
    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['514'],"def elements(arr, k):
    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)",0.0,entry point not found
122,HumanEval/122,5,normal,"['514', '363', '398', '123', 'HumanEval/122']","def elements(arr, k):
    return sum(i for i in arr[:k] if len(str(i)) <= 2)",0.0,entry point not found
122,HumanEval/122,10,normal,"['514', '363', '398', '123', 'HumanEval/122', 'HumanEval/85', '148', '566', '675', '559']","def elements(arr, k):
    return sum(num for num in arr[:k] if len(str(num)) <= 2)",0.0,entry point not found
123,HumanEval/123,1,normal,['HumanEval/123'],"def get_odd_collatz(n):
    sequence = [n]
    while n!= 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = n * 3 + 1d
        if n % 2 == 1:
            sequence.append(int(n))
    return sorted(list(set(sequence)))",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid decimal literal (<string>, line 7)', 'completion_id': 0})]})"
123,HumanEval/123,5,normal,"['HumanEval/123', '556', '406', 'HumanEval/113', '775']","def get_odd_collatz(n):
    odd_numbers = [n]
    while n!= 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        if n % 2 == 1:
            n += 1
        if n % 2!= 0:
            odd_numbers.append(n)
    return sorted(odd_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,10,normal,"['HumanEval/123', '556', '406', 'HumanEval/113', '775', '426', '258', 'HumanEval/155', '784', '274']","def get_odd_collatz(n):
    def collatz(n):
        sequence = [n]
        while n!= 1:
            if n % 2 == 0:
                n = n // 2
            else:
                n = 3 * n + 1
            sequence.append(n)
        return sequence

    sequence = collatz(n)
    return sorted([num for num in sequence if num % 2!= 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,1,normal,['910'],"from datetime import datetime

def valid_date(date):
    try:
        day, month, year = map(int, date.split('-'))
        if not (1 <= month <= 12):
            return False
        if month in [1, 3, 5, 7, 8, 10, 12]:
            return 1 <= day <= 31
        elif month in [4, 6, 9, 11]:
            return 1 <= day <= 30
        else:
            return 1 <= day <= 29
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['910', 'HumanEval/124', '336', '191', '866']","from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        month, day, year = map(int, date.split('-'))
        if month < 1 or month > 12:
            return False
        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:
            return False
        if month in [4, 6, 9, 11] and day < 1 or day > 30:
            return False
        if month == 2 and (day < 1 or day > 29):
            return False
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['910', 'HumanEval/124', '336', '191', '866', '455', '403', '762', '820', '906']","import re

def valid_date(var_0):
    try:
        var_0 = var_0.strip()
        var_1, var_2, var_3 = var_0.split('-')
        var_1, var_2, var_3 = (int(var_1), int(var_2), int(var_3))
        if var_1 < 1 or var_1 > 12:
            return False
        if var_1 in [1, 3, 5, 7, 8, 10, 12] and var_2 < 1 or var_2 > 31:
            return False
        if var_1 in [4, 6, 9, 11] and var_2 < 1 or var_2 > 30:
            return False
        if var_1 == 2 and var_2 < 1 or var_2 > 29:
            return False
        return True
    except:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['HumanEval/125'],"def split_words(var_0):
    if'' in var_0:
        return var_0.split()
    elif ',' in var_0:
        return var_0.replace(',','').split()
    else:
        return sum(1 for i in var_0 if i.islower() and ord(i) % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,5,normal,"['HumanEval/125', 'HumanEval/143', '128', 'HumanEval/101', 'HumanEval/117']","def split_words(var_0):
    if'' in var_0:
        return var_0.split()
    elif ',' in var_0:
        return var_0.replace(',','').split()
    else:
        return sum(1 for i in var_0 if i.islower() and ord(i) % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,10,normal,"['HumanEval/125', 'HumanEval/143', '128', 'HumanEval/101', 'HumanEval/117', '956', '79', '964', '748', '15']","import re

def split_words(var_0):
    if'' in var_0:
        return var_0.split()
    elif ',' in var_0:
        return var_0.replace(',','').split()
    else:
        return len([i for i in var_0 if i.islower() and ord(i) % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['HumanEval/19'],"def is_sorted(lst):
    return lst == sorted(lst) and len(lst) == len(set(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,5,normal,"['HumanEval/19', '472', 'HumanEval/57', 'HumanEval/126', '567']","def is_sorted(lst):
    if any(lst.count(i) > 1 for i in lst):
        return False
    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['HumanEval/19', '472', 'HumanEval/57', 'HumanEval/126', '567', '889', 'HumanEval/70', '104', '705', '569']","def is_sorted(lst):
    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)) and len(set(lst)) == len(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"import math

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    intersection_length = intersection_end - intersection_start
    if intersection_length > 0 and is_prime(intersection_length):
        return 'YES'
    return 'NO'

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', '473', 'HumanEval/82', '605', '249']","def intersection(var_0, var_1):
    def is_prime(var_2):
        if var_2 == 1 or var_2 == 0:
            return False
        if var_2 == 2:
            return True
        for var_3 in range(2, var_2):
            if var_2 % var_3 == 0:
                return False
        return True
    var_4 = max(var_0[0], var_1[0])
    var_5 = min(var_0[1], var_1[1])
    var_6 = var_5 - var_4
    if var_6 > 0 and is_prime(var_6):
        return 'YES'
    return 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', '473', 'HumanEval/82', '605', '249', 'HumanEval/31', '298', 'HumanEval/39', '256', '685']","def intersection(var_0, var_1):
    def is_prime(var_2):
        if var_2 < 2:
            return False
        for var_3 in range(2, int(var_2 ** 0.5) + 1):
            if var_2 % var_3 == 0:
                return False
        return True

    var_4 = max(var_0[0], var_1[0])
    var_5 = min(var_0[1], var_1[1])
    var_6 = var_5 - var_4
    if var_6 > 0 and is_prime(var_6):
        return 'YES'
    return 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['HumanEval/8'],"def prod_signs(arr):
    if not arr:
        return None
    sign_product = 1
    magnitude_sum = 0
    for num in arr:
        if num!= 0:
            sign_product *= 1 if num > 0 else -1
            magnitude_sum += abs(num)
    return sign_product * magnitude_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['HumanEval/8', 'HumanEval/128', '734', '922', '463']","def prod_signs(arr):
    if not arr:
        return None
    sign = 1
    for num in arr:
        if num < 0:
            sign *= -1
    return sum(abs(num) for num in arr) * sign",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['HumanEval/8', 'HumanEval/128', '734', '922', '463', '415', '911', '188', '366', '123']","def prod_signs(arr):
    if not arr:
        return None
    sign = 1
    for num in arr:
        if num < 0:
            sign *= -1
    return sign * sum(abs(num) for num in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['974'],"def fruit_stand(fruit):
    # Define the fruit stand
    stand = {
        ""apple"": 1.00,
        ""banana"": 0.50,
        ""orange"": 1.00,
        ""grape"": 2.00
    }

    # Check if the fruit is in the stand
    if fruit in stand:
        return stand[fruit]
    else:
        return ""Fruit not found in the stand""",0.0,entry point not found
129,HumanEval/129,5,normal,"['974', 'HumanEval/129', '753', '721', '94']","def fruit_basket(grid):
    def dfs(i, j):
        if 0 <= i < len(grid) and 0 <= j < len(grid[0]) and grid[i][j]!= 0:
            grid[i][j] = 0
            dfs(i-1, j)
            dfs(i+1, j)
            dfs(i, j-1)
            dfs(i, j+1)

    def find_fruit():
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]!= 0:
                    dfs(i, j)
                    return True
        return False

    if find_fruit():
        return ""Fruit Basket""
    else:
        return ""No Fruit Basket""",0.0,entry point not found
129,HumanEval/129,10,normal,"['974', 'HumanEval/129', '753', '721', '94', '50', '408', '322', '95', 'HumanEval/136']","def fruit():
    def is_valid(s):
        return s.isdigit() or s == '-'

    def check(s):
        if s[0] == '-':
            return s[1:].isdigit()
        return s.isdigit()

    def dfs(i, j, visited, grid):
        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or visited[i][j] or grid[i][j] == 0:
            return 0
        visited[i][j] = True
        return 1 + dfs(i + 1, j, visited, grid) + dfs(i - 1, j, visited, grid) + dfs(i, j + 1, visited, grid) + dfs(i, j - 1, visited, grid)

    def find_max_area(grid):
        max_area = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    visited = [[False for _ in range(len(grid[0]))] for _ in range(len(grid))]
                    max_area = max(max_area, dfs(i, j, visited, grid))
        return max_area

    grid = [[1, 0, 1, 0, 0],
            [1, 0, 1, 0, 1],
            [1, 1, 1, 0, 1],
            [1, 0, 0, 0, 1]]
    return find_max_area(grid)",0.0,entry point not found
130,HumanEval/130,1,normal,['873'],"import math

def tribonacci(n):
    if n == 1 or n == 2:
        return 1
    elif n == 3:
        return 2
    else:
        a, b, c = 1, 1, 2
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c
            return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['873', 'HumanEval/130', '239', '926', '84']","def tribonacci(n):
    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return 1
    else:
        a, b, c = 0, 1,  # Initialize the first three numbers of the sequence
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c  # Update the sequence
        return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['873', 'HumanEval/130', '239', '926', '84', 'HumanEval/46', 'HumanEval/39', '623', 'HumanEval/55', '274']","def tribonacci(var_0):
    if var_0 == 0:
        return 0
    elif var_0 == 1 or var_0 == 2:
        return 1
    else:
        return tribonacci(var_0 - 1) + tribonacci(var_0 - 2) + tribonacci(var_0 - 3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['479'],"def digits(n):
    product = 1
    while n > 0:
        digit = n % 10
        if digit % 2!= 0:
            product *= digit
        n //= 10
    return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['479', '745', '845', '577', 'HumanEval/131']","import math

def digits(n):
    product = 1
    count = 0
    for digit in str(n):
        if int(digit) % 2 == 1:
            product *= int(digit)
            count += 1
    if count == 0:
        return 0
    else:
        return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['479', '745', '845', '577', 'HumanEval/131', '365', 'HumanEval/66', '657', '36', '398']","import math

def digits(n):
    product = 1
    count = 0
    for digit in str(n)
        if int(digit) % 2 == 1:
            product *= int(digit)
            count += 1
    if count == 0:
        return 0
    else:
        return product",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected ':' (<string>, line 6)"", 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['HumanEval/132'],"def is_nested(s):
    stack = []
    count = 0
    for char in s:
        if char == '[':
            stack.append(char)
        else:
            if stack:
                stack.pop()
                count = len(stack)
                if count > 0:
                    count += 1
    return count > 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['HumanEval/132', '823', '91', 'HumanEval/56', 'HumanEval/61']","def is_nested(s):
    stack = []
    for char in s:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['HumanEval/132', '823', '91', 'HumanEval/56', 'HumanEval/61', '175', '192', '771', '576', 'HumanEval/6']","def is_nested(s):
    stack = []
    for char in s:
        if char == '[':
            stack.append(char)
        else:
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['267'],"import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['267', 'HumanEval/142', 'HumanEval/133', '683', '287']","import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,10,normal,"['267', 'HumanEval/142', 'HumanEval/133', '683', '287', '420', '837', '905', '514', '419']","import math

def sum_squares(var_0):
    return sum(math.ceil(i) ** 2 for i in var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['192'],"def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    last_char = txt[-1]
    return last_char.isalpha() and not txt[-2:].isalnum()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,5,normal,"['192', '352', 'HumanEval/134', '523', '396']","import re

def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    words = txt.split()
    last_word = words[-1]
    return len(last_word) == 1 and last_word.isalpha()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,10,normal,"['192', '352', 'HumanEval/134', '523', '396', '210', '860', '546', '182', '134']","def check_if_last_char_is_a_letter(txt):
    ):
    if not txt:
        return False
    words = txt.split()
    last_word = words[-1]
    return len(last_word) > 1 and last_word[-1].isalpha()",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 2)"", 'completion_id': 0})]})"
135,HumanEval/135,1,normal,['HumanEval/88'],"def can_arrange(arr):
    for i in range(1, len(arr)):
        if arr[i] >= arr[i-1]:
            return i-1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,5,normal,"['HumanEval/88', 'HumanEval/116', '433', '229', 'HumanEval/135']","def can_arrange(arr):
    for i in range(1, len(arr)):
        if arr[i] <= arr[i - 1]:
            return i - 1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,10,normal,"['HumanEval/88', 'HumanEval/116', '433', '229', 'HumanEval/135', '472', 'HumanEval/158', '407', '381', '200']","def can_arrange(arr):
    var_1 = -1
    for var_2 in range(1, len(arr)):
        if arr[var_2] < arr[var_2 - 1]:
            var_1 = var_2
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,1,normal,['HumanEval/136'],"def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,5,normal,"['HumanEval/136', '62', '408', 'HumanEval/90', '755']","import heapq

def largest_smallest_integers(lst):
    negative_nums = [num for num in lst if num < 0]
    positive_nums = [num for num in lst if num > 0]
    return (max(negative_nums) if negative_nums else None, min(positive_nums) if positive_nums else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,10,normal,"['HumanEval/136', '62', '408', 'HumanEval/90', '755', '496', 'HumanEval/12', 'HumanEval/22', 'HumanEval/163', 'HumanEval/24']","def largest_smallest_integers(lst):
    negative = [x for x in lst if x < 0]
    positive = [x for x in lst if x > 0]
    return (max(negative) if negative else None, min(positive) if positive else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,1,normal,['HumanEval/152'],"def compare_one(var_0, var_1):
    if isinstance(var_0, (int, float)) and isinstance(var_1, (int, float)):
        return var_0 if var_0 > var_1 else var_1
    elif isinstance(var_0, str) and isinstance(var_1, str):
        return var_0 if var_0 > var_1 else var_1
    else:
        raise TypeError(""Both variables must be of the same type"")",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,5,normal,"['HumanEval/152', 'HumanEval/102', '433', 'HumanEval/137', '177']","def compare_one(var_0, var_1):
    if isinstance(var_0, str):
        var_0 = var_0.replace(',', '.')
    if isinstance(var_1, str):
        var_1 = var_1.replace(',', '.')
    if float(var_0) == float(var_1):
        return None
    return var_0 if float(var_0) > float(var_1) else var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,10,normal,"['HumanEval/152', 'HumanEval/102', '433', 'HumanEval/137', '177', '970', '695', '292', '555', '924']","def compare_one(var_0, var_1):
    if isinstance(var_0, str):
        var_0 = var_0.replace(',', '.')
    if isinstance(var_1, str):
        var_1 = var_1.replace(',', '.'))
    if float(var_0) == float(var_1):
        return None
    return var_0 if float(var_0) > float(var_1) else var_1",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 5)"", 'completion_id': 0})]})"
138,HumanEval/138,1,normal,['271'],"def is_equal_to_sum_even(n):
    for i in range(1, n + 1):
        for j in range(i, n + 1):
            for k in range(j, n + 1):
                for last in range(k, n + 1):
                    if i + j + k + last == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and last % 2 == 0:
                    return True
    return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'if' statement on line 6 (<string>, line 7)"", 'completion_id': 0})]})"
138,HumanEval/138,5,normal,"['271', '274', 'HumanEval/138', '123', '600']","def is_equal_to_sum_even(n):
    for i in range(1, n):
        for j in range(i, n):
            for k in range(j, n):
                for last in range(k, n):
                    if i + j + k + last == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and last % 2 == 0:
                        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,10,normal,"['271', '274', 'HumanEval/138', '123', '600', '904', '634', '881', '138', '962']","def is_equal_to_sum_even(n):
    for i in range(1, n):
        for j in range(i, n):
            for k in range(j, n):
                for l in range(k, n):
                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:
                        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,1,normal,['483'],"import math

def first_Factorial_Divisible_Number(n):
    var_1 = 1
    var_2 = 1
    for var_0 in range(1, n):
        var_2 = var_2 * var_0
        var_1 = var_0
        if var_2 % n == 0:
            break
    return var_1",0.0,entry point not found
139,HumanEval/139,5,normal,"['483', '32', '905', '577', 'HumanEval/139']","import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,10,normal,"['483', '32', '905', '577', 'HumanEval/139', '873', '745', '926', '583', 'HumanEval/39']","import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,1,normal,['631'],"import re

def fix_spaces(text):
    """"""
    Given a string text, replace all spaces with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
    text = re.sub(' +', '-', text)
    text = text.replace(' ', '_')
    return text",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,5,normal,"['631', '892', '678', '693', 'HumanEval/140']","import re

def fix_spaces(text):
    text = re.sub(' +', '-', text)
    )
    text = text.replace(' ', '')
    return text",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 5)"", 'completion_id': 0})]})"
140,HumanEval/140,10,normal,"['631', '892', '678', '693', 'HumanEval/140', '628', '800', '542', '451', '748']","import re

def fix_spaces(var_0):
    return re.sub(' +', lambda m: '-' if len(m.group(0)) > 2 else m.group(0), var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    allowed_extensions = ['txt', 'exe', 'dll']
    file_name_parts = file_name.split('.')
    if len(file_name_parts)!= 2:
        return 'No'
    if file_name_parts[1] not in allowed_extensions:
        return 'No'
    if len(file_name_parts[0]) == 0:
        return 'No'
    if not file_name_parts[0][0].isalpha():
        return 'No'
    if sum(c.isdigit() for c in file_name_parts[0]) > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '823', '396', '737']","import re

def file_name_check(file_name):
    extensions = ['txt', 'exe', 'dll']
    parts = file_name.split('.')
    if len(parts)!= 2:
        return 'No'
    if not parts[1] in extensions:
        return 'No'
    if len(parts[0]) == 0:
        return 'No'
    if not parts[0][0].isalpha():
        return 'No'
    if len(re.findall('\d', parts[0])) > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '823', '396', '737', '175', '403', '822', '860', '192']","import re

def file_name_check(file_name):
    extensions = ['txt', 'exe', 'dll']
    parts = file_name.split('.')
    if len(parts)!= 2:
        return 'No'
    if parts[1] not in extensions:
        return 'No'
    if len(parts[0]) == 0:
        return 'No'
    if not parts[0][0].isalpha():
        return 'No'
    if len([char for char in parts[0] if char.isdigit()]) > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,1,normal,['267'],"def sum_squares(lst):
    return sum(
        x**2 if i % 3 == 0 else 
        x**3 if i % 4 == 0 and i % 3!= 0 else 
        x for i, x in enumerate(lst)
    )",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,5,normal,"['267', 'HumanEval/142', '837', 'HumanEval/133', '287']","def sum_squares(lst):
    result = []
    for i, num in enumerate(lst):
        if i % 3 == 0:
            result.append(num ** 2)
        elif i % 4 == 0 and i % 3!= 0:
            result.append(num ** 3)
        else:
            result.append(num)
    return sum(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,10,normal,"['267', 'HumanEval/142', '837', 'HumanEval/133', '287', '420', '683', '905', '340', '170']","def sum_squares(lst):
    result = []
    for i in range(len(lst)):
        if i % 3 == 0:
            result.append(lst[i] ** 2)
        elif i % 4 == 0 and i % 3!= 0:
            result.append(lst[i] ** 3)
        else:
            result.append(lst[i])
    return sum(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,1,normal,['HumanEval/143'],"def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    return''.join([word for word in sentence.split() if is_prime(len(word))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,5,normal,"['HumanEval/143', 'HumanEval/125', '128', 'HumanEval/101', 'HumanEval/117']","import sympy

def words_in_sentence(sentence):
    words = sentence.split()
    result = []
    for word in words:
        if sympy.isprime(len(word)):
            result.append(word)
    return''.join(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,10,normal,"['HumanEval/143', 'HumanEval/125', '128', 'HumanEval/101', 'HumanEval/117', '964', '254', '79', '862', '570']","import re

def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    words = sentence.split()
    result = [word for word in words if is_prime(len(word))]
    return''.join(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,1,normal,['HumanEval/25'],"from math import gcd

def simplify(x: str, n: str) -> bool:
    x_num, x_den = map(int, x.split('/'))
    n_num, n_den = map(int, n.split('/'))
    
    # Calculate the product of the two fractions
    product_num = x_num * n_num
    product_den = x_den * n_den
    
    # Calculate the greatest common divisor of the product's numerator and denominator
    common_divisor = gcd(product_num, product_den)
    
    # If the greatest common divisor is 1, then the product is a whole number
    return common_divisor == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['HumanEval/25', '749', 'HumanEval/144', '900', '123']","from fractions import Fraction

def simplify(x, n):
    frac_x = Fraction(x)
    frac_n = Fraction(n)
    return frac_x * frac_n == int(frac_x * frac_n)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,10,normal,"['HumanEval/25', '749', 'HumanEval/144', '900', '123', '913', '621', '577', '623', '41']","from fractions import Fraction

def simplify(x, n):
    frac_x = Fraction(x)
    frac_n = Fraction(n)
    return frac_x * frac_n == int(frac_x * frac_n)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,1,normal,['HumanEval/145'],"def order_by_points(nums):
    def digits_sum(num):
        return sum(int(digit) for digit in str(abs(num)))
    return sorted(nums, key=digits_sum)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,5,normal,"['HumanEval/145', '749', 'HumanEval/19', '705', 'HumanEval/149']","def order_by_points(nums):
    def digits_sum(num):
        return sum(int(digit) for digit in str(abs(num)))
    return sorted(nums, key=digits_sum)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,10,normal,"['HumanEval/145', '749', 'HumanEval/19', '705', 'HumanEval/149', '104', 'HumanEval/116', '569', '516', '37']","def order_by_points(nums):
    def digits_sum(num):
        return sum(int(digit) for digit in str(abs(num)))
    return sorted(nums, key=digits_sum)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,1,normal,['41'],"def specialFilter(nums):
    def is_special(num):
        return num > 10 and num % 10 % 10 > 0 and num // 10 % 10 > 0

    return sum(1 for num in nums if is_special(num))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,5,normal,"['41', 'HumanEval/146', '817', '426', '883']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            first_digit = int(str(num)[0])
            last_digit = int(str(num)[-1])
            if first_digit in [1, 3, 5, 7, 9] and last_digit in [1, 3, 5, 7, 9]:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,10,normal,"['41', 'HumanEval/146', '817', '426', '883', '433', '258', '184', '623', '692']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            var_2 = (1, 3, 5, 7, 9)
            var_3 = str(num)
            if int(var_3[0]) in var_2 and int(var_3[-1]) in var_2:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,1,normal,['HumanEval/147'],"def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,5,normal,"['HumanEval/147', '916', '121', '611', '21']","def max_triples = lambda n: sum((n * n - n + 1) % 3 == (i + j) % 3 for i in range(1, n) for j in range(i + 1, n))",0.0,entry point not found
147,HumanEval/147,10,normal,"['HumanEval/147', '916', '121', '611', '21', '415', '120', '672', '747', '661']","def max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",0.0,entry point not found
148,HumanEval/148,1,normal,['HumanEval/148'],"def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    planets = sorted(planets, key=lambda x: planets.index(x))
    index1 = planets.index(planet1)
    index2 = planets.index(planet2)
    if index1 < index2:
        return tuple(planets[index1 + 1:index2])
    else:
        return tuple(planets[index2 + 1:index1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,5,normal,"['HumanEval/148', '873', 'HumanEval/63', '119', '492']","def bf(planet1, planet2):
    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    if planet1 not in planets or planet2 not in planets:
        return ()
    index1 = planets.index(planet1)
    index2 = planets.index(planet2)
    if index1 > index2:
        index1, index2 = index2, index1
    return tuple(sorted(planets[index1 + 1:index2]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,10,normal,"['HumanEval/148', '873', 'HumanEval/63', '119', '492', '846', '292', '502', '579', '150']","def bf(planet1, planet2):
    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    if planet1 not in planets or planet2 not in planets:
        return ()
    index1 = planets.index(planet1)
    index2 = planets.index(planet2)
    if index1 > index2:
        index1, index2 = index2, index1
    return tuple(planets[index1 + 1:index2])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,1,normal,['HumanEval/149'],"def sorted_list_sum(lst):
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,5,normal,"['HumanEval/149', '37', '877', '749', '108']","def sorted_list_sum(lst):
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,10,normal,"['HumanEval/149', '37', '877', '749', '108', '65', '705', '104', '889', '569']","def sorted_list_sum(lst):
    return sorted([var_2 for var_2 in lst if len(var_2) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,1,normal,['605'],"import math

def x_or_y(n, x, y):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    return x if is_prime(n) else y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['605', 'HumanEval/82', 'HumanEval/31', '260', 'HumanEval/150']","def x_or_y(n, x, y):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    if is_prime(n):
        return x
    else:
        return y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,10,normal,"['605', 'HumanEval/82', 'HumanEval/31', '260', 'HumanEval/150', '256', 'HumanEval/39', 'HumanEval/75', 'HumanEval/127', 'HumanEval/11']","def x_or_y(n, x, y):
    def is_prime(var_0):
        if var_0 < 2:
            return False
        for var_1 in range(2, int(var_0 ** 0.5) + 1):
            if var_0 % var_1 == 0:
                return False
        return True
    return x if is_prime(n) else y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,1,normal,['555'],"def double_the_difference(lst):
    return sum(i**2 for i in lst if i % 2!= 0 and i >= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,5,normal,"['555', 'HumanEval/151', '320', '72', '594']","def double_the_difference(lst):
    return sum(i ** 2 for i in lst if i > 0 and isinstance(i, int) and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,10,normal,"['555', 'HumanEval/151', '320', '72', '594', '344', 'HumanEval/133', '770', '549', '881']","def double_the_difference(lst):
    return sum(i ** 2 for i in lst if i > 0 and isinstance(i, int) and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['433'],"def compare(scores, guesses):
    return [abs(score - guess) if score!= guess else 0 for score, guess in zip(scores, guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['433', 'HumanEval/152', '53', '695', '636']","def compare(scores, guesses):
    return [abs(score - guess) for score, guess in zip(scores, guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['433', 'HumanEval/152', '53', '695', '636', 'HumanEval/74', '840', 'HumanEval/137', '359', '285']","def compare(var_0, var_1):
    return [abs(x - y) for x, y in zip(var_0, var_1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/153'],"def Strongest_Extension(class_name, extensions):
    strongest = extensions[0]
    max_strength = len([c for c in strongest if c.isupper()]) - len([c for c in strongest if c.islower()])
    for extension in extensions[1:]:
        strength = len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()])
        if strength > max_strength:
            strongest = extension
            max_strength = strength
    return f""{class_name}.{strongest}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,5,normal,"['HumanEval/153', '393', 'HumanEval/12', '806', '220']","def Strongest_Extension(class_name, extensions):
    strongest = extensions[0]
    max_strength = len([x for x in strongest if x.isupper()]) - len([x for x in strongest if x.islower()])
    for extension in extensions[1:]:
        strength = len([x for x in extension if x.isupper()]) - len([x for x in extension if x.islower()])
        if strength > max_strength:
            strongest = extension
            max_strength = strength
    return class_name + '.' + strongest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,10,normal,"['HumanEval/153', '393', 'HumanEval/12', '806', '220', '832', '207', 'HumanEval/14', '937', '315']","def Strongest_Extension(class_name, extensions):
    strongest = extensions[0]
    max_strength = len([x for x in strongest if x.isalpha() and x.isupper()]) - len([x for x in strongest if x.isalpha() and x.islower()])
    for extension in extensions[1:]:
        strength = len([x for x in extension if x.isalpha() and x.isupper()]) - len([x for x in extension if x.isalpha() and x.islower()])
        if strength > max_strength:
            strongest = extension
            max_strength = strength
    return class_name + '.' + strongest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,1,normal,['823'],"import re

def cycpattern_check(a, b):
    if b in a:
        return True
    for i in range(len(b)):
        b = b[i:] + b[:i]
        if b in a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,5,normal,"['823', '643', 'HumanEval/154', '91', '186']","import re

def cycpattern_check(a, b):
    b = b + b
    for i in range(len(a) - len(b) + 1):
        if re.search(b, a[i:i+len(b)]):
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,10,normal,"['823', '643', 'HumanEval/154', '91', '186', '178', '897', '871', '192', '454']","def cycpattern_check(a, b):
    b_len = len(b)
    b_rotations = b + b
    return b in a or b_rotations in a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,1,normal,['HumanEval/155'],"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['HumanEval/155', '258', 'HumanEval/113', '904', '387']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['HumanEval/155', '258', 'HumanEval/113', '904', '387', '784', '78', '155', '383', '109']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['958'],"def int_to_mini_roman(number):
    roman_numerals = [
        (1000, 'M'),
        (900, 'CM'),
        (500, 'D'),
        (400, 'CD'),
        (100, 'C'),
        (90, 'XC'),
        (50, 'L'),
        (40, 'XL'),
        (10, 'X'),
        (9, 'IX'),
        (5, 'V'),
        (4, 'IV'),
        (1, 'I')
    ]
    result = ''
    for value, numeral in roman_numerals:
        while number >= value:
            result += numeral
            number -= value
    return result.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['958', '961', '494', '116', 'HumanEval/156']","def int_to_mini_roman(var_0):
    var_1 = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    var_2 = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
    var_3 = ''
    var_4 = 0
    while var_0 > 0:
        for var_5 in range(var_0 // var_1[var_4]):
            var_3 += var_2[var_4]
            var_0 -= var_1[var_4]
        var_4 += 1
    return var_3",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['958', '961', '494', '116', 'HumanEval/156', '764', '785', '62', '479', '749']","def int_to_mini_roman(number):
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4, 1
        ]
    syb = [
        ""M"", ""CM"", ""D"", ""CD"",
        ""C"", ""XC"", ""L"", ""XL"",
        ""X"", ""IX"", ""V"", ""IV"",
        ""I""
        ]
    roman_num = ''
    i = 0
    while  number > 0:
        for _ in range(number // val[i]):
            roman_num += syb[i]
            number -= val[i]
        i += 1
    return roman_num.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['826'],"import math

def right_angle_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return sides[0]**2 + sides[1]**2 == sides[2]**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,5,normal,"['826', 'HumanEval/157', '449', '176', '677']","import math

def right_angle_triangle(a, b, c):
    return (a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,10,normal,"['826', 'HumanEval/157', '449', '176', '677', '850', '198', '236', 'HumanEval/71', '51']","import math

def right_angle_triangle(a, b, c):
    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,1,normal,['480'],"from collections import Counter

def find_max(words):
    max_unique = 0
    result = """"
    for word in words:
        unique_chars = len(Counter(word))
        if unique_chars > max_unique:
            max_unique = unique_chars
            result = word
        elif unique_chars == max_unique:
            result = min(result, word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['480', '937', 'HumanEval/158', 'HumanEval/117', '128']","from collections import Counter

def find_max(words):
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['480', '937', 'HumanEval/158', 'HumanEval/117', '128', '862', '357', '315', '393', '562']","from collections import Counter

def find_max(words):
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['HumanEval/159'],"def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['HumanEval/159', '907', 'HumanEval/102', '31', '123']","def eat(number, need, remaining):
    return [number + min(need, remaining), max(0, remaining - need)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['HumanEval/159', '907', 'HumanEval/102', '31', '123', '211', '167', '365', '169', 'HumanEval/115']","def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['218'],"def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i + 1]
        elif operator[i] == '-':
            result -= operand[i + 1]
        elif operator[i] == '*':
            result *= operand[i + 1]
        elif operator[i] == '//':
            result //= operand[i + 1]
        elif operator[i] == '**':
            result **= operand[i + 1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,5,normal,"['218', 'HumanEval/25', 'HumanEval/32', 'HumanEval/160', '445']","def do_algebra(operator, operand):
    expression = ''
    for i in range(len(operand) - 1):
        expression += str(operand[i]) + operator[i]
    expression += str(operand[-1])
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,10,normal,"['218', 'HumanEval/25', 'HumanEval/32', 'HumanEval/160', '445', '261', '726', 'HumanEval/11', '919', '343']","def do_algebra(operator, operand):
    expression = ''
    for i in range(len(operand)):
        expression += str(operand[i])
        if i < len(operator):
            expression += operator[i]
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,1,normal,['HumanEval/27'],"def solve(s: str) -> str:
    result = """"
    has_letter = False
    for c in s:
        if c.isalpha():
            has_letter = True
            result += c.swapcase()
        else:
            result += c
    return result if has_letter else result[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,5,normal,"['HumanEval/27', '557', '364', 'HumanEval/161', 'HumanEval/84']","def solve(s):
    result = ''
    for char in s:
        if char.isalpha():
            result += char.swapcase()
        else:
            result += char
    return result[::-1] if not any(c.isalpha() for c in s) else result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,10,normal,"['HumanEval/27', '557', '364', 'HumanEval/161', 'HumanEval/84', '917', '456', 'HumanEval/64', '91', 'HumanEval/134']","def solve(s):
    result = ''
    for char in s:
        if char.isalpha():
            result += char.swapcase()
        else:
            result += char
    return result[::-1] if not any(char.isalpha() for char in s) else result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def string_to_md5(text):
    if not text:
        return None
    return hashlib.md5(text.encode('ascii')).hexdigest()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,5,normal,"['HumanEval/162', 'HumanEval/89', '132', '877', '330']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,10,normal,"['HumanEval/162', 'HumanEval/89', '132', '877', '330', '217', 'HumanEval/11', '226', '39', '374']","import hashlib

def string_to_md5(text):
    if not text:
        return None
    return hashlib.md5(text.encode('ascii')).hexdigest()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,1,normal,['HumanEval/163'],"def generate_integers(a, b):
    return [i for i in range(max(a, b), min(a, b) + 1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,5,normal,"['HumanEval/163', '166', '41', '745', '621']","def generate_integers(a, b):
    return [i for i in range(max(2, min(a, b)), min(8, max(a, b)) + 1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,10,normal,"['HumanEval/163', '166', '41', '745', '621', '692', '345', '558', '494', '503']","def generate_integers(a, b):
    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
