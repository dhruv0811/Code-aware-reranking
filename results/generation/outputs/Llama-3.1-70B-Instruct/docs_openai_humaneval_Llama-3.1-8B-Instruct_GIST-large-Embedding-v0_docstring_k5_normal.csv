query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', '89', 'HumanEval/127']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', '89', 'HumanEval/127', '431', '26', '284', '942', '184']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(len(numbers) - 1):
        if numbers[i + 1] - numbers[i] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/1'],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string.replace(' ', ''):
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/1', 'HumanEval/6', 'HumanEval/132', '640', '417']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string.replace(' ', ''):
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,10,normal,"['HumanEval/1', 'HumanEval/6', 'HumanEval/132', '640', '417', 'HumanEval/61', 'HumanEval/56', '628', '956', '538']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string.replace(' ', ''):
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/2'],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/2', 'HumanEval/99', '194', '467', '692']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/2', 'HumanEval/99', '194', '467', '692', '208', '759', '252', '435', 'HumanEval/21']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/40', 'HumanEval/43', 'HumanEval/32']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/40', 'HumanEval/43', 'HumanEval/32', '899', '870', '541', '113', '133']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['HumanEval/4'],"from typing import List
import statistics


def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = statistics.mean(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['HumanEval/4', '717', '63', '875', '664']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['HumanEval/4', '717', '63', '875', '664', '509', 'HumanEval/21', 'HumanEval/103', '615', '588']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List
from itertools import chain, repeat

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    return list(chain(*zip(numbers, repeat(delimeter))))[:-1] + [numbers[-1]] if numbers else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,5,normal,"['HumanEval/5', '251', '503', 'HumanEval/20', 'HumanEval/25']","from typing import List
from itertools import chain, repeat

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    return list(chain(*zip(numbers, repeat(delimeter))))[:-1] + [numbers[-1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', '251', '503', 'HumanEval/20', 'HumanEval/25', '578', '621', '943', '665', '500']","from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    return [n for pair in zip(numbers, [delimeter] * len(numbers)) for n in pair][:-1] + [numbers[-1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif c == ')':
                depth -= 1
        return max_depth

    return [parse_paren_group(x) for x in paren_string.split() if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,5,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/61', 'HumanEval/56']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1
        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,10,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/61', 'HumanEval/56', 'HumanEval/119', '640', 'HumanEval/17', '417', '538']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1
        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', '91', '823', 'HumanEval/14']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', '91', '823', 'HumanEval/14', 'HumanEval/22', 'HumanEval/1', '18', 'HumanEval/12', 'HumanEval/6']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return reduce(add, numbers, 0), prod(numbers, 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', 'HumanEval/60', '65', '649', '886']","from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return reduce(add, numbers, 0), prod(numbers, 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', 'HumanEval/60', '65', '649', '886', '170', '925', '796', '514', '798']","from typing import List, Tuple
from functools import reduce
from operator import mul

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_value = sum(numbers)
    prod_value = reduce(mul, numbers, 1)
    return sum_value, prod_value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    result = []
    running_max = float('-inf')
    
    for n in numbers:
        running_max = max(running_max, n)
        result.append(running_max)

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,5,normal,"['HumanEval/9', '357', '418', '294', '613']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    result = []
    current_max = float('-inf')
    
    for num in numbers:
        current_max = max(current_max, num)
        result.append(current_max)
        
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', '357', '418', '294', '613', '611', 'HumanEval/35', '200', '90', '130']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    result = []
    current_max = float('-inf')
    
    for num in numbers:
        current_max = max(current_max, num)
        result.append(current_max)
        
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = len(string) - 1

    while not string[beginning_of_suffix:] == string[beginning_of_suffix:][::-1]:
        beginning_of_suffix -= 1

    return string + string[:beginning_of_suffix+1][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', 'HumanEval/107']","def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = len(string) - 1

    while not string[beginning_of_suffix:] == string[beginning_of_suffix:][::-1]:
        beginning_of_suffix -= 1

    return string + string[:beginning_of_suffix+1][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', 'HumanEval/107', '909', '823', '100', '364', 'HumanEval/27']","def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = len(string) - 1

    while not string[beginning_of_suffix:] == string[beginning_of_suffix:][::-1]:
        beginning_of_suffix -= 1

    return string + string[:beginning_of_suffix+1][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"def string_xor(a: str, b: str) -> str:
    return ''.join('0' if x == y else '1' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', '399', '156', '456', '226']","from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', '399', '156', '456', '226', '119', '146', '310', '699', '595']","def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', '393', '443', '207', '517']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', '393', '443', '207', '517', '602', '290', 'HumanEval/7', '232', '326']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['HumanEval/13'],"def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['HumanEval/13', '687', '498', '45', '218']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['HumanEval/13', '687', '498', '45', '218', 'HumanEval/163', '520', '151', 'HumanEval/97', '339']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/14'],"from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/28']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/28', 'HumanEval/7', '374', '50', 'HumanEval/101', '393']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['HumanEval/15'],"def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,5,normal,"['HumanEval/15', '628', '61', '84', '552']","def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,10,normal,"['HumanEval/15', '628', '61', '84', '552', '125', '623', 'HumanEval/131', '39', '220']","def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['HumanEval/16'],"def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['HumanEval/16', '684', '666', '182', '352']","def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['HumanEval/16', '684', '666', '182', '352', '165', '813', '242', '238', 'HumanEval/18']","def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    music_string = music_string.replace('o|', 'o| ').replace('.|', '.| ').replace('o ', 'o ')
    return [note_map[x] for x in music_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,5,normal,"['HumanEval/17', '40', 'HumanEval/18', '226', 'HumanEval/6']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    beats = []
    i = 0
    while i < len(notes):
        if notes[i] == 'o':
            if i + 1 < len(notes) and notes[i + 1] == '|':
                beats.append(note_map['o|'])
                i += 2
            else:
                beats.append(note_map['o'])
                i += 1
        elif notes[i] == '.|':
            beats.append(note_map['.|'])
            i += 1
    return beats",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,10,normal,"['HumanEval/17', '40', 'HumanEval/18', '226', 'HumanEval/6', '88', '146', '785', '400', 'HumanEval/1']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    result = []
    temp = ''
    
    for note in notes:
        if note in note_map:
            result.append(note_map[note])
        else:
            temp += note
            if temp in note_map:
                result.append(note_map[temp])
                temp = ''
                
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['HumanEval/18'],"def how_many_times(string: str, substring: str) -> int:
    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['HumanEval/18', '238', '684', '61', 'HumanEval/16']","def how_many_times(string: str, substring: str) -> int:
    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['HumanEval/18', '238', '684', '61', 'HumanEval/16', '666', '30', '338', '172', '773']","import re

def how_many_times(string: str, substring: str) -> int:
    return len(re.findall('(?=' + re.escape(substring) + ')', string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted(numbers.split(), key=value_map.get))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', '749', 'HumanEval/145', '104', '71']","from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted(numbers.split(), key=value_map.get))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', '749', 'HumanEval/145', '104', '71', '877', '516', '37', '407', '755']","from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted(numbers.split(), key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_distance = float('inf')
    closest_pair = None

    for i in range(len(numbers) - 1):
        distance = numbers[i + 1] - numbers[i]
        if distance < min_distance:
            min_distance = distance
            closest_pair = (numbers[i], numbers[i + 1])

    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,5,normal,"['HumanEval/20', 'HumanEval/0', '755', '89', '825']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_distance = float('inf')
    closest_pair = None
    for i in range(len(numbers) - 1):
        distance = numbers[i + 1] - numbers[i]
        if distance < min_distance:
            min_distance = distance
            closest_pair = (numbers[i], numbers[i + 1])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,10,normal,"['HumanEval/20', 'HumanEval/0', '755', '89', '825', 'HumanEval/99', '898', 'HumanEval/21', 'HumanEval/5', '184']","from typing import List, Tuple
import itertools


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    min_distance = float('inf')
    closest_pair = None

    for pair in itertools.combinations(numbers, 2):
        distance = abs(pair[0] - pair[1])
        if distance < min_distance:
            min_distance = distance
            closest_pair = tuple(sorted(pair))

    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,5,normal,"['HumanEval/21', '117', '919', '98', 'HumanEval/5']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,10,normal,"['HumanEval/21', '117', '919', '98', 'HumanEval/5', 'HumanEval/156', '252', '282', 'HumanEval/25', 'HumanEval/2']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,5,normal,"['HumanEval/22', '41', '277', 'HumanEval/7', 'HumanEval/26']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,10,normal,"['HumanEval/22', '41', '277', 'HumanEval/7', 'HumanEval/26', 'HumanEval/29', '426', 'HumanEval/5', '156', 'HumanEval/136']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['HumanEval/23'],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['HumanEval/23', '813', '868', '238', '125']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['HumanEval/23', '813', '868', '238', '125', 'HumanEval/16', 'HumanEval/18', 'HumanEval/82', '666', '83']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['HumanEval/24'],"def largest_divisor(n: int) -> int:
    for i in reversed(range(1, n)):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['HumanEval/24', '681', '96', '781', '199']","import math

def largest_divisor(n: int) -> int:
    for i in range(math.floor(math.sqrt(n)), 0, -1):
        if n % i == 0:
            return max(i, n // i)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['HumanEval/24', '681', '96', '781', '199', '388', 'HumanEval/13', '485', 'HumanEval/59', '745']","import math

def largest_divisor(n: int) -> int:
    for i in range(math.floor(math.sqrt(n)), 0, -1):
        if n % i == 0:
            return max(i, n // i)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/25'],"import math

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
        i += 1

    if n > 1:
        factors.append(n)
    return factors",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
25,HumanEval/25,5,normal,"['HumanEval/25', 'HumanEval/59', '32', '901', '122']","from typing import List
import math

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
        i += 1

    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,10,normal,"['HumanEval/25', 'HumanEval/59', '32', '901', '122', 'HumanEval/5', 'HumanEval/39', 'HumanEval/46', '577', 'HumanEval/75']","import math

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
        i += 1
    if n > 1:
        factors.append(n)
    return factors",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List
import collections

def remove_duplicates(numbers: List[int]) -> List[int]:
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] == 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,5,normal,"['HumanEval/26', '712', '932', '22', '674']","from typing import List
from collections import OrderedDict


def remove_duplicates(numbers: List[int]) -> List[int]:
    return list(OrderedDict.fromkeys(numbers))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,10,normal,"['HumanEval/26', '712', '932', '22', '674', '161', '27', '852', '730', '755']","from typing import List
from collections import OrderedDict

def remove_duplicates(numbers: List[int]) -> List[int]:
    return list(OrderedDict.fromkeys(numbers))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '364', '478', '495']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '364', '478', '495', '182', '877', '917', '459', '39']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', '500', '390', '213', 'HumanEval/14']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,10,normal,"['HumanEval/28', '500', '390', '213', 'HumanEval/14', '206', '538', '874', '374', '18']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/14', 'HumanEval/7', '181', 'HumanEval/22']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/14', 'HumanEval/7', '181', 'HumanEval/22', '27', '277', 'HumanEval/28', '861', '722']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/30'],"def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,5,normal,"['HumanEval/30', '442', '870', '189', 'HumanEval/42']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,10,normal,"['HumanEval/30', '442', '870', '189', 'HumanEval/42', 'HumanEval/37', 'HumanEval/57', '472', '824', 'HumanEval/80']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/31'],"import math

def is_prime(n):
    if n < 2:
        return False
    for k in range(2, int(math.sqrt(n)) + 1):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/31', '605', '122', 'HumanEval/96', 'HumanEval/39']","import math

def is_prime(n):
    if n < 2:
        return False
    for k in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/31', '605', '122', 'HumanEval/96', 'HumanEval/39', 'HumanEval/59', 'HumanEval/75', '256', 'HumanEval/82', '685']","import math

def is_prime(n):
    if n < 2:
        return False
    for k in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def find_zero(xs: list):
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,5,normal,"['HumanEval/32', 'HumanEval/121', '20', 'HumanEval/106', 'HumanEval/25']","import math

def find_zero(xs: list):
    def derivative(xs: list):
        return [i * coeff for i, coeff in enumerate(xs)][1:]

    def poly(xs: list, x: float):
        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

    def newton_raphson(xs: list, x0: float, epsilon: float = 1e-10, max_iter: int = 1000):
        x = x0
        for _ in range(max_iter):
            f_x = poly(xs, x)
            f_dx = poly(derivative(xs), x)
            if abs(f_dx) < epsilon:
                break
            x_next = x - f_x / f_dx
            if abs(x_next - x) < epsilon:
                return x_next
            x = x_next
        return x

    return newton_raphson(xs, 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,10,normal,"['HumanEval/32', 'HumanEval/121', '20', 'HumanEval/106', 'HumanEval/25', 'HumanEval/40', '847', '632', '406', '160']","import math

def find_zero(xs: list):
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/37', 'HumanEval/34', '340', '487']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/37', 'HumanEval/34', '340', '487', '839', '108', '333', '889', '104']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', 'HumanEval/104', '573', '758', '779']","def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', 'HumanEval/104', '573', '758', '779', '709', 'HumanEval/42', 'HumanEval/37', '281', '472']","def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['HumanEval/35'],"def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['HumanEval/35', '418', '357', '613', '200']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['HumanEval/35', '418', '357', '613', '200', 'HumanEval/42', '294', '259', '290', '517']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['HumanEval/36'],"def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['HumanEval/36', '781', '365', 'HumanEval/55', '211']","def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['HumanEval/36', '781', '365', 'HumanEval/55', '211', '907', '577', '155', '78', '383']","def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/37'],"def sort_even(l: list):
    evens = sorted(l[::2])
    odds = l[1::2]
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/37', 'HumanEval/33', '784', 'HumanEval/34', '824']","def sort_even(l: list):
    evens = sorted(l[::2])
    return [x for pair in zip(evens, l[1::2]) for x in pair] + evens[len(l[1::2]):]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/37', 'HumanEval/33', '784', 'HumanEval/34', '824', '594', '790', '881', '567', '387']","def sort_even(l: list):
    evens = sorted(l[::2])
    return [x for pair in zip(evens, l[1::2]) for x in pair] + evens[len(l[1::2]):]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '39', 'HumanEval/89']","def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,10,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '39', 'HumanEval/89', 'HumanEval/65', '157', '317', '673', '217']","def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['HumanEval/39'],"import math

def prime_fib(n: int):
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True

    a, b = 0, 1
    count = 0
    while True:
        a, b = b, a + b
        if is_prime(b):
            count += 1
            if count == n:
                return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['HumanEval/39', 'HumanEval/55', '873', 'HumanEval/63', 'HumanEval/46']","import math

def is_prime(p):
    if p < 2:
        return False
    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
        if p % k == 0:
            return False
    return True

def prime_fib(n: int):
    f = [0, 1]
    count = 0
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            count += 1
        if count == n:
            return f[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['HumanEval/39', 'HumanEval/55', '873', 'HumanEval/63', 'HumanEval/46', '122', '32', '256', '605', 'HumanEval/59']","import math

def prime_fib(n: int):
    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True

    f = [0, 1]
    count = 0
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            count += 1
        if count == n:
            return f[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['HumanEval/40'],"def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i - 1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,5,normal,"['HumanEval/40', 'HumanEval/43', '121', 'HumanEval/142', '340']","def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i-1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,10,normal,"['HumanEval/40', 'HumanEval/43', '121', 'HumanEval/142', '340', '916', '837', '420', '798', '65']","def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i-1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['HumanEval/41'],"def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,5,normal,"['HumanEval/41', '249', '473', '414', '298']","def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,10,normal,"['HumanEval/41', '249', '473', '414', '298', '540', '239', '525', '187', 'HumanEval/127']","def car_race_collision(n: int):
    return n**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list):
    return [(e + 1) for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', '859', '766', '472', 'HumanEval/34']","def incr_list(l: list):
    return [(e + 1) for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', '859', '766', '472', 'HumanEval/34', '462', '621', '758', '779', '857']","def incr_list(l: list):
    return [(e + 1) for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['HumanEval/43'],"def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set and num!= 0:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['HumanEval/43', 'HumanEval/40', '633', '767', '144']","def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set and -num!= num:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['HumanEval/43', 'HumanEval/40', '633', '767', '144', '527', '126', '798', 'HumanEval/142', '723']","def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['HumanEval/44'],"def change_base(x: int, base: int):
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,5,normal,"['HumanEval/44', '194', 'HumanEval/144', '257', '252']","def change_base(x: int, base: int):
    if x == 0:
        return '0'
    digits = []
    while x:
        digits.append(str(x % base))
        x //= base
    return ''.join(reversed(digits))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,10,normal,"['HumanEval/44', '194', 'HumanEval/144', '257', '252', 'HumanEval/156', '619', '98', '467', '24']","def change_base(x: int, base: int):
    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,1,normal,['HumanEval/45'],"def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,5,normal,"['HumanEval/45', '626', 'HumanEval/71', '198', '488']","def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,10,normal,"['HumanEval/45', '626', 'HumanEval/71', '198', '488', '848', '52', '742', '163', '458']","def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,1,normal,['HumanEval/46'],"from collections import deque

def fib4(n: int):
    results = deque([0, 0, 2, 0], maxlen=4)
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(sum(results))

    return results[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,5,normal,"['HumanEval/46', 'HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39']","def fib4(n: int):
    if n < 4:
        return [0, 0, 2, 0][n]

    a, b, c, d = 0, 0, 2, 0
    for _ in range(4, n + 1):
        a, b, c, d = b, c, d, a + b + c + d

    return d",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,10,normal,"['HumanEval/46', 'HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39', '84', 'HumanEval/106', '122', '67', '608']","def fib4(n: int):
    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,1,normal,['HumanEval/47'],"import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,5,normal,"['HumanEval/47', '397', '622', 'HumanEval/35', 'HumanEval/37']","import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,10,normal,"['HumanEval/47', '397', '622', 'HumanEval/35', 'HumanEval/37', '472', '825', '457', 'HumanEval/30', '432']","import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['HumanEval/48'],"def is_palindrome(text: str):
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['HumanEval/48', 'HumanEval/10', '864', '485', 'HumanEval/107']","def is_palindrome(text: str):
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['HumanEval/48', 'HumanEval/10', '864', '485', 'HumanEval/107', '192', '396', 'HumanEval/134', '44', '737']","def is_palindrome(text: str):
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,1,normal,['HumanEval/49'],"def modp(n: int, p: int):
    ret = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            ret = (ret * base) % p
        base = (base * base) % p
        n = n // 2
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,5,normal,"['HumanEval/49', '402', '952', '288', '616']","def modp(n: int, p: int):
    ret = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            ret = (ret * base) % p
        base = (base * base) % p
        n = n // 2
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,10,normal,"['HumanEval/49', '402', '952', '288', '616', '199', '388', '36', '122', '291']","def modp(n: int, p: int):
    ret = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            ret = (ret * base) % p
        base = (base * base) % p
        n = n // 2
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,1,normal,['HumanEval/50'],"def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,5,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/89', 'HumanEval/65']","def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,10,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/89', 'HumanEval/65', '39', '317', '83', '668', 'HumanEval/162']","def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,1,normal,['HumanEval/51'],"def remove_vowels(text):
    return """".join([s for s in text if s.lower() not in ""aeiou""])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,5,normal,"['HumanEval/51', '131', 'HumanEval/118', '676', '727']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['HumanEval/51', '131', 'HumanEval/118', '676', '727', '173', 'HumanEval/64', '437', 'HumanEval/93', '202']","def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return """".join([char for char in text if char not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['HumanEval/52'],"def below_threshold(l: list, t: int):
    return all(e < t for e in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '472', '69']","def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '472', '69', 'HumanEval/57', '700', '228', '884', '477']","def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/53'],"def add(x: int, y: int) -> int:
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/53', '729', '127', '675', 'HumanEval/102']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/53', '729', '127', '675', 'HumanEval/102', '503', '498', 'HumanEval/85', '886', '98']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['HumanEval/54'],"def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,5,normal,"['HumanEval/54', '741', '352', '30', '338']","def same_chars(s0: str, s1: str):
    return set(s0) == set(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,10,normal,"['HumanEval/54', '741', '352', '30', '338', '53', '871', '874', '474', '666']","from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,1,normal,['HumanEval/55'],"from functools import lru_cache

def fib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['HumanEval/55', '873', 'HumanEval/63', 'HumanEval/46', 'HumanEval/39']","def fib(n: int):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['HumanEval/55', '873', 'HumanEval/63', 'HumanEval/46', 'HumanEval/39', '577', '122', '479', '692', 'HumanEval/139']","def fib(n: int):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['HumanEval/61'],"def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['HumanEval/61', 'HumanEval/56', 'HumanEval/132', '175', '640']","def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['HumanEval/61', 'HumanEval/56', 'HumanEval/132', '175', '640', 'HumanEval/119', '30', '338', 'HumanEval/140', 'HumanEval/10']","def correct_bracketing(brackets: str):
    stack = []
    for b in brackets:
        if b == ""<"":
            stack.append(b)
        else:
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['HumanEval/57'],"def monotonic(l: list):
    increasing = decreasing = True

    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False

    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['HumanEval/57', '68', '670', 'HumanEval/52', '472']","def monotonic(l: list):
    increasing = decreasing = True

    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False

    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,10,normal,"['HumanEval/57', '68', '670', 'HumanEval/52', '472', '680', '69', 'HumanEval/42', 'HumanEval/35', 'HumanEval/30']","def monotonic(l: list):
    increasing = decreasing = True

    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False

    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,5,normal,"['HumanEval/58', '431', '508', '298', '111']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,10,normal,"['HumanEval/58', '431', '508', '298', '111', '943', '648', '473', '414', '758']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"import math

def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, int(math.sqrt(k)) + 1):
            if k % i == 0:
                return False
        return True

    largest = 1
    for j in range(2, int(math.sqrt(n)) + 1):
        while n % j == 0:
            if is_prime(j):
                largest = max(largest, j)
            n //= j
    if n > 1 and is_prime(n):
        largest = max(largest, n)
    return largest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '32', '122', 'HumanEval/24', 'HumanEval/39']","import math

def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, min(int(math.sqrt(k)) + 1, k - 1)):
            if k % i == 0:
                return False
        return True

    largest = 1
    for j in range(2, int(math.sqrt(n)) + 1):
        while n % j == 0:
            if is_prime(j):
                largest = max(largest, j)
            n = n // j
    if n > 1 and is_prime(n):
        largest = max(largest, n)
    return largest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '32', '122', 'HumanEval/24', 'HumanEval/39', '260', '256', '685', 'HumanEval/31', 'HumanEval/139']","import math

def largest_prime_factor(n: int):
    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, min(int(math.sqrt(k)) + 1, k - 1)):
            if k % i == 0:
                return False
        return True

    largest = 1
    for j in range(2, int(math.sqrt(n)) + 1):
        while n % j == 0:
            if is_prime(j):
                largest = max(largest, j)
            n //= j
    if n > 1 and is_prime(n):
        largest = max(largest, n)
    return largest",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['HumanEval/60'],"def sum_to_n(n: int):
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['HumanEval/60', '448', '162', '392', '504']","def sum_to_n(n: int):
    return sum(range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,10,normal,"['HumanEval/60', '448', '162', '392', '504', '566', '777', '42', '886', '849']","def sum_to_n(n: int):
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['HumanEval/61'],"def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,5,normal,"['HumanEval/61', 'HumanEval/56', 'HumanEval/132', '175', '640']","def correct_bracketing(brackets: str):
    stack = []
    for b in brackets:
        if b == ""("":
            stack.append(b)
        elif b == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,10,normal,"['HumanEval/61', 'HumanEval/56', 'HumanEval/132', '175', '640', 'HumanEval/119', '30', '338', '771', 'HumanEval/10']","def correct_bracketing(brackets: str):
    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['HumanEval/62'],"def derivative(xs: list):
    return [(i * x) for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['HumanEval/62', 'HumanEval/32', '847', '835', 'HumanEval/106']","def derivative(xs: list):
    return [(i * x) for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['HumanEval/62', 'HumanEval/32', '847', '835', 'HumanEval/106', '430', 'HumanEval/11', '58', '618', '343']","def derivative(xs: list):
    return [(i * x) for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['HumanEval/63'],"from functools import lru_cache

def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,5,normal,"['HumanEval/63', 'HumanEval/55', 'HumanEval/46', '873', 'HumanEval/39']","def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    a, b, c = 0, 0, 1
    for _ in range(3, n + 1):
        a, b, c = b, c, a + b + c
    return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['HumanEval/63', 'HumanEval/55', 'HumanEval/46', '873', 'HumanEval/39', '84', 'HumanEval/106', '300', 'HumanEval/15', 'HumanEval/139']","def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    a, b, c = 0, 0, 1
    for _ in range(3, n + 1):
        a, b, c = b, c, a + b + c
    return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s and (s[-1] == 'y' or s[-1] == 'Y'):
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', '776', '667', 'HumanEval/118', '131']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s and (s[-1] == 'y' or s[-1] == 'Y'):
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,10,normal,"['HumanEval/64', '776', '667', 'HumanEval/118', '131', 'HumanEval/51', '684', '165', '666', '30']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1].lower() == 'y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,1,normal,['HumanEval/65'],"def circular_shift(x, shift):
    s = str(x)
    shift = shift % len(s)
    if shift == 0:
        return s[::-1]
    else:
        return s[-shift:] + s[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/65', 'HumanEval/50', '909', '252', '775']","def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[-shift:] + s[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/65', 'HumanEval/50', '909', '252', '775', '619', 'HumanEval/104', '739', '257', '692']","def circular_shift(x, shift):
    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[-shift:] + s[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['HumanEval/66'],"def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,5,normal,"['HumanEval/66', '398', '566', '146', '148']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,10,normal,"['HumanEval/66', '398', '566', '146', '148', '83', '886', 'HumanEval/108', '125', '242']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['HumanEval/67'],"def fruit_distribution(s, n):
    return n - sum(int(i) for i in s.split() if i.isdigit())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['HumanEval/67', '61', '360', '849', '109']","import re

def fruit_distribution(s, n):
    numbers = list(map(int, re.findall(r'\d+', s)))
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['HumanEval/67', '61', '360', '849', '109', '633', '453', '25', '172', '564']","import re

def fruit_distribution(s, n):
    numbers = list(map(int, re.findall(r'\d+', s)))
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['HumanEval/68'],"def pluck(arr):
    if not arr: return []
    evens = [(x, i) for i, x in enumerate(arr) if x % 2 == 0]
    if not evens: return []
    return [min(evens, key=lambda x: (x[0], x[1]))[0], min(evens, key=lambda x: (x[0], x[1]))[1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,5,normal,"['HumanEval/68', '225', '304', '940', '867']","def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    return min(even_nodes, default=[None, None]) if even_nodes else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['HumanEval/68', '225', '304', '940', '867', '893', '158', '195', '189', '460']","def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    if not even_nodes:
        return []
    return [min(even_nodes, key=lambda x: (x[0], x[1]))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,1,normal,['HumanEval/69'],"from collections import Counter

def search(lst):
    frq = Counter(lst)
    ans = -1
    for i in range(1, max(lst) + 1):
        if frq[i] >= i:
            ans = i
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['HumanEval/69', 'HumanEval/136', 'HumanEval/35', '418', '184']","from collections import Counter

def search(lst):
    frq = Counter(lst)
    ans = -1
    for num, freq in frq.items():
        if freq >= num and num > ans:
            ans = num
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['HumanEval/69', 'HumanEval/136', 'HumanEval/35', '418', '184', '492', '658', '446', '362', '130']","from collections import Counter

def search(lst):
    count = Counter(lst)
    return max((i for i in count if count[i] >= i), default=-1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['HumanEval/70'],"def strange_sort_list(lst):
    res, switch = [], True
    lst_copy = lst[:]  # Create a copy of the list to avoid modifying the original list
    while lst_copy:
        res.append(min(lst_copy) if switch else max(lst_copy))
        lst_copy.remove(res[-1])
        switch = not switch
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,5,normal,"['HumanEval/70', '37', 'HumanEval/149', 'HumanEval/37', 'HumanEval/136']","def strange_sort_list(lst):
    res, switch = [], True
    lst_copy = lst.copy()
    while lst_copy:
        if switch:
            res.append(min(lst_copy))
        else:
            res.append(max(lst_copy))
        lst_copy.remove(res[-1])
        switch = not switch
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,10,normal,"['HumanEval/70', '37', 'HumanEval/149', 'HumanEval/37', 'HumanEval/136', '104', 'HumanEval/33', '705', '896', '889']","def strange_sort_list(lst):
    res, switch = [], True
    lst_copy = lst.copy()
    while lst_copy:
        if switch:
            res.append(min(lst_copy))
        else:
            res.append(max(lst_copy))
        lst_copy.remove(res[-1])
        switch = not switch
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,1,normal,['HumanEval/71'],"import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,5,normal,"['HumanEval/71', '626', 'HumanEval/45', '176', '198']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['HumanEval/71', '626', 'HumanEval/45', '176', '198', '677', 'HumanEval/157', '742', '449', '488']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['HumanEval/72'],"def will_it_fly(q, w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['HumanEval/72', 'HumanEval/3', '129', '26', 'HumanEval/80']","def will_it_fly(q,w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,10,normal,"['HumanEval/72', 'HumanEval/3', '129', '26', 'HumanEval/80', '20', 'HumanEval/40', '121', '23', '433']","def will_it_fly(q,w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,1,normal,['HumanEval/73'],"def smallest_change(arr):
    ans = 0
    left, right = 0, len(arr) - 1
    while left < right:
        if arr[left]!= arr[right]:
            ans += 1
        left += 1
        right -= 1
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,5,normal,"['HumanEval/73', '763', '856', '100', '867']","def smallest_change(arr):
    ans = 0
    left, right = 0, len(arr) - 1
    while left < right:
        if arr[left]!= arr[right]:
            ans += 1
        left += 1
        right -= 1
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,10,normal,"['HumanEval/73', '763', '856', '100', '867', '540', '145', '689', '350', 'HumanEval/105']","def smallest_change(arr):
    ans = 0
    left, right = 0, len(arr) - 1
    while left < right:
        if arr[left]!= arr[right]:
            ans += 1
        left += 1
        right -= 1
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['HumanEval/74'],"def total_match(lst1, lst2):
    return lst1 if sum(len(st) for st in lst1) <= sum(len(st) for st in lst2) else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,5,normal,"['HumanEval/74', '728', '298', 'HumanEval/119', 'HumanEval/69']","def total_match(lst1, lst2):
    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,10,normal,"['HumanEval/74', '728', '298', 'HumanEval/119', 'HumanEval/69', '242', 'HumanEval/151', '666', '446', '874']","def total_match(lst1, lst2):
    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for j in range(2, int(math.sqrt(n)) + 1):
            if n % j == 0:
                return False
        return True

    primes = [i for i in range(2, 101) if is_prime(i)]
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/31', '605', 'HumanEval/59', 'HumanEval/39']","import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for k in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
            if n % k == 0:
                return False
        return True

    primes = [i for i in range(2, 101) if is_prime(i)]
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/31', '605', 'HumanEval/59', 'HumanEval/39', '685', '32', '122', 'HumanEval/96', '121']","import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for k in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
            if n % k == 0:
                return False
        return True

    primes = [i for i in range(2, 100) if is_prime(i)]
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,1,normal,['HumanEval/76'],"import math

def is_simple_power(x, n):
    if n == 1:
        return x == 1
    if x < 1 or n < 2:
        return False
    power = math.log(x, n)
    return power == int(power)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,5,normal,"['HumanEval/76', '167', '199', 'HumanEval/144', '138']","import math

def is_simple_power(x, n):
    if n == 1:
        return x == 1
    if x < 1 or n < 2:
        return False
    log_result = math.log(x, n)
    return math.isclose(log_result, round(log_result))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,10,normal,"['HumanEval/76', '167', '199', 'HumanEval/144', '138', '388', '93', '600', '211', '887']","import math

def is_simple_power(x, n):
    if x <= 0 or n <= 0:
        return False
    if n == 1:
        return x == 1
    log_result = math.log(x, n)
    return math.isclose(log_result, round(log_result))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['HumanEval/77'],"import math

def iscube(a):
    a = abs(a)
    return math.isclose(a ** (1. / 3) % 1, 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,5,normal,"['HumanEval/77', '447', '129', '646', '188']","import math

def iscube(a):
    cube_root = round(math.pow(abs(a), 1/3))
    return cube_root ** 3 == abs(a)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,10,normal,"['HumanEval/77', '447', '129', '646', '188', '803', '422', '420', '837', '59']","import math

def iscube(a):
    root = round(math.pow(abs(a), 1/3))
    return root ** 3 == abs(a)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,1,normal,['HumanEval/78'],"def hex_key(num):
    primes = {'2', '3', '5', '7', 'B', 'D'}
    return sum(1 for digit in num if digit in primes)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['HumanEval/78', '107', '256', '122', '135']","def hex_key(num):
    primes = {'2', '3', '5', '7', 'B', 'D'}
    return sum(1 for digit in num if digit in primes)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,10,normal,"['HumanEval/78', '107', '256', '122', '135', '605', 'HumanEval/82', 'HumanEval/94', 'HumanEval/131', '745']","def hex_key(num):
    primes = ('2', '3', '5', '7', 'B', 'D')
    return sum(1 for digit in num if digit in primes)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,1,normal,['HumanEval/79'],"def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['HumanEval/79', '99', '24', '33', '194']","def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['HumanEval/79', '99', '24', '33', '194', '467', '494', '208', '252', '759']","def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['HumanEval/80'],"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if len(set(s[i:i+3]))!= 3:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,5,normal,"['HumanEval/80', '349', '967', '30', '192']","def is_happy(s):
    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s) - 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['HumanEval/80', '349', '967', '30', '192', '338', '523', '737', '396', '667']","def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if len(set(s[i:i+3]))!= 3:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def numerical_letter_grade(grades):
    grade_map = {
        (4.0, 4.0): ""A+"",
        (3.7, 4.0): ""A"",
        (3.3, 3.7): ""A-"",
        (3.0, 3.3): ""B+"",
        (2.7, 3.0): ""B"",
        (2.3, 2.7): ""B-"",
        (2.0, 2.3): ""C+"",
        (1.7, 2.0): ""C"",
        (1.3, 1.7): ""C-"",
        (1.0, 1.3): ""D+"",
        (0.7, 1.0): ""D"",
        (0.0, 0.7): ""D-"",
        (0.0, 0.0): ""E""
    }
    return [next(v for (lower, upper), v in grade_map.items() if lower <= gpa <= upper) for gpa in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,5,normal,"['HumanEval/81', '621', '397', '722', '169']","def numerical_letter_grade(grades):
    boundaries = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]
    grades_map = [""A+"", ""A"", ""A-"", ""B+"", ""B"", ""B-"", ""C+"", ""C"", ""C-"", ""D+"", ""D"", ""D-""]
    return [grades_map[next(i for i, x in enumerate(boundaries) if gpa >= x)] for gpa in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,10,normal,"['HumanEval/81', '621', '397', '722', '169', '47', '64', '236', '247', '622']","def numerical_letter_grade(grades):
    boundaries = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]
    grades_map = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-']
    return [grades_map[next(i for i, x in enumerate(boundaries) if g >= x)] for g in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,1,normal,['HumanEval/82'],"import math

def prime_length(string):
    l = len(string)
    if l <= 1:
        return False
    for i in range(2, int(math.sqrt(l)) + 1):
        if l % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['HumanEval/82', '605', '813', '523', '125']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,10,normal,"['HumanEval/82', '605', '813', '523', '125', 'HumanEval/31', '192', 'HumanEval/23', '79', '964']","def prime_length(string):
    def is_prime(n):
        if n < 2:
            return False
        for k in range(2, int(n**0.5) + 1):
            if n % k == 0:
                return False
        return True

    return is_prime(len(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,1,normal,['HumanEval/83'],"def starts_one_ends(n):
    if n == 1: return 1
    return 2 * (9 * (10 ** (n - 1))) - 9 * (10 ** (n - 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,5,normal,"['HumanEval/83', '365', '479', '745', '657']","def starts_one_ends(n):
    if n == 1: return 1
    return 2 * (9 * (10 ** (n - 1))) - 9",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,10,normal,"['HumanEval/83', '365', '479', '745', '657', '442', '109', '256', '211', 'HumanEval/131']","def starts_one_ends(n):
    if n == 1: return 1
    return 9 * (10 ** (n - 1)) + 9 * (10 ** (n - 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,1,normal,['HumanEval/84'],"def solve(N):
    return bin(sum(int(i) for i in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,5,normal,"['HumanEval/84', '566', '148', '398', '845']","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,10,normal,"['HumanEval/84', '566', '148', '398', '845', '448', 'HumanEval/60', 'HumanEval/66', '479', '162']","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['HumanEval/85'],"def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,5,normal,"['HumanEval/85', '881', '784', 'HumanEval/113', 'HumanEval/122']","def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,10,normal,"['HumanEval/85', '881', '784', 'HumanEval/113', 'HumanEval/122', '729', '363', 'HumanEval/155', 'HumanEval/37', '503']","def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['HumanEval/86'],"def anti_shuffle(s):
    return''.join([''.join(sorted(list(i), key=lambda c: (not c.isalpha(), c.lower()))) for i in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['HumanEval/86', '39', '877', '374', '386']","def anti_shuffle(s):
    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['HumanEval/86', '39', '877', '374', '386', 'HumanEval/27', '674', '364', '604', '505']","def anti_shuffle(s):
    return''.join([''.join(sorted(list(i))) for i in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['HumanEval/87'],"def get_row(lst, x):
    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(coords, key=lambda x: (x[0], -x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,5,normal,"['HumanEval/87', '380', '241', '282', '418']","def get_row(lst, x):
    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(sorted(coords, key=lambda x: (x[0], -x[1])), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,10,normal,"['HumanEval/87', '380', '241', '282', '418', '587', '457', '215', '104', '766']","def get_row(lst, x):
    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,1,normal,['HumanEval/88'],"def sort_array(array):
    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['HumanEval/88', '229', 'HumanEval/116', '915', '777']","def sort_array(array):
    return sorted(array) if (array[0] + array[-1]) % 2!= 0 else sorted(array, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['HumanEval/88', '229', 'HumanEval/116', '915', '777', '940', '12', '815', 'HumanEval/114', 'HumanEval/135']","def sort_array(array):
    return sorted(array) if (array[0] + array[-1]) % 2!= 0 else sorted(array, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,1,normal,['HumanEval/89'],"def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+4) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/89', 'HumanEval/50', 'HumanEval/38', 'HumanEval/162', 'HumanEval/86']","def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/89', 'HumanEval/50', 'HumanEval/38', 'HumanEval/162', 'HumanEval/86', '39', 'HumanEval/11', 'HumanEval/112', 'HumanEval/27', 'HumanEval/161']","def encrypt(s):
    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['HumanEval/90'],"def next_smallest(lst):
    if len(set(lst)) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['HumanEval/90', '755', '457', 'HumanEval/136', '100']","def next_smallest(lst):
    if len(set(lst)) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['HumanEval/90', '755', '457', 'HumanEval/136', '100', '340', '62', '322', '408', '95']","def next_smallest(lst):
    if len(set(lst)) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"import re

def is_bored(S):
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence.strip() and sentence[0:2].lower() == 'i'for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '79', '964', 'HumanEval/80', 'HumanEval/101']","import re

def is_bored(S):
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence.strip() and sentence[0:2].lower() == 'i'for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '79', '964', 'HumanEval/80', 'HumanEval/101', '897', '172', '862', 'HumanEval/143', '13']","import re

def is_bored(S):
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence.strip() and sentence[0].lower() == 'i' for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['HumanEval/92'],"def any_int(x, y, z):
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['HumanEval/92', 'HumanEval/53', '801', '121', '127']","def any_int(x, y, z):
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['HumanEval/92', 'HumanEval/53', '801', '121', '127', '683', 'HumanEval/138', '886', '138', '904']","def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        return x + y == z or x + z == y or y + z == x
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/93'],"def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = str.maketrans(vowels, ""cgCGIOUyY"")
    return message.swapcase().translate(vowels_replace)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,5,normal,"['HumanEval/93', '131', 'HumanEval/50', 'HumanEval/51', 'HumanEval/38']","def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = {i: chr(ord(i) + 2) if ord(i) + 2 <= ord('z') else chr(ord(i) + 2 - 26) if i.islower() else chr(ord(i) + 2 - 26) for i in vowels}
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,10,normal,"['HumanEval/93', '131', 'HumanEval/50', 'HumanEval/51', 'HumanEval/38', '317', 'HumanEval/89', '668', '474', 'HumanEval/118']","def encode(message):
    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,1,normal,['HumanEval/94'],"import math

def skjkasdkd(lst):
    def isPrime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max((num for num in lst if isPrime(num)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,5,normal,"['HumanEval/94', '122', '685', 'HumanEval/78', 'HumanEval/59']","def skjkasdkd(lst):
    def isPrime(n):
        if n < 2:
            return False
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False
        return True

    max_prime = max((x for x in lst if isPrime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,10,normal,"['HumanEval/94', '122', '685', 'HumanEval/78', 'HumanEval/59', '148', 'HumanEval/66', '398', '286', '476']","def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max((x for x in lst if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_dict_case(dict):
    if not dict:
        return False
    key_types = set(type(key) for key in dict.keys())
    if len(key_types) > 1 or list(key_types)[0]!= str:
        return False
    case_types = set(key.isupper() or key.islower() for key in dict.keys())
    return len(case_types) == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,5,normal,"['HumanEval/95', '582', '885', '523', '349']","def check_dict_case(dict):
    if not dict:
        return False
    key_types = set(type(key) for key in dict.keys())
    if len(key_types) > 1 or list(key_types)[0]!= str:
        return False
    case_types = set(key.isupper() or key.islower() for key in dict.keys())
    return len(case_types) == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,10,normal,"['HumanEval/95', '582', '885', '523', '349', '464', '917', '53', 'HumanEval/27', '624']","def check_dict_case(dict):
    if not dict:
        return False
    all_lower = all(key.islower() for key in dict if isinstance(key, str))
    all_upper = all(key.isupper() for key in dict if isinstance(key, str))
    all_string = all(isinstance(key, str) for key in dict)
    return (all_lower or all_upper) and all_string",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,1,normal,['HumanEval/96'],"import math

def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(math.sqrt(i)) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['HumanEval/96', '256', '122', '685', '211']","def count_up_to(n):
    primes = []
    sieve = [True] * n
    for x in range(2, int(n**0.5) + 1):
        if sieve[x]: 
            for i in range(x*x, n, x): 
                sieve[i] = False
    for x in range(2, n):
        if sieve[x]: 
            primes.append(x)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['HumanEval/96', '256', '122', '685', '211', 'HumanEval/31', '260', '32', '442', 'HumanEval/60']","def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, int(i ** 0.5) + 1):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['HumanEval/97'],"def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['HumanEval/97', '47', '127', '98', '93']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['HumanEval/97', '47', '127', '98', '93', 'HumanEval/13', '445', 'HumanEval/163', '726', 'HumanEval/131']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['HumanEval/98'],"def count_upper(s):
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in ""AEIOU"")",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['HumanEval/98', 'HumanEval/64', '624', '776', '30']","def count_upper(s):
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in ""AEIOU"":
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['HumanEval/98', 'HumanEval/64', '624', '776', '30', '338', '666', '165', '806', '459']","def count_upper(s):
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in ""AEIOU"":
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"from math import copysign, floor

def closest_integer(value):
    num = float(value)
    decimal_part = num - floor(num)
    if decimal_part == 0.5:
        return floor(num + copysign(1, num))
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '89', 'HumanEval/20', 'HumanEval/2', '375']","import math

def closest_integer(value):
    num = float(value)
    if num - math.floor(num) == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '89', 'HumanEval/20', 'HumanEval/2', '375', '692', '47', '755', '226', 'HumanEval/136']","import math

def closest_integer(value):
    num = float(value)
    if num - math.floor(num) == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/100'],"def make_a_pile(n):
    return [n + 2*i for i in range(n)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/100', '921', '536', '962', '392']","def make_a_pile(n):
    return [n + 2*i if n % 2!= 0 else n - 2*i if i!= 0 else n for i in range(n)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/100', '921', '536', '962', '392', '881', 'HumanEval/123', '549', '770', 'HumanEval/130']","def make_a_pile(n):
    result = [n]
    for _ in range(n - 1):
        if n % 2 == 0:
            n += 2
        else:
            n += 2
        result.append(n)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/101'],"import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/101', 'HumanEval/125', '565', '964', 'HumanEval/143']","import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/101', 'HumanEval/125', '565', '964', 'HumanEval/143', '79', 'HumanEval/117', '118', '604', '128']","import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['HumanEval/102'],"def choose_num(x, y):
    if x > y:
        return -1
    if y % 2 == 0:
        return y
    return y - (y % 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['HumanEval/102', '221', '924', '904', 'HumanEval/150']","def choose_num(x, y):
    if x > y:
        return -1
    return y if y % 2 == 0 else y - (y % 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['HumanEval/102', '221', '924', '904', 'HumanEval/150', '844', '127', '41', '907', '498']","def choose_num(x, y):
    if x > y:
        return -1
    return y if y % 2 == 0 else y - 1 if y - 1 >= x else -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['HumanEval/103'],"def rounded_avg(n, m):
    if m < n:
        return -1
    return bin(round((m + n) / 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['HumanEval/103', '375', '664', '509', '422']","def rounded_avg(n, m):
    if m < n:
        return -1
    return bin(round((m + n) / 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['HumanEval/103', '375', '664', '509', '422', '615', '442', '599', '830', '530']","def rounded_avg(n, m):
    if m < n:
        return -1
    return bin(round((m + n) / 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['HumanEval/104'],"def unique_digits(x):
    return sorted([i for i in x if all(int(c) % 2 == 1 for c in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,5,normal,"['HumanEval/104', '41', '845', '426', 'HumanEval/34']","def unique_digits(x):
    return sorted([i for i in x if all(int(c) % 2 == 1 for c in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,10,normal,"['HumanEval/104', '41', '845', '426', 'HumanEval/34', '572', 'HumanEval/131', '745', '36', '406']","def unique_digits(x):
    return sorted([i for i in x if all(int(c) % 2 == 1 for c in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,1,normal,['HumanEval/105'],"def by_length(arr):
    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    return [dic[var] for var in sorted([x for x in arr if 1 <= x <= 9], reverse=True)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,5,normal,"['HumanEval/105', '915', 'HumanEval/88', '141', '782']","def by_length(arr):
    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    return [dic[var] for var in sorted([x for x in arr if 1 <= x <= 9], reverse=True)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,10,normal,"['HumanEval/105', '915', 'HumanEval/88', '141', '782', 'HumanEval/108', 'HumanEval/116', '867', '229', '57']","def by_length(arr):
    dic = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    return [dic[var] for var in sorted([x for x in arr if 1 <= x <= 9], reverse=True)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,1,normal,['HumanEval/106'],"import math

def f(n):
    ret = []
    for i in range(1, n+1):
        if i % 2 == 0:
            ret.append(math.factorial(i))
        else:
            ret.append(i * (i + 1) // 2)
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['HumanEval/106', '905', 'HumanEval/139', 'HumanEval/25', 'HumanEval/63']","import math

def f(n):
    ret = []
    for i in range(1, n+1):
        if i % 2 == 0:
            ret.append(math.factorial(i))
        else:
            ret.append(i * (i + 1) // 2)
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['HumanEval/106', '905', 'HumanEval/139', 'HumanEval/25', 'HumanEval/63', 'HumanEval/46', '873', '577', 'HumanEval/55', '634']","import math

def f(n):
    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            ret += [math.factorial(i)]
        else:
            ret += [i*(i+1)//2]
    return ret",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['HumanEval/107'],"def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_palindrome_count += 1
            else:
                odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,5,normal,"['HumanEval/107', '485', '909', '387', '109']","def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    even_palindrome_count = sum(1 for i in range(1, n+1) if i % 2 == 0 and is_palindrome(i))
    odd_palindrome_count = sum(1 for i in range(1, n+1) if i % 2!= 0 and is_palindrome(i))
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,10,normal,"['HumanEval/107', '485', '909', '387', '109', 'HumanEval/155', '887', 'HumanEval/48', '600', '100']","def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_palindrome_count += 1
            else:
                odd_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,1,normal,['HumanEval/108'],"def count_nums(arr):
    def digits_sum(n):
        return sum(int(i) if n >= 0 else int(i) if i!= str(n)[0] else -int(i) for i in str(n))
    return sum(1 for num in arr if digits_sum(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,5,normal,"['HumanEval/108', '530', '543', '258', '697']","def count_nums(arr):
    def digits_sum(n):
        return sum(int(i) for i in str(n).replace('-', '-1').replace('+', '1'))
    return sum(1 for num in arr if digits_sum(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,10,normal,"['HumanEval/108', '530', '543', '258', '697', '442', '398', '365', '867', '767']","def count_nums(arr):
    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['HumanEval/109'],"def move_one_ball(arr):
    if len(arr) == 0:
        return True
    sorted_array = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_array:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,5,normal,"['HumanEval/109', 'HumanEval/135', '229', '665', '323']","def move_one_ball(arr):
    if len(arr) == 0:
        return True
    sorted_array = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_array:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,10,normal,"['HumanEval/109', 'HumanEval/135', '229', '665', '323', '915', 'HumanEval/116', 'HumanEval/88', '856', '760']","def move_one_ball(arr):
    if len(arr) == 0:
        return True
    sorted_array = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_array:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['HumanEval/110'],"def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count >= odd_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,5,normal,"['HumanEval/110', '648', 'HumanEval/58', '431', '240']","def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count >= odd_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,10,normal,"['HumanEval/110', '648', 'HumanEval/58', '431', '240', '699', '595', '728', '838', '257']","def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count >= odd_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['HumanEval/111'],"from collections import Counter

def histogram(test):
    counter = Counter(test.split())
    max_count = max(counter.values(), default=0)
    return {letter: count for letter, count in counter.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,5,normal,"['HumanEval/111', '326', '684', '332', '172']","from collections import Counter

def histogram(test):
    test = test.split()
    if not test:
        return {}
    
    count = Counter(test)
    max_count = max(count.values())
    return {k: v for k, v in count.items() if v == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['HumanEval/111', '326', '684', '332', '172', '602', '130', '362', '446', '217']","from collections import defaultdict

def histogram(test):
    dict1 = defaultdict(int)
    list1 = test.split("" "")
    max_count = 0

    for i in list1:
        if i!= '':
            dict1[i] += 1
            max_count = max(max_count, dict1[i])

    return {k: v for k, v in dict1.items() if v == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['HumanEval/112'],"def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,5,normal,"['HumanEval/112', 'HumanEval/10', '604', '909', '39']","def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,10,normal,"['HumanEval/112', 'HumanEval/10', '604', '909', '39', '377', '131', '864', '456', 'HumanEval/48']","def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['HumanEval/113'],"def odd_count(lst):
    return [f""the number of odd elements {n}n the str{n}ng {n} of the {n}nput."" 
            for arr in lst 
            for n in [sum(int(d)%2==1 for d in arr)]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,5,normal,"['HumanEval/113', '109', 'HumanEval/155', '258', '226']","def odd_count(lst):
    return [""the number of odd elements "" + str(sum(int(d)%2==1 for d in arr)) + ""n the str"" + str(sum(int(d)%2==1 for d in arr)) +""ng "" + str(sum(int(d)%2==1 for d in arr)) +"" of the "" + str(sum(int(d)%2==1 for d in arr)) +""nput."" for arr in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,10,normal,"['HumanEval/113', '109', 'HumanEval/155', '258', '226', '238', '684', 'HumanEval/131', '18', '61']","def odd_count(lst):
    return [""the number of odd elements "" + str(sum(int(d)%2==1 for d in arr)) + ""n the str"" + str(sum(int(d)%2==1 for d in arr)) +""ng "" + str(sum(int(d)%2==1 for d in arr)) +"" of the "" + str(sum(int(d)%2==1 for d in arr)) +""nput."" for arr in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['HumanEval/114'],"def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,5,normal,"['HumanEval/114', '777', '476', '656', '511']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,10,normal,"['HumanEval/114', '777', '476', '656', '511', '42', '974', '836', '340', '559']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,1,normal,['HumanEval/115'],"import math

def max_fill(grid, capacity):
    return sum(math.ceil(sum(row) / capacity) for row in grid)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,5,normal,"['HumanEval/115', '314', '423', '318', '911']","import math

def max_fill(grid, capacity):
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,10,normal,"['HumanEval/115', '314', '423', '318', '911', '836', '559', '54', '938', 'HumanEval/114']","import math

def max_fill(grid, capacity):
    return sum([math.ceil(sum(arr)/capacity) for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,1,normal,['HumanEval/116'],"def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x))[2:].count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,5,normal,"['HumanEval/116', 'HumanEval/88', '229', '915', '940']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x))[2:].count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,10,normal,"['HumanEval/116', 'HumanEval/88', '229', '915', '940', '141', '815', 'HumanEval/135', '516', '839']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x))[2:].count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['HumanEval/117'],"def select_words(s, n):
    vowels = set(""aeiou"")
    return [word for word in s.split() if sum(1 for char in word.lower() if char not in vowels) == n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,5,normal,"['HumanEval/117', 'HumanEval/101', '128', '862', 'HumanEval/15']","import re

def select_words(s, n):
    vowels = 'aeiou'
    return [word for word in re.findall('\w+', s) if sum(1 for char in word.lower() if char not in vowels) == n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['HumanEval/117', 'HumanEval/101', '128', '862', 'HumanEval/15', '964', '79', '604', 'HumanEval/118', '305']","def select_words(s, n):
    vowels = set(""aeiouAEIOU"")
    result = []
    for word in s.split():
        n_consonants = sum(1 for char in word if char not in vowels)
        if n_consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/118'],"def get_closest_vowel(word):
    if len(word) < 3:
        return """"

    vowels = set(""aeiouAEIOU"")
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,5,normal,"['HumanEval/118', '667', '131', 'HumanEval/51', 'HumanEval/117']","def get_closest_vowel(word):
    vowels = set(""aeiouAEIOU"")
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i+1] not in vowels and word[i-1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,10,normal,"['HumanEval/118', '667', '131', 'HumanEval/51', 'HumanEval/117', '776', 'HumanEval/64', '868', '526', 'HumanEval/134']","def get_closest_vowel(word):
    if len(word) < 3:
        return """"
    vowels = set(""aeiouAEIOU"")
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i + 1] not in vowels and word[i - 1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,1,normal,['HumanEval/119'],"def match_parens(lst):
    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val += 1
            else:
                val -= 1
            if val < 0:
                return False
        return val == 0

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,5,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', 'HumanEval/132', '874']","def match_parens(lst):
    def check(s):
        depth = 0
        for b in s:
            if b == ""("":
                depth += 1
            else:
                depth -= 1
            if depth < 0:
                return False
        return depth == 0

    return 'Yes' if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,10,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', 'HumanEval/132', '874', '30', '338', 'HumanEval/6', 'HumanEval/110', '186']","def match_parens(lst):
    def check(s):
        depth = 0
        for c in s:
            if c == '(':
                depth += 1
            else:
                depth -= 1
            if depth < 0:
                return False
        return depth == 0

    return 'Yes' if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['HumanEval/120'],"import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,5,normal,"['HumanEval/120', '57', '550', '463', '548']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,10,normal,"['HumanEval/120', '57', '550', '463', '548', '597', '922', '60', '571', '415']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['HumanEval/121'],"def solution(lst):
    return sum(x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['HumanEval/121', '881', '549', '770', 'HumanEval/113']","def solution(lst):
    return sum(x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['HumanEval/121', '881', '549', '770', 'HumanEval/113', '782', '797', '784', '775', '270']","def solution(lst):
    return sum(x for idx, x in enumerate(lst) if idx % 2 == 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['HumanEval/122'],"def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,5,normal,"['HumanEval/122', '798', '42', '398', '144']","def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,10,normal,"['HumanEval/122', '798', '42', '398', '144', '777', '270', '633', '782', '363']","def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,1,normal,['HumanEval/123'],"def get_odd_collatz(n):
    odd_collatz = [n] if n % 2!= 0 else []
    while n > 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        if n % 2 == 1:
            odd_collatz.append(n)
    return sorted(odd_collatz)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,5,normal,"['HumanEval/123', '556', '109', '770', '887']","def get_odd_collatz(n):
    odd_collatz = [n] if n % 2!= 0 else []
    while n > 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        if n % 2!= 0:
            odd_collatz.append(n)
    return sorted(odd_collatz)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,10,normal,"['HumanEval/123', '556', '109', '770', '887', '549', '84', '387', '853', 'HumanEval/46']","def get_odd_collatz(n):
    odd_collatz = [n] if n % 2!= 0 else []
    while n > 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        if n % 2!= 0:
            odd_collatz.append(n)
    return sorted(odd_collatz)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,1,normal,['HumanEval/124'],"from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['HumanEval/124', '910', '866', '336', '191']","from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['HumanEval/124', '910', '866', '336', '191', '737', '820', '455', '403', '906']","import re

def valid_date(date):
    if not re.match(r'^\d{2}-\d{2}-\d{4}$', date):
        return False

    month, day, year = map(int, date.split('-'))

    if month < 1 or month > 12:
        return False

    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):
        return False
    if month in [4, 6, 9, 11] and (day < 1 or day > 30):
        return False
    if month == 2 and (day < 1 or day > 29):
        return False

    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['HumanEval/125'],"def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return sum(1 for i in txt if i.islower() and ord(i) % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,5,normal,"['HumanEval/125', '565', 'HumanEval/101', '128', '956']","import re

def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return re.split(',| ', txt)
    else:
        return sum(1 for i in txt if i.islower() and ord(i) % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,10,normal,"['HumanEval/125', '565', 'HumanEval/101', '128', '956', '964', '79', 'HumanEval/143', '15', '862']","import re

def split_words(txt):
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return re.split('[, ]+', txt)
    else:
        return sum(1 for i in txt if i.islower() and ord(i) % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['HumanEval/126'],"def is_sorted(lst):
    count_digit = {}
    for i in lst:
        count_digit[i] = count_digit.get(i, 0) + 1
    return all(count_digit[i] <= 2 for i in count_digit) and all(lst[i-1] <= lst[i] for i in range(1, len(lst)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,5,normal,"['HumanEval/126', '567', '472', 'HumanEval/57', 'HumanEval/70']","from collections import Counter

def is_sorted(lst):
    count_digit = Counter(lst)
    if any(count > 2 for count in count_digit.values()):
        return False
    return lst == sorted(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['HumanEval/126', '567', '472', 'HumanEval/57', 'HumanEval/70', 'HumanEval/149', 'HumanEval/37', 'HumanEval/19', '54', '487']","def is_sorted(lst):
    return len(lst) == len(set(lst)) and lst == sorted(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"import math

def intersection(interval1, interval2):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l + 1  # Include the end point
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', '473', '249', 'HumanEval/82', '605']","def intersection(interval1, interval2):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l + 1  # Include both start and end
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', '473', '249', 'HumanEval/82', '605', '414', '298', 'HumanEval/83', 'HumanEval/31', '891']","def intersection(interval1, interval2):
    def is_prime(num):
        if num < 2:
            return False
        for k in range(2, int(num**0.5) + 1):
            if num % k == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l + 1  # Include the end point
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['HumanEval/128'],"def prod_signs(arr):
    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** sum(1 for x in arr if x < 0)
    return prod * sum(abs(i) for i in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['HumanEval/128', '25', '734', '922', 'HumanEval/8']","def prod_signs(arr):
    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** sum(1 for x in arr if x < 0)
    return prod * sum(abs(i) for i in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['HumanEval/128', '25', '734', '922', 'HumanEval/8', '804', '415', '463', '798', '911']","def prod_signs(arr):
    if not arr: return None
    prod = 1
    for num in arr:
        if num < 0:
            prod *= -1
        elif num == 0:
            prod = 0
    return prod * sum(abs(i) for i in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['HumanEval/129'],"from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    min_val = float('inf')
    min_path = None

    def bfs(start):
        queue = deque([(start, [grid[start[0]][start[1]]])])
        visited = set([start])
        while queue:
            (x, y), path = queue.popleft()
            if len(path) == k:
                if path < min_path:
                    min_path[:] = path
                continue
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:
                    queue.append(((nx, ny), path + [grid[nx][ny]]))
                    visited.add((nx, ny))

    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                bfs((i, j))

    return min_path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,5,normal,"['HumanEval/129', '721', '974', '753', '609']","from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    min_val = float('inf')
    min_path = None

    def bfs(start):
        queue = deque([(start, [grid[start[0]][start[1]]])])
        visited = set([start])

        while queue:
            (x, y), path = queue.popleft()
            if len(path) == k:
                if path < min_path:
                    min_path[:] = path
                continue

            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:
                    queue.append(((nx, ny), path + [grid[nx][ny]]))
                    visited.add((nx, ny))

    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                bfs((i, j))

    return min_path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,10,normal,"['HumanEval/129', '721', '974', '753', '609', '457', '938', '528', '94', '322']","from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    min_val = float('inf')
    min_path = None

    def bfs(start):
        queue = deque([(start, [grid[start[0]][start[1]]])])
        visited = set([start])

        while queue:
            (x, y), path = queue.popleft()
            if len(path) == k:
                if path[0] < min_val:
                    min_val = path[0]
                    min_path = path
                continue
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:
                    queue.append(((nx, ny), path + [grid[nx][ny]]))
                    visited.add((nx, ny))

    for i in range(n):
        for j in range(n):
            bfs((i, j))

    return min_path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,1,normal,['873'],"def tri(n):
    sequence = [0, 1, 3]
    for i in range(3, n + 1):
        if i % 2 == 0:
            sequence.append(1 + i / 2)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])
    return sequence[:n + 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['873', 'HumanEval/63', 'HumanEval/55', 'HumanEval/130', '84']","def tri(n):
    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(1 + i / 2)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + my_tri[i - 3])
    return my_tri",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['873', 'HumanEval/63', 'HumanEval/55', 'HumanEval/130', '84', 'HumanEval/46', '231', '389', '926', '28']","def tri(n):
    trib = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            trib.append(1 + i / 2)
        else:
            trib.append(trib[i - 1] + trib[i - 2] + trib[i - 3] if i >= 3 else trib[i - 1] + trib[i - 2] + 3)
    return trib",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['HumanEval/131'],"def digits(n):
    product = 1
    for digit in str(n):
        int_digit = int(digit)
        if int_digit % 2 == 1:
            product *= int_digit
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['HumanEval/131', '711', '845', '365', '479']","def digits(n):
    product = 1
    for digit in str(n):
        int_digit = int(digit)
        if int_digit % 2 == 1:
            product *= int_digit
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['HumanEval/131', '711', '845', '365', '479', '577', '566', '657', '435', '844']","def digits(n):
    product = 1
    for digit in str(n):
        int_digit = int(digit)
        if int_digit % 2 == 1:
            product *= int_digit
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['HumanEval/132'],"def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        else:
            if len(stack) > 1:
                return True
            stack.pop()
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['HumanEval/132', 'HumanEval/56', 'HumanEval/61', '349', '737']","def is_nested(string):
    depth = 0
    max_depth = 0
    for b in string:
        if b == '[':
            depth += 1
            max_depth = max(max_depth, depth)
        else:
            depth -= 1
    return max_depth > 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['HumanEval/132', 'HumanEval/56', 'HumanEval/61', '349', '737', 'HumanEval/6', '175', '91', '823', '30']","def is_nested(string):
    depth = 0
    max_depth = 0
    for char in string:
        if char == '[':
            depth += 1
            max_depth = max(depth, max_depth)
        else:
            depth -= 1
    return max_depth > 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['HumanEval/133'],"import math

def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['HumanEval/133', 'HumanEval/142', '287', '267', '683']","import math

def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,10,normal,"['HumanEval/133', 'HumanEval/142', '287', '267', '683', 'HumanEval/85', '905', '728', '340', 'HumanEval/121']","import math

def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['HumanEval/134'],"def check_if_last_char_is_a_letter(txt):
    if not txt or txt[-1] =='':
        return False
    last_word = txt.split()[-1]
    return len(last_word) == 1 and last_word.isalpha()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,5,normal,"['HumanEval/134', '546', '868', '396', '967']","def check_if_last_char_is_a_letter(txt):
    if not txt or txt[-1] =='':
        return False
    words = txt.split()
    return len(words[-1]) == 1 and words[-1].isalpha()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,10,normal,"['HumanEval/134', '546', '868', '396', '967', '860', '526', '210', 'HumanEval/132', '913']","import re

def check_if_last_char_is_a_letter(txt):
    if not txt or txt[-1] =='':
        return False
    return bool(re.match('^[a-zA-Z]$', txt.split()[-1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,1,normal,['HumanEval/135'],"def can_arrange(arr):
    return next((i for i in range(len(arr) - 1, 0, -1) if arr[i] < arr[i-1]), -1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,5,normal,"['HumanEval/135', '229', '433', '57', 'HumanEval/120']","def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i-1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,10,normal,"['HumanEval/135', '229', '433', '57', 'HumanEval/120', 'HumanEval/116', '550', '915', '195', 'HumanEval/88']","def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,1,normal,['HumanEval/136'],"def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,5,normal,"['HumanEval/136', '755', '457', 'HumanEval/90', 'HumanEval/163']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,10,normal,"['HumanEval/136', '755', '457', 'HumanEval/90', 'HumanEval/163', '443', '418', '408', '340', '62']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,1,normal,['HumanEval/137'],"def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,5,normal,"['HumanEval/137', '404', '309', '47', 'HumanEval/102']","def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,10,normal,"['HumanEval/137', '404', '309', '47', 'HumanEval/102', '93', '891', '257', '53', 'HumanEval/163']","def compare_one(a, b):
    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,1,normal,['HumanEval/138'],"def is_equal_to_sum_even(n):
    if n % 2!= 0 or n < 8:
        return False
    for a in range(2, n//2 + 1, 2):
        for b in range(a, (n-a)//2 + 1, 2):
            for c in range(b, (n-a-b)//2 + 1, 2):
                d = n - a - b - c
                if d >= c and d % 2 == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,5,normal,"['HumanEval/138', '634', '600', '271', '541']","def is_equal_to_sum_even(n):
    if n % 2!= 0 or n < 8:
        return False
    for a in range(2, n//2 + 1, 2):
        for b in range(a, (n-a)//2 + 1, 2):
            for c in range(b, (n-a-b)//2 + 1, 2):
                d = n - a - b - c
                if d >= c and d % 2 == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,10,normal,"['HumanEval/138', '634', '600', '271', '541', '274', '962', '138', '683', '448']","def is_equal_to_sum_even(n):
    if n < 8 or n % 2!= 0:
        return False
    for a in range(2, n//2 + 1, 2):
        for b in range(a, (n-a)//2 + 1, 2):
            for c in range(b, (n-a-b)//2 + 1, 2):
                d = n - a - b - c
                if d >= c and d % 2 == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,1,normal,['HumanEval/139'],"import math

def special_factorial(n):
    special_fact = 1
    for i in range(1, n+1):
        special_fact *= math.factorial(i)
    return special_fact",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,5,normal,"['HumanEval/139', '577', '483', '905', '873']","import math

def special_factorial(n):
    special_fact = 1
    for i in range(1, n+1):
        special_fact *= math.factorial(i)
    return special_fact",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,10,normal,"['HumanEval/139', '577', '483', '905', '873', '901', 'HumanEval/46', 'HumanEval/55', '122', 'HumanEval/63']","import math

def special_factorial(n):
    special_fact = 1
    for i in range(1, n+1):
        special_fact *= math.factorial(i)
    return special_fact",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,1,normal,['HumanEval/140'],"import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '-' if len(m.group()) > 2 else '_' * len(m.group()), text)
    return text.replace(' ', '_')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,5,normal,"['HumanEval/140', '631', '892', '628', '800']","import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '_' if len(m.group()) == 1 else '-', text)
    return text.replace(' ', '_')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,10,normal,"['HumanEval/140', '631', '892', '628', '800', '542', '678', '693', '451', '748']","import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '_' if len(m.group()) == 1 else '-', text)
    return text",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst)!= 2 or lst[1] not in suf or not lst[0] or not lst[0][0].isalpha():
        return 'No'
    return 'Yes' if sum(c.isdigit() for c in lst[0]) <= 3 else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '737', '823', '175']","import re

def file_name_check(file_name):
    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst)!= 2 or lst[1] not in suf or len(lst[0]) == 0 or not lst[0][0].isalpha():
        return 'No'
    if len(re.findall('\d', lst[0])) > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '737', '823', '175', 'HumanEval/134', '396', '822', '967', '349']","import re

def file_name_check(file_name):
    if len(re.findall('\d', file_name)) > 3:
        return 'No'
    if file_name.count('.')!= 1:
        return 'No'
    name, extension = file_name.split('.')
    if not name or not name[0].isalpha():
        return 'No'
    if extension not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,1,normal,['HumanEval/142'],"def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,5,normal,"['HumanEval/142', 'HumanEval/133', '287', '267', '683']","def sum_squares(lst):
    return sum(i**2 if idx % 3 == 0 else i**3 if idx % 4 == 0 else i for idx, i in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,10,normal,"['HumanEval/142', 'HumanEval/133', '287', '267', '683', '340', '837', '420', 'HumanEval/40', '129']","def sum_squares(lst):
    return sum(i**2 if idx % 3 == 0 else i**3 if idx % 4 == 0 else i for idx, i in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,1,normal,['HumanEval/143'],"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    return "" "".join(word for word in sentence.split() if is_prime(len(word)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,5,normal,"['HumanEval/143', '897', 'HumanEval/101', 'HumanEval/125', '305']","def is_prime(n):
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    return''.join(word for word in sentence.split() if is_prime(len(word)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,10,normal,"['HumanEval/143', '897', 'HumanEval/101', 'HumanEval/125', '305', '964', '79', '128', '862', '254']","import re
from collections import Counter

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return "" "".join(prime_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,1,normal,['HumanEval/144'],"from math import gcd

def simplify(x, n):
    a, b = map(int, x.split(""/""))
    c, d = map(int, n.split(""/""))
    numerator = a * c
    denom = b * d
    common_divisor = gcd(numerator, denom)
    return (numerator // common_divisor) % (denom // common_divisor) == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['HumanEval/144', 'HumanEval/76', '96', '904', '98']","from fractions import Fraction

def simplify(x, n):
    result = Fraction(x) * Fraction(n)
    return result.denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,10,normal,"['HumanEval/144', 'HumanEval/76', '96', '904', '98', 'HumanEval/25', '711', '623', '72', 'HumanEval/106']","from fractions import Fraction

def simplify(x, n):
    return (Fraction(x) * Fraction(n)).denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,1,normal,['HumanEval/145'],"def order_by_points(nums):
    def digits_sum(n):
        return sum(int(i) for i in str(abs(n)))
    return sorted(nums, key=lambda x: (digits_sum(x), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,5,normal,"['HumanEval/145', '749', '516', '915', '141']","def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,10,normal,"['HumanEval/145', '749', '516', '915', '141', 'HumanEval/19', '649', '12', '54', '398']","def order_by_points(nums):
    def digits_sum(n):
        return sum(int(i) for i in str(abs(n)))
    return sorted(nums, key=lambda x: (digits_sum(x), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,1,normal,['HumanEval/146'],"def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and num % 2!= 0 and int(str(abs(num))[0]) % 2!= 0 and int(str(abs(num))[-1]) % 2!= 0:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,5,normal,"['HumanEval/146', '426', '41', '258', '697']","def specialFilter(nums):
    count = 0
    odd_digits = set('13579')
    for num in nums:
        if num > 10 and str(num)[0] in odd_digits and str(num)[-1] in odd_digits:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,10,normal,"['HumanEval/146', '426', '41', '258', '697', '807', '817', '883', '433', '775']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and num % 2!= 0:
            first_digit = int(str(abs(num))[0])
            last_digit = int(str(abs(num))[-1])
            if first_digit % 2!= 0 and last_digit % 2!= 0:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,1,normal,['HumanEval/147'],"from itertools import combinations

def get_max_triples(n):
    A = [i*i - i + 1 for i in range(1,n+1)]
    return sum(1 for i, j, k in combinations(range(n), 3) if (A[i] + A[j] + A[k]) % 3 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,5,normal,"['HumanEval/147', '916', '661', '231', 'HumanEval/130']","def get_max_triples(n):
    A = [i*i - i + 1 for i in range(1,n+1)]
    count = [0, 0, 0]
    for num in A:
        count[num % 3] += 1
    ans = count[0] * (count[1] * count[2])
    ans += count[0] * (count[0] - 1) * (count[0] - 2) // 6
    ans += count[1] * (count[1] - 1) * (count[1] - 2) // 6
    ans += count[2] * (count[2] - 1) * (count[2] - 2) // 6
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,10,normal,"['HumanEval/147', '916', '661', '231', 'HumanEval/130', '672', '121', '392', '620', '468']","def get_max_triples(n):
    A = [i*i - i + 1 for i in range(1,n+1)]
    count = 0
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,1,normal,['HumanEval/148'],"def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return planet_names[planet1_index + 1: planet2_index]
    else:
        return planet_names[planet2_index + 1 : planet1_index]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,5,normal,"['HumanEval/148', 'HumanEval/127', '282', 'HumanEval/63', '414']","def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return planet_names[planet1_index + 1: planet2_index]
    else:
        return planet_names[planet2_index + 1 : planet1_index]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,10,normal,"['HumanEval/148', 'HumanEval/127', '282', 'HumanEval/63', '414', '873', '473', 'HumanEval/154', '404', '579']","def bf(planet1, planet2):
    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return planet_names[planet1_index + 1: planet2_index]
    else:
        return planet_names[planet2_index + 1 : planet1_index]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,1,normal,['HumanEval/149'],"def sorted_list_sum(lst):
    return sorted([i for i in lst if len(i) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,5,normal,"['HumanEval/149', '728', '37', 'HumanEval/85', 'HumanEval/70']","def sorted_list_sum(lst):
    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,10,normal,"['HumanEval/149', '728', '37', 'HumanEval/85', 'HumanEval/70', '782', '749', 'HumanEval/37', '108', '877']","def sorted_list_sum(lst):
    return sorted([i for i in lst if len(i) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,1,normal,['HumanEval/150'],"import math

def x_or_y(n, x, y):
    if n < 2:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['HumanEval/150', '122', 'HumanEval/31', '605', 'HumanEval/102']","import math

def x_or_y(n, x, y):
    if n < 2:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,10,normal,"['HumanEval/150', '122', 'HumanEval/31', '605', 'HumanEval/102', '260', '498', '663', '685', '256']","import math

def x_or_y(n, x, y):
    if n < 2:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,1,normal,['HumanEval/151'],"def double_the_difference(lst):
    return sum([i**2 for i in lst if isinstance(i, int) and i > 0 and i%2!=0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,5,normal,"['HumanEval/151', '320', '555', 'HumanEval/142', 'HumanEval/133']","def double_the_difference(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,10,normal,"['HumanEval/151', '320', '555', 'HumanEval/142', 'HumanEval/133', '594', '881', '875', 'HumanEval/113', '177']","def double_the_difference(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['HumanEval/152'],"def compare(game, guess):
    return [abs(x-y) for x,y in zip(game,guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['HumanEval/152', '433', '695', '540', '636']","def compare(game,guess):
    return [abs(x-y) for x,y in zip(game,guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['HumanEval/152', '433', '695', '540', '636', '650', '579', '890', '53', 'HumanEval/137']","def compare(game, guess):
    return [abs(x-y) for x,y in zip(game,guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/153'],"def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return class_name + ""."" + strongest_extension",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,5,normal,"['HumanEval/153', 'HumanEval/12', '548', 'HumanEval/14', '806']","def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return class_name + ""."" + strongest_extension",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,10,normal,"['HumanEval/153', 'HumanEval/12', '548', 'HumanEval/14', '806', '220', '937', '393', '207', 'HumanEval/105']","def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return class_name + ""."" + strongest_extension",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,1,normal,['HumanEval/154'],"def cycpattern_check(a, b):
    return b in a + a or any(b[i:] + b[:i] in a + a for i in range(1, len(b)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,5,normal,"['HumanEval/154', '871', '532', '823', '91']","def cycpattern_check(a, b):
    return b in a + a or any(b[i:] + b[:i] in a for i in range(len(b)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,10,normal,"['HumanEval/154', '871', '532', '823', '91', '874', '643', '186', 'HumanEval/132', '964']","def cycpattern_check(a, b):
    return b in a + a or any(b in a[i:] + a[:i] for i in range(len(a)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,1,normal,['HumanEval/155'],"def even_odd_count(num):
    even_count = sum(1 for i in str(abs(num)) if int(i) % 2 == 0)
    odd_count = len(str(abs(num))) - even_count
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['HumanEval/155', '387', '109', 'HumanEval/131', '904']","def even_odd_count(num):
    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)
    odd_count = len(str(abs(num))) - even_count
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['HumanEval/155', '387', '109', 'HumanEval/131', '904', '258', '78', '41', '844', '235']","def even_odd_count(num):
    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)
    odd_count = len(str(abs(num))) - even_count
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['HumanEval/156'],"def int_to_mini_roman(number):
    num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000] 
    sym = [""i"", ""iv"", ""v"", ""ix"", ""x"", ""xl"", ""l"", ""xc"", ""c"", ""cd"", ""d"", ""cm"", ""m""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['HumanEval/156', '958', '961', '116', '252']","def int_to_mini_roman(number):
    num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] 
    sym = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""] 
    res = ''
    for i in range(len(num)):
        while number >= num[i]:
            res += sym[i]
            number -= num[i]
    return res.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['HumanEval/156', '958', '961', '116', '252', 'HumanEval/78', '100', '583', '467', '764']","def int_to_mini_roman(number):
    num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    sym = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    res = ''
    for i in range(len(num)):
        while number >= num[i]:
            res += sym[i]
            number -= num[i]
    return res.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['HumanEval/157'],"def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return sides[0]**2 + sides[1]**2 == sides[2]**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,5,normal,"['HumanEval/157', '826', '677', '850', '176']","def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return sides[0]**2 + sides[1]**2 == sides[2]**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,10,normal,"['HumanEval/157', '826', '677', '850', '176', '449', 'HumanEval/71', '198', '356', '153']","import math

def right_angle_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,1,normal,['HumanEval/158'],"def find_max(words):
    return max(words, key=lambda x: (len(set(x)), x.lower()), default='')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['HumanEval/158', 'HumanEval/12', '480', '418', '937']","from typing import List

def find_max(words: List[str]) -> str:
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['HumanEval/158', 'HumanEval/12', '480', '418', '937', '357', '200', '315', '517', '832']","from typing import List

def find_max(words: List[str]) -> str:
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['HumanEval/159'],"def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['HumanEval/159', '907', '211', '169', '123']","def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['HumanEval/159', '907', '211', '169', '123', '31', 'HumanEval/102', '442', '955', '372']","def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['HumanEval/160'],"def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,5,normal,"['HumanEval/160', '218', '445', 'HumanEval/3', 'HumanEval/163']","def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,10,normal,"['HumanEval/160', '218', '445', 'HumanEval/3', 'HumanEval/163', 'HumanEval/32', '127', 'HumanEval/144', 'HumanEval/97', 'HumanEval/13']","def do_algebra(operator, operand):
    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression += oprt + str(oprn)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,1,normal,['HumanEval/161'],"def solve(s):
    if any(c.isalpha() for c in s):
        return ''.join(c.swapcase() if c.isalpha() else c for c in s)
    return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,5,normal,"['HumanEval/161', 'HumanEval/27', '557', '182', '39']","def solve(s):
    if any(c.isalpha() for c in s):
        return ''.join(c.swapcase() if c.isalpha() else c for c in s)
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,10,normal,"['HumanEval/161', 'HumanEval/27', '557', '182', '39', 'HumanEval/112', '131', 'HumanEval/89', 'HumanEval/84', '364']","def solve(s):
    if any(c.isalpha() for c in s):
        return ''.join(c.swapcase() if c.isalpha() else c for c in s)
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,5,normal,"['HumanEval/162', '146', '330', 'HumanEval/89', '708']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,10,normal,"['HumanEval/162', '146', '330', 'HumanEval/89', '708', '39', '217', '230', '933', '813']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,1,normal,['HumanEval/163'],"def generate_integers(a, b):
    lower = min(a, b)
    upper = max(a, b)
    return [i for i in range(lower, upper+1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,5,normal,"['HumanEval/163', '47', '345', '257', '503']","def generate_integers(a, b):
    lower = min(a, b)
    upper = max(a, b)
    return [i for i in range(lower, upper+1) if i % 2 == 0 and i % 10 % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,10,normal,"['HumanEval/163', '47', '345', '257', '503', '690', 'HumanEval/13', '221', 'HumanEval/131', '745']","def generate_integers(a, b):
    lower = min(a, b)
    upper = max(a, b)
    return [i for i in range(lower, upper+1) if i % 2 == 0 and i <= 8 and i >= 2]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
