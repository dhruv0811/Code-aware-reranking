query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', 'HumanEval/3', '26']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', 'HumanEval/3', '26', '89', '942', 'HumanEval/127', '284', '433']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(len(numbers) - 1):
        if numbers[i + 1] - numbers[i] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/1'],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_group = []
    balance = 0
    for char in paren_string.replace(' ', ''):
        if char == '(':
            balance += 1
            current_group.append(char)
        elif char == ')':
            balance -= 1
            current_group.append(char)
            if balance == 0:
                result.append(''.join(current_group))
                current_group = []
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/1', 'HumanEval/6', '640', '15', '956']","import re
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    return re.findall(r'\([^()]+?\)', paren_string.replace(' ', ''))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,10,normal,"['HumanEval/1', 'HumanEval/6', '640', '15', '956', '538', '374', 'HumanEval/17', '877', '693']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    temp = ''
    count = 0
    for char in paren_string.replace(' ', ''):
        temp += char
        if char == '(':
            count += 1
        else:
            count -= 1
        if count == 0:
            result.append(temp)
            temp = ''
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/2'],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/2', 'HumanEval/99', '435', '99', '89']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/2', 'HumanEval/99', '435', '99', '89', '479', '692', '33', '24', 'HumanEval/79']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/0', '113', 'HumanEval/32']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/0', '113', 'HumanEval/32', '477', 'HumanEval/40', 'HumanEval/43', '69', 'HumanEval/94']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['HumanEval/4'],"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['HumanEval/4', '717', '145', 'HumanEval/21', 'HumanEval/20']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['HumanEval/4', '717', '145', 'HumanEval/21', 'HumanEval/20', 'HumanEval/47', '63', 'HumanEval/103', '622', '664']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List
from itertools import chain, repeat

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    return list(chain.from_iterable(zip(numbers, repeat(delimeter))) if numbers else []) + [numbers[-1]] if numbers else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,5,normal,"['HumanEval/5', '578', '251', '503', 'HumanEval/25']","from typing import List

def intersperse(numbers: List[int], delimiter: int) -> List[int]:
    result = []
    for i, num in enumerate(numbers):
        result.append(num)
        if i < len(numbers) - 1:
            result.append(delimiter)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', '578', '251', '503', 'HumanEval/25', '500', 'HumanEval/32', 'HumanEval/28', '621', 'HumanEval/20']","from typing import List

def intersperse(numbers: List[int], delimiter: int) -> List[int]:
    return [val for pair in zip(numbers, [delimiter] * len(numbers)) for val in pair][:-1] + [numbers[-1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(group: str) -> int:
        depth = 0
        max_depth = 0
        for char in group:
            if char == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif char == ')':
                depth -= 1
        return max_depth

    return [parse_paren_group(group) for group in paren_string.split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,5,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/119', 'HumanEval/17']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def max_depth(paren_group):
        depth = 0
        max_depth = 0
        for char in paren_group:
            if char == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1
        return max_depth

    return [max_depth(group) for group in paren_string.split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,10,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/119', 'HumanEval/17', '877', '538', 'HumanEval/61', '640', 'HumanEval/56']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(group):
        depth = 0
        max_depth = 0
        for char in group:
            if char == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1
        return max_depth

    return [parse_paren_group(group) for group in paren_string.split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/22', '823', '456']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/22', '823', '456', '91', '27', 'HumanEval/11', '18', '118']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return (reduce(add, numbers, 0), prod(numbers, 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', '514', '65', '796', '728']","from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return (reduce(add, numbers, 0), prod(numbers, 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', '514', '65', '796', '728', 'HumanEval/60', '170', '649', '798', 'HumanEval/22']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    total_sum = sum(numbers)
    product = 1
    for num in numbers:
        product *= num
    return total_sum, product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    max_so_far = float('-inf')
    result = []
    for num in numbers:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,5,normal,"['HumanEval/9', 'HumanEval/35', '259', 'HumanEval/163', 'HumanEval/147']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    if not numbers:
        return []
    
    max_so_far = numbers[0]
    result = [max_so_far]
    
    for num in numbers[1:]:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', 'HumanEval/35', '259', 'HumanEval/163', 'HumanEval/147', '805', '393', '130', 'HumanEval/12', '971']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    if not numbers:
        return []
    
    max_so_far = numbers[0]
    result = [max_so_far]
    
    for num in numbers[1:]:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def make_palindrome(string: str) -> str:
    if not string:
        return ''
    rev_str = string[::-1]
    for i in range(len(string) + 1):
        if string.startswith(rev_str[i:]):
            return string + rev_str[:i]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', '909']","def make_palindrome(string: str) -> str:
    if not string:
        return ''
    for i in range(len(string), 0, -1):
        if string[i:] == string[i:][::-1]:
            return string + string[:i][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', '909', 'HumanEval/107', '100', '364', '823', '53']","def make_palindrome(string: str) -> str:
    if not string:
        return ''
    rev_string = string[::-1]
    for i in range(len(string)):
        if string.startswith(rev_string[i:]):
            return string + rev_string[:i]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', '399', '456', '364', '226']","from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', '399', '456', '364', '226', '192', 'HumanEval/78', '310', '538', 'HumanEval/7']","def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', '393', '207', 'HumanEval/153', 'HumanEval/9']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', '393', '207', 'HumanEval/153', 'HumanEval/9', '128', 'HumanEval/6', 'HumanEval/7', 'HumanEval/136', 'HumanEval/11']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['HumanEval/13'],"def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = (b, a % b)
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['HumanEval/13', '498', '45', '339', '151']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['HumanEval/13', '498', '45', '339', '151', '781', '681', 'HumanEval/24', '687', '96']","def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = (b, a % b)
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/14'],"from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i + 1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/7']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/7', '456', '374', 'HumanEval/28', 'HumanEval/6', '207']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['HumanEval/15'],"def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,5,normal,"['HumanEval/15', '785', '132', '552', '39']","def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,10,normal,"['HumanEval/15', '785', '132', '552', '39', '84', '542', '310', '749', '538']","def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['HumanEval/16'],"def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['HumanEval/16', '684', '352', '666', '165']","def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['HumanEval/16', '684', '352', '666', '165', '238', '813', '523', '242', '61']","def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"from typing import List

def parse_music(music_string: str) -> List[int]:
    note_durations = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.replace('o|', 'o| ').replace('.|', '.| ').split()
    return [note_durations[note] for note in notes]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,5,normal,"['HumanEval/17', '686', 'HumanEval/6', '785', '226']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_durations = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    durations = []
    current_note = ''
    
    for note in notes:
        if note in note_durations:
            if current_note:
                durations.append(note_durations[current_note])
            current_note = note
        else:
            current_note += note
            
    if current_note:
        durations.append(note_durations[current_note])
        
    return durations",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,10,normal,"['HumanEval/17', '686', 'HumanEval/6', '785', '226', '40', '192', '18', 'HumanEval/1', '238']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_values = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    return [note_values[note] for note in notes]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['HumanEval/18'],"def how_many_times(string: str, substring: str) -> int:
    count = 0
    start = 0
    while start < len(string):
        pos = string.find(substring, start)
        if pos!= -1:
            count += 1
            start = pos + 1
        else:
            break
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['HumanEval/18', '238', '61', '773', '684']","import re

def how_many_times(string: str, substring: str) -> int:
    return len(re.findall('(?=' + re.escape(substring) + ')', string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['HumanEval/18', '238', '61', '773', '684', '207', '91', '192', '30', '338']","import re

def how_many_times(string: str, substring: str) -> int:
    return len(re.findall('(?=' + re.escape(substring) + ')', string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted(numbers.split(), key=num_dict.get))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', '749', '37', '877', 'HumanEval/105']","from typing import List

def sort_numbers(numbers: str) -> str:
    var_1 = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted(numbers.split(' '), key=var_1.get))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', '749', '37', '877', 'HumanEval/105', '705', '516', 'HumanEval/70', 'HumanEval/145', '104']","from typing import List

def sort_numbers(numbers: str) -> str:
    var_1 = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted(numbers.split(), key=lambda x: var_1[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,5,normal,"['HumanEval/20', '89', 'HumanEval/99', 'HumanEval/0', 'HumanEval/19']","from typing import List, Tuple
import itertools

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    min_diff = float('inf')
    closest_pair = None
    for num1, num2 in itertools.combinations(numbers, 2):
        diff = abs(num1 - num2)
        if diff < min_diff:
            min_diff = diff
            closest_pair = tuple(sorted([num1, num2]))
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,10,normal,"['HumanEval/20', '89', 'HumanEval/99', 'HumanEval/0', 'HumanEval/19', '304', 'HumanEval/136', '259', '408', '898']","from typing import List, Tuple
import itertools

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    min_diff = float('inf')
    closest_pair = None
    for num1, num2 in itertools.combinations(numbers, 2):
        diff = abs(num1 - num2)
        if diff < min_diff:
            min_diff = diff
            closest_pair = tuple(sorted((num1, num2)))
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,5,normal,"['HumanEval/21', '919', '726', '673', 'HumanEval/25']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,10,normal,"['HumanEval/21', '919', '726', '673', 'HumanEval/25', '117', 'HumanEval/156', '708', '205', '98']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,5,normal,"['HumanEval/22', '41', 'HumanEval/7', '277', 'HumanEval/29']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,10,normal,"['HumanEval/22', '41', 'HumanEval/7', '277', 'HumanEval/29', '722', 'HumanEval/3', 'HumanEval/26', 'HumanEval/136', '426']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['HumanEval/23'],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['HumanEval/23', '238', '764', '813', 'HumanEval/15']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['HumanEval/23', '238', '764', '813', 'HumanEval/15', '868', '684', '192', 'HumanEval/105', '83']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['HumanEval/24'],"def largest_divisor(n: int) -> int:
    for i in range(n - 1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['HumanEval/24', '96', '681', '339', 'HumanEval/13']","def largest_divisor(n: int) -> int:
    for i in range(n - 1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['HumanEval/24', '96', '681', '339', 'HumanEval/13', '781', '483', '745', 'HumanEval/136', 'HumanEval/59']","import math

def largest_divisor(n: int) -> int:
    for i in range(math.floor(math.sqrt(n)), 0, -1):
        if n % i == 0:
            return max(i, n // i)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/25'],"from typing import List
import math

def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while divisor <= int(math.sqrt(n) + 1):
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,5,normal,"['HumanEval/25', '32', 'HumanEval/59', 'HumanEval/5', 'HumanEval/39']","import math

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i <= math.sqrt(n) + 1:
        if n % i == 0:
            factors.append(i)
            n //= i
        else:
            i += 1
    if n > 1:
        factors.append(n)
    return factors",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
25,HumanEval/25,10,normal,"['HumanEval/25', '32', 'HumanEval/59', 'HumanEval/5', 'HumanEval/39', 'HumanEval/75', '483', 'HumanEval/26', '726', '919']","from typing import List
import math

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i <= math.sqrt(n) + 1:
        if n % i == 0:
            factors.append(i)
            n //= i
        else:
            i += 1
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List
from collections import OrderedDict

def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = OrderedDict()
    for num in numbers:
        seen[num] = seen.get(num, 0) + 1
    return [num for num, count in seen.items() if count == 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,5,normal,"['HumanEval/26', '932', '712', '674', '27']","from typing import List
from collections import OrderedDict

def remove_duplicates(numbers: List[int]) -> List[int]:
    return list(OrderedDict.fromkeys([n for n in numbers if numbers.count(n) == 1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,10,normal,"['HumanEval/26', '932', '712', '674', '27', 'HumanEval/22', '161', '196', '22', 'HumanEval/34']","from typing import List
from collections import OrderedDict

def remove_duplicates(numbers: List[int]) -> List[int]:
    return list(OrderedDict.fromkeys([n for n in numbers if numbers.count(n) == 1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '364', '877', '917']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '364', '877', '917', '478', '495', '459', '374', '604']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', '213', '500', '206', '390']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,10,normal,"['HumanEval/28', '213', '500', '206', '390', '538', '421', 'HumanEval/14', '943', 'HumanEval/11']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [string for string in strings if string.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/22', '277']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/22', '277', '861', '456', 'HumanEval/26', '27', '181']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [string for string in strings if string.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/30'],"def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,5,normal,"['HumanEval/30', '870', '329', '442', '189']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,10,normal,"['HumanEval/30', '870', '329', '442', '189', '41', '184', 'HumanEval/42', 'HumanEval/80', 'HumanEval/6']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/75'],"import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/75', '605', 'HumanEval/82', 'HumanEval/39', 'HumanEval/31']","import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/75', '605', 'HumanEval/82', 'HumanEval/39', 'HumanEval/31', 'HumanEval/59', '256', 'HumanEval/127', '685', '32']","import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def find_zero(xs: list):
    a, b = (-1.0, 1.0)
    while poly(xs, a) * poly(xs, b) > 0:
        a *= 2.0
        b *= 2.0
    while b - a > 1e-10:
        c = (a + b) / 2.0
        if poly(xs, c) * poly(xs, a) > 0:
            a = c
        else:
            b = c
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,5,normal,"['HumanEval/32', 'HumanEval/25', '589', 'HumanEval/11', 'HumanEval/161']","import math

def find_zero(xs: list):
    a, b = (-1.0, 1.0)
    while poly(xs, a) * poly(xs, b) > 0:
        a *= 2.0
        b *= 2.0
    while b - a > 1e-10:
        c = (a + b) / 2.0
        if poly(xs, c) * poly(xs, a) > 0:
            a = c
        else:
            b = c
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,10,normal,"['HumanEval/32', 'HumanEval/25', '589', 'HumanEval/11', 'HumanEval/161', 'HumanEval/40', 'HumanEval/123', 'HumanEval/121', 'HumanEval/3', 'HumanEval/84']","import numpy as np

def find_zero(xs: list):
    return np.roots(xs)[np.isreal(np.roots(xs))][0].real",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/37', '104', '37', '569']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/37', '104', '37', '569', '487', '839', '705', 'HumanEval/19', '516']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', '694', 'HumanEval/104', '758', '779']","def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', '694', 'HumanEval/104', '758', '779', '536', '281', '573', '104', '760']","def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['HumanEval/35'],"def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['HumanEval/35', '259', '613', 'HumanEval/9', '393']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['HumanEval/35', '259', '613', 'HumanEval/9', '393', 'HumanEval/158', 'HumanEval/147', '200', '101', 'HumanEval/136']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['HumanEval/36'],"def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['HumanEval/36', '781', '365', '745', '577']","def fizz_buzz(n: int) -> int:
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['HumanEval/36', '781', '365', '745', '577', '483', '107', '78', '426', 'HumanEval/113']","def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/37'],"def sort_even(l: list):
    even_elements = sorted(l[::2])
    return [val for pair in zip(even_elements, l[1::2]) for val in pair] + even_elements[len(l[1::2]):]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/37', '790', '104', '569', '705']","def sort_even(l: list):
    even_elements = sorted(l[::2])
    return [val for pair in zip(even_elements, l[1::2]) for val in pair] + even_elements[len(l[1::2]):]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/37', '790', '104', '569', '705', '37', '41', 'HumanEval/19', '567', '889']","def sort_even(l: list):
    even_elements = sorted(l[::2])
    return [val for pair in zip(even_elements, l[1::2]) for val in pair] + even_elements[len(l[1::2]):]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '317', '157']","def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,10,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '317', '157', '217', '374', 'HumanEval/65', 'HumanEval/15', '39']","def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['HumanEval/39'],"import math

def prime_fib(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, min(int(math.sqrt(num)) + 1, num - 1)):
            if num % i == 0:
                return False
        return True

    fib_sequence = [0, 1]
    count = 0
    while True:
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
        if is_prime(fib_sequence[-1]):
            count += 1
        if count == n:
            return fib_sequence[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['HumanEval/39', 'HumanEval/55', '873', '605', '256']","import math

def prime_fib(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, min(int(math.sqrt(num)) + 1, num - 1)):
            if num % i == 0:
                return False
        return True

    a, b = 0, 1
    count = 0
    while True:
        if is_prime(b):
            count += 1
            if count == n:
                return b
        a, b = b, a + b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['HumanEval/39', 'HumanEval/55', '873', '605', '256', 'HumanEval/63', 'HumanEval/46', '32', 'HumanEval/59', 'HumanEval/31']","import math

def prime_fib(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, min(int(math.sqrt(num)) + 1, num - 1)):
            if num % i == 0:
                return False
        return True

    fib_sequence = [0, 1]
    count = 0
    while True:
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
        if is_prime(fib_sequence[-1]):
            count += 1
        if count == n:
            return fib_sequence[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['HumanEval/40'],"def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i-1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,5,normal,"['HumanEval/40', '340', 'HumanEval/43', '121', '916']","def triples_sum_to_zero(nums):
    nums.sort()
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,10,normal,"['HumanEval/40', '340', 'HumanEval/43', '121', '916', '837', '420', 'HumanEval/32', '514', '685']","def triples_sum_to_zero(nums):
    nums.sort()
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['HumanEval/41'],"def car_race_collision(n: int):
    return n ** 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,5,normal,"['HumanEval/41', '473', '249', '298', 'HumanEval/127']","def car_race_collision(n: int):
    return n ** 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,10,normal,"['HumanEval/41', '473', '249', '298', 'HumanEval/127', '525', '414', '239', 'HumanEval/74', '111']","def car_race_collision(n: int):
    return n ** 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', '859', '729', '857', '536']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', '859', '729', '857', '536', '143', '282', '106', '758', '779']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['767'],"def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set and num!= 0:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['767', 'HumanEval/43', '144', 'HumanEval/40', '633']","def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['767', 'HumanEval/43', '144', 'HumanEval/40', '633', '527', '138', '514', '723', '408']","def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['HumanEval/44'],"def change_base(x: int, base: int):
    if x == 0:
        return '0'
    digits = []
    while x:
        digits.append(str(x % base))
        x //= base
    return ''.join(reversed(digits))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,5,normal,"['HumanEval/44', '958', '619', '33', '24']","def change_base(x: int, base: int):
    if x == 0:
        return '0'
    digits = []
    while x:
        digits.append(str(x % base))
        x //= base
    return ''.join(reversed(digits))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,10,normal,"['HumanEval/44', '958', '619', '33', '24', '539', 'HumanEval/79', '194', '99', '621']","def change_base(x: int, base: int):
    if x == 0:
        return '0'
    digits = []
    while x:
        digits.append(str(x % base))
        x //= base
    return ''.join(reversed(digits))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,1,normal,['HumanEval/45'],"def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,5,normal,"['HumanEval/45', '626', 'HumanEval/71', '488', '742']","def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,10,normal,"['HumanEval/45', '626', 'HumanEval/71', '488', '742', '848', '176', '163', '458', '52']","def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,1,normal,['873'],"def fib4(n: int):
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")
    elif n <= 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    else:
        fib4_values = [0, 0, 2, 0]
        for i in range(4, n + 1):
            fib4_values.append(sum(fib4_values[-4:]))
        return fib4_values[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46']","def fib4(n: int):
    if n < 4:
        return [0, 0, 2, 0][n]
    fibs = [0, 0, 2, 0]
    for _ in range(4, n + 1):
        fibs.append(sum(fibs))
        fibs.pop(0)
    return fibs[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46', '239', '843', '84', '552', '745']","def fib4(n: int):
    if n < 4:
        return [0, 0, 2, 0][n]
    fibs = [0, 0, 2, 0]
    for _ in range(4, n + 1):
        fibs.append(sum(fibs))
        fibs.pop(0)
    return fibs[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,1,normal,['HumanEval/47'],"import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,5,normal,"['HumanEval/47', '342', '397', '622', '432']","import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,10,normal,"['HumanEval/47', '342', '397', '622', '432', '381', '536', '790', '50', 'HumanEval/21']","import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['HumanEval/48'],"def is_palindrome(text: str):
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['HumanEval/48', 'HumanEval/10', '485', '864', 'HumanEval/107']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['HumanEval/48', 'HumanEval/10', '485', '864', 'HumanEval/107', '192', '909', '53', 'HumanEval/134', '352']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,1,normal,['952'],"def modp(n: int, p: int):
    return pow(2, n, p)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,5,normal,"['952', '745', 'HumanEval/49', '616', '402']","def modp(n: int, p: int):
    result = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        base = (base * base) % p
        n = n // 2
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,10,normal,"['952', '745', 'HumanEval/49', '616', '402', '288', '471', '260', '36', '55']","def modp(n: int, p: int):
    result = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        base = (base * base) % p
        n = n // 2
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,1,normal,['HumanEval/50'],"def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,5,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/65', 'HumanEval/162']","def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,10,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/65', 'HumanEval/162', '83', '317', '330', '732', '182']","def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,1,normal,['HumanEval/64'],"def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return ''.join([c for c in text if c not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,5,normal,"['HumanEval/64', 'HumanEval/51', '131', 'HumanEval/118', '776']","def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return ''.join([char for char in text if char not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['HumanEval/64', 'HumanEval/51', '131', 'HumanEval/118', '776', '727', '676', '377', '478', '495']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['HumanEval/52'],"def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '433', '477']","def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '433', '477', '69', 'HumanEval/57', '68', '567', '700']","def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/53'],"def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/53', '363', '750', '621', 'HumanEval/122']","def add(x: int, y: int) -> int:
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/53', '363', '750', '621', 'HumanEval/122', 'HumanEval/85', '503', '729', '470', '106']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['352'],"from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,5,normal,"['352', 'HumanEval/54', '53', '741', 'HumanEval/134']","def same_chars(s0: str, s1: str):
    return set(s0) == set(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,10,normal,"['352', 'HumanEval/54', '53', '741', 'HumanEval/134', '217', '91', '30', '338', '74']","def same_chars(s0: str, s1: str):
    return set(s0) == set(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,1,normal,['873'],"from functools import lru_cache

def fib(n: int):
    if n <= 0:
        raise ValueError(""n must be a positive integer"")
    if n == 1 or n == 2:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)

# To improve efficiency, use memoization
@lru_cache(maxsize=None)
def fib(n: int):
    if n <= 0:
        raise ValueError(""n must be a positive integer"")
    if n == 1 or n == 2:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46']","def fib(n: int):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46', '483', '577', '623', '479', '745']","def fib(n: int):
    if n <= 0:
        return ""Input should be a positive integer""
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        a, b = 1, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['HumanEval/119'],"def correct_bracketing(brackets: str):
    count = 0
    for bracket in brackets:
        if bracket == ""<"":
            count += 1
        else:
            count -= 1
        if count < 0:
            return False
    return count == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['HumanEval/119', 'HumanEval/56', 'HumanEval/61', '175', '30']","def correct_bracketing(brackets: str):
    count = 0
    for bracket in brackets:
        if bracket == '<':
            count += 1
        else:
            count -= 1
        if count < 0:
            return False
    return count == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['HumanEval/119', 'HumanEval/56', 'HumanEval/61', '175', '30', '338', '771', '178', 'HumanEval/0', '640']","def correct_bracketing(brackets: str):
    count = 0
    for bracket in brackets:
        if bracket == '<':
            count += 1
        else:
            count -= 1
        if count < 0:
            return False
    return count == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['HumanEval/57'],"def monotonic(l: list):
    increasing = decreasing = True
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['HumanEval/57', 'HumanEval/3', '680', '68', '670']","def monotonic(l: list):
    increasing = decreasing = True
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,10,normal,"['HumanEval/57', 'HumanEval/3', '680', '68', '670', '889', '567', 'HumanEval/0', '69', 'HumanEval/52']","def monotonic(l: list):
    increasing = decreasing = True
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,5,normal,"['HumanEval/58', '111', '298', '431', '648']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,10,normal,"['HumanEval/58', '111', '298', '431', '648', '578', '943', '108', '249', '104']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"import math

def largest_prime_factor(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    max_factor = 1
    for i in range(2, int(math.sqrt(n)) + 1):
        while n % i == 0:
            if is_prime(i):
                max_factor = max(max_factor, i)
            n //= i
    if n > 1 and is_prime(n):
        max_factor = max(max_factor, n)
    return max_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '32', 'HumanEval/24', '605', '260']","import math

def largest_prime_factor(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    max_factor = -1
    for i in range(2, int(math.sqrt(n)) + 1):
        while n % i == 0:
            if is_prime(i):
                max_factor = max(max_factor, i)
            n //= i
    if n > 1 and is_prime(n):
        max_factor = max(max_factor, n)
    return max_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '32', 'HumanEval/24', '605', '260', 'HumanEval/39', '256', '483', '443', '366']","import math

def largest_prime_factor(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, min(int(math.sqrt(num)) + 1, num - 1)):
            if num % i == 0:
                return False
        return True

    max_prime = -1
    for i in range(2, int(math.sqrt(n)) + 1):
        while n % i == 0:
            if is_prime(i):
                max_prime = max(max_prime, i)
            n //= i
    if n > 1 and is_prime(n):
        max_prime = max(max_prime, n)
    return max_prime",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['HumanEval/60'],"def sum_to_n(n: int):
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['HumanEval/60', '870', '398', '675', '123']","def sum_to_n(n: int):
    return sum(range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,10,normal,"['HumanEval/60', '870', '398', '675', '123', '514', '133', '566', '162', '504']","def sum_to_n(n: int):
    return sum(range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['HumanEval/119'],"def correct_bracketing(brackets: str):
    count = 0
    for bracket in brackets:
        if bracket == '(':
            count += 1
        else:
            count -= 1
        if count < 0:
            return False
    return count == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,5,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', '175', '771']","def correct_bracketing(brackets: str):
    count = 0
    for bracket in brackets:
        if bracket == '(':
            count += 1
        else:
            count -= 1
        if count < 0:
            return False
    return count == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,10,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', '175', '771', 'HumanEval/0', '640', '30', '338', '178']","def correct_bracketing(brackets: str):
    count = 0
    for bracket in brackets:
        if bracket == '(':
            count += 1
        else:
            count -= 1
        if count < 0:
            return False
    return count == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['HumanEval/62'],"def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['HumanEval/62', '399', 'HumanEval/11', 'HumanEval/160', '430']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['HumanEval/62', '399', 'HumanEval/11', 'HumanEval/160', '430', '205', 'HumanEval/32', '456', '288', '623']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['HumanEval/63'],"from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,5,normal,"['HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39', 'HumanEval/46']","def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    fib = [0, 0, 1]
    for i in range(3, n + 1):
        fib.append(fib[-1] + fib[-2] + fib[-3])
    return fib[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39', 'HumanEval/46', '300', '84', '552', 'HumanEval/15', '345']","def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    fib = [0, 0, 1]
    for i in range(3, n + 1):
        fib.append(fib[i-1] + fib[i-2] + fib[i-3])
    return fib[n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s and (s[-1] == 'y' or s[-1] == 'Y'):
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', 'HumanEval/51', 'HumanEval/118', '776', '131']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s and (s[-1].lower() == 'y'):
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,10,normal,"['HumanEval/64', 'HumanEval/51', 'HumanEval/118', '776', '131', '684', '238', '813', '30', '338']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1].lower() == 'y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,1,normal,['HumanEval/50'],"def circular_shift(x, shift):
    num_str = str(x)
    num_digits = len(num_str)
    shift = shift % num_digits
    if shift == 0:
        return num_str
    return num_str[-shift:] + num_str[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/50', 'HumanEval/65', '364', 'HumanEval/38', '619']","def circular_shift(x, shift):
    var_2 = str(x)
    if shift > len(var_2):
        return var_2[::-1]
    else:
        return var_2[-shift:] + var_2[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/50', 'HumanEval/65', '364', 'HumanEval/38', '619', '799', '435', '467', 'HumanEval/11', '775']","def circular_shift(x, shift):
    var_0 = str(x)
    if shift > len(var_0):
        return var_0[::-1]
    else:
        return var_0[-shift:] + var_0[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['148'],"def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,5,normal,"['148', '146', 'HumanEval/66', '566', '398']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,10,normal,"['148', '146', 'HumanEval/66', '566', '398', '558', '269', 'HumanEval/108', 'HumanEval/131', '238']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['HumanEval/67'],"def fruit_distribution(s, n):
    return n - sum(int(i) for i in s.split() if i.isdigit())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['HumanEval/67', '61', '238', 'HumanEval/105', '749']","import re

def fruit_distribution(s, n):
    numbers = [int(num) for num in re.findall(r'\d+', s)]
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['HumanEval/67', '61', '238', 'HumanEval/105', '749', '453', 'HumanEval/113', '926', '911', '360']","import re

def fruit_distribution(s, n):
    numbers = list(map(int, re.findall(r'\d+', s)))
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['342'],"def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    if not even_nodes:
        return []
    return [min(even_nodes, key=lambda x: (x[0], x[1]))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,5,normal,"['342', 'HumanEval/68', '893', '460', '413']","def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    if not even_nodes:
        return []
    return [min(even_nodes, key=lambda x: (x[0], x[1]))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['342', 'HumanEval/68', '893', '460', '413', 'HumanEval/90', 'HumanEval/136', '94', '304', '408']","def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    if not even_nodes:
        return []
    return [min(even_nodes, key=lambda x: (x[0], x[1]))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,1,normal,['HumanEval/136'],"from collections import Counter

def search(lst):
    count = Counter(lst)
    for num in sorted(count, reverse=True):
        if count[num] >= num and num > 0:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['HumanEval/136', '143', '492', 'HumanEval/69', '184']","from collections import Counter

def search(lst):
    count = Counter(lst)
    for num in sorted(count, reverse=True):
        if count[num] >= num and num > 0:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['HumanEval/136', '143', '492', 'HumanEval/69', '184', '613', '119', 'HumanEval/22', '97', '605']","from collections import Counter

def search(lst):
    count = Counter(lst)
    for num in sorted(count, reverse=True):
        if count[num] >= num and num > 0:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['HumanEval/70'],"import heapq

def strange_sort_list(lst):
    min_heap = []
    max_heap = []
    result = []
    for num in lst:
        heapq.heappush(min_heap, num)
        heapq.heappush(max_heap, -num)
    while min_heap:
        result.append(heapq.heappop(min_heap))
        if max_heap:
            result.append(-heapq.heappop(max_heap))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,5,normal,"['HumanEval/70', '37', '889', '705', '569']","def strange_sort_list(lst):
    result = []
    while lst:
        if len(result) % 2 == 0:
            result.append(min(lst))
        else:
            result.append(max(lst))
        lst.remove(result[-1])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,10,normal,"['HumanEval/70', '37', '889', '705', '569', '104', '896', 'HumanEval/88', 'HumanEval/19', '749']","def strange_sort_list(lst):
    result = []
    ascending = True
    lst_copy = lst.copy()
    while lst_copy:
        if ascending:
            result.append(min(lst_copy))
        else:
            result.append(max(lst_copy))
        lst_copy.remove(result[-1])
        ascending = not ascending
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,1,normal,['HumanEval/45'],"import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,5,normal,"['HumanEval/45', '176', 'HumanEval/71', '626', '742']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c) / 2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['HumanEval/45', '176', 'HumanEval/71', '626', '742', '488', '848', '163', 'HumanEval/157', '677']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c) / 2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['HumanEval/72'],"def will_it_fly(q, w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['HumanEval/72', '129', '485', '121', '433']","def will_it_fly(q, w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,10,normal,"['HumanEval/72', '129', '485', '121', '433', '123', 'HumanEval/3', 'HumanEval/80', 'HumanEval/32', '69']","def will_it_fly(q, w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,1,normal,['100'],"def smallest_change(arr):
    left, right = 0, len(arr) - 1
    count = 0
    while left < right:
        if arr[left]!= arr[right]:
            count += 1
        left += 1
        right -= 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,5,normal,"['100', '699', '595', '838', 'HumanEval/73']","def smallest_change(arr):
    return sum(a!= b for a, b in zip(arr, arr[::-1])) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,10,normal,"['100', '699', '595', '838', 'HumanEval/73', '644', '856', '755', '408', 'HumanEval/88']","def smallest_change(arr):
    left, right = 0, len(arr) - 1
    count = 0
    while left < right:
        if arr[left]!= arr[right]:
            count += 1
        left += 1
        right -= 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['HumanEval/74'],"def total_match(lst1, lst2):
    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,5,normal,"['HumanEval/74', '61', '285', '178', '298']","def total_match(lst1, lst2):
    return lst1 if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2) else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,10,normal,"['HumanEval/74', '61', '285', '178', '298', '666', '238', '186', 'HumanEval/7', '684']","def total_match(lst1, lst2):
    sum1 = sum(len(s) for s in lst1)
    sum2 = sum(len(s) for s in lst2)
    return lst1 if sum1 <= sum2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"import itertools

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    primes = [i for i in range(2, 101) if is_prime(i)]
    for p1, p2, p3 in itertools.combinations_with_replacement(primes, 3):
        if p1 * p2 * p3 == a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '605', 'HumanEval/31']","import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
            if n % i == 0:
                return False
        return True

    primes = [i for i in range(2, 100) if is_prime(i)]
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '605', 'HumanEval/31', '685', 'HumanEval/82', '256', '32', 'HumanEval/127']","import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(2, 101):
            if not is_prime(j):
                continue
            for k in range(2, 101):
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,1,normal,['HumanEval/76'],"import math

def is_simple_power(x, n):
    if n == 1:
        return x == 1
    if x < 1 or n < 2:
        return False
    root = round(math.log(x, n))
    return n ** root == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,5,normal,"['HumanEval/76', '167', '138', '93', '199']","import math

def is_simple_power(x, n):
    if x < 1 or n < 2:
        return x == 1
    log_result = math.log(x, n)
    return math.isclose(log_result, round(log_result))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,10,normal,"['HumanEval/76', '167', '138', '93', '199', '388', 'HumanEval/75', '900', '724', '605']","import math

def is_simple_power(x, n):
    if n == 1:
        return x == 1
    root = round(math.log(x, n))
    return n ** root == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['HumanEval/77'],"import math

def iscube(a):
    return math.isclose(a, round(a ** (1.0 / 3)) ** 3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,5,normal,"['HumanEval/77', '646', '447', '129', 'HumanEval/94']","import math

def iscube(a):
    root = round(math.pow(abs(a), 1.0 / 3))
    return root ** 3 == abs(a)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,10,normal,"['HumanEval/77', '646', '447', '129', 'HumanEval/94', '59', '422', '72', '279', '234']","import math

def iscube(a):
    var_0 = abs(a)
    return math.isclose(int(round(var_0 ** (1.0 / 3))) ** 3, var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,1,normal,['135'],"def hex_key(num):
    primes = set('2357BD')
    return sum(1 for digit in num if digit in primes)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['135', 'HumanEval/78', 'HumanEval/94', '256', '107']","def hex_key(num):
    var_1 = ('2', '3', '5', '7', 'B', 'D')
    return sum(1 for var_3 in num if var_3 in var_1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,10,normal,"['135', 'HumanEval/78', 'HumanEval/94', '256', '107', '605', 'HumanEval/66', '745', 'HumanEval/82', '86']","def hex_key(num):
    prime_hex_digits = set('2357BD')
    return sum(1 for digit in num if digit in prime_hex_digits)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,1,normal,['HumanEval/79'],"def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['HumanEval/79', '99', '494', '33', '24']","def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['HumanEval/79', '99', '494', '33', '24', '467', '194', '208', '759', 'HumanEval/162']","def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['HumanEval/80'],"def is_happy(s):
    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s) - 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,5,normal,"['HumanEval/80', '523', '192', '53', 'HumanEval/134']","def is_happy(s):
    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s)-2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['HumanEval/80', '523', '192', '53', 'HumanEval/134', '352', '30', '338', '737', '91']","def is_happy(s):
    return len(s) >= 3 and all(s[i]!= s[i+1] and s[i]!= s[i+2] and s[i+1]!= s[i+2] for i in range(len(s)-2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def numerical_letter_grade(grades):
    boundaries = {
        4.0: 'A+', 3.7: 'A', 3.3: 'A-', 3.0: 'B+', 2.7: 'B', 
        2.3: 'B-', 2.0: 'C+', 1.7: 'C', 1.3: 'C-', 1.0: 'D+', 
        0.7: 'D', 0.0: 'D-'
    }
    return [next((grade for boundary, grade in sorted(boundaries.items(), reverse=True) if gpa >= boundary), 'E') for gpa in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,5,normal,"['HumanEval/81', 'HumanEval/19', '749', '397', 'HumanEval/134']","def numerical_letter_grade(grades):
    grade_map = {
        (4.0, 'A+'), (3.7, 'A'), (3.3, 'A-'), (3.0, 'B+'), (2.7, 'B'), 
        (2.3, 'B-'), (2.0, 'C+'), (1.7, 'C'), (1.3, 'C-'), (1.0, 'D+'), 
        (0.7, 'D'), (0.0, 'D-')
    }
    return [next((grade for gpa, grade in grade_map if gpa <= x), 'E') for x in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,10,normal,"['HumanEval/81', 'HumanEval/19', '749', '397', 'HumanEval/134', '184', 'HumanEval/160', 'HumanEval/25', '883', '817']","def numerical_letter_grade(grades):
    grade_map = {
        (4.0, 'A+'), (3.7, 'A'), (3.3, 'A-'), (3.0, 'B+'), (2.7, 'B'), 
        (2.3, 'B-'), (2.0, 'C+'), (1.7, 'C'), (1.3, 'C-'), (1.0, 'D+'), 
        (0.7, 'D'), (0.0, 'D-')
    }
    return [next((grade for threshold, grade in grade_map if gpa >= threshold), 'E') for gpa in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,1,normal,['HumanEval/82'],"import math

def prime_length(string):
    length = len(string)
    if length < 2:
        return False
    for i in range(2, int(math.sqrt(length)) + 1):
        if length % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['HumanEval/82', '605', '192', '813', 'HumanEval/31']","import math

def prime_length(string):
    length = len(string)
    if length < 2:
        return False
    for i in range(2, int(math.sqrt(length)) + 1):
        if length % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,10,normal,"['HumanEval/82', '605', '192', '813', 'HumanEval/31', '523', 'HumanEval/39', '79', '964', '352']","import math

def prime_length(string):
    var_0 = len(string)
    if var_0 < 2:
        return False
    for var_1 in range(2, int(math.sqrt(var_0)) + 1):
        if var_0 % var_1 == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,1,normal,['HumanEval/83'],"def starts_one_ends(n):
    if n == 1:
        return 1
    return 2 * 9 * 10 ** (n - 1) - 9 * 10 ** (n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,5,normal,"['HumanEval/83', '365', '543', '278', '479']","def starts_one_ends(n):
    if n == 1:
        return 1
    return 9 * 10 ** (n - 1) + 9 * 10 ** (n - 2) + 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,10,normal,"['HumanEval/83', '365', '543', '278', '479', 'HumanEval/104', '657', '745', '913', '345']","def starts_one_ends(n):
    if n == 1:
        return 1
    return 2 * 9 * 10 ** (n - 2) + 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,1,normal,['HumanEval/84'],"def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,5,normal,"['HumanEval/84', '148', '398', '566', 'HumanEval/66']","def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,10,normal,"['HumanEval/84', '148', '398', '566', 'HumanEval/66', '558', '845', 'HumanEval/60', '123', '870']","def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['881'],"def add(lst):
    return sum(num for idx, num in enumerate(lst) if idx % 2!= 0 and num % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,5,normal,"['881', '106', 'HumanEval/155', '729', 'HumanEval/122']","def add(lst):
    return sum(x for i, x in enumerate(lst) if i % 2!= 0 and x % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,10,normal,"['881', '106', 'HumanEval/155', '729', 'HumanEval/122', '363', '270', '784', 'HumanEval/53', 'HumanEval/113']","def add(lst):
    return sum(x for i, x in enumerate(lst) if i % 2!= 0 and x % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['HumanEval/86'],"def anti_shuffle(s):
    return''.join(''.join(sorted(i)) for i in s.split(' '))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['HumanEval/86', '877', '39', '364', '374']","def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split(' '))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['HumanEval/86', '877', '39', '364', '374', '604', '456', '226', '915', 'HumanEval/27']","def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split(' '))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['HumanEval/87'],"def get_row(lst, x):
    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(coordinates, key=lambda x: (x[0], -x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,5,normal,"['HumanEval/87', '104', '215', '569', '282']","def get_row(lst, x):
    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(coordinates, key=lambda x: (x[0], -x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,10,normal,"['HumanEval/87', '104', '215', '569', '282', '298', '652', '630', '859', '705']","def get_row(lst, x):
    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(sorted(coordinates, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,1,normal,['HumanEval/88'],"def sort_array(array):
    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0) if array else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['HumanEval/88', 'HumanEval/116', '12', 'HumanEval/149', '229']","def sort_array(array):
    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0) if array else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['HumanEval/88', 'HumanEval/116', '12', 'HumanEval/149', '229', 'HumanEval/37', '940', '635', '569', '104']","def sort_array(array):
    return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0) if array else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,1,normal,['HumanEval/89'],"def encrypt(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    result = ''
    shift = 2 * 2
    for char in s:
        if char.isalpha():
            index = alphabet.index(char.lower())
            new_index = (index + shift) % 26
            if char.isupper():
                result += alphabet[new_index].upper()
            else:
                result += alphabet[new_index]
        else:
            result += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/89', 'HumanEval/11', '364', 'HumanEval/162', '374']","def encrypt(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    shifted_alphabet = alphabet[4:] + alphabet[:4]
    table = str.maketrans(alphabet + alphabet.upper(), shifted_alphabet + shifted_alphabet.upper())
    return s.translate(table)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/89', 'HumanEval/11', '364', 'HumanEval/162', '374', 'HumanEval/93', 'HumanEval/78', '864', 'HumanEval/64', 'HumanEval/50']","def encrypt(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    return ''.join(alphabet[(alphabet.index(c) + 2 * 2) % 26] if c in alphabet else c for c in s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['62'],"def next_smallest(lst):
    if len(lst) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['62', '100', 'HumanEval/136', 'HumanEval/90', '755']","def next_smallest(lst):
    if len(set(lst)) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['62', '100', 'HumanEval/136', 'HumanEval/90', '755', '408', '901', '496', 'HumanEval/99', 'HumanEval/20']","def next_smallest(lst):
    if len(set(lst)) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"import re

def is_bored(S):
    sentences = re.split('[.?!]\\s*', S)
    return sum(1 for sentence in sentences if sentence and sentence[0].lower() == 'i')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '862', '897', 'HumanEval/143', 'HumanEval/101']","import re

def is_bored(S):
    sentences = re.split('[.?!]', S)
    return sum(sentence.strip().startswith('I ') for sentence in sentences if sentence.strip())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '862', '897', 'HumanEval/143', 'HumanEval/101', 'HumanEval/117', '79', '964', '537', 'HumanEval/36']","import re

def is_bored(S):
    sentences = re.split('[.?!]\\s*', S)
    return sum(sentence.strip().startswith('I ') for sentence in sentences if sentence.strip())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['138'],"def any_int(x, y, z):
    return (x + y == z or x + z == y or y + z == x) and all(isinstance(i, int) for i in (x, y, z))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['138', 'HumanEval/92', '121', '123', 'HumanEval/138']","def any_int(x, y, z):
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['138', 'HumanEval/92', '121', '123', 'HumanEval/138', '683', '515', 'HumanEval/40', '113', '481']","def any_int(x, y, z):
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/93'],"def encode(message):
    vowels = 'aeiouAEIOU'
    shifted_vowels = 'cCgGioOuUyY'
    shifted_vowels_dict = dict(zip(vowels, shifted_vowels))
    return ''.join(shifted_vowels_dict.get(char, char.swapcase()) for char in message)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,5,normal,"['HumanEval/93', 'HumanEval/50', 'HumanEval/38', 'HumanEval/51', '131']","def encode(message):
    vowels = 'aeiouAEIOU'
    shifted_vowels = 'cdeoCDEO'
    vowel_map = str.maketrans(vowels, shifted_vowels)
    return message.swapcase().translate(vowel_map)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,10,normal,"['HumanEval/93', 'HumanEval/50', 'HumanEval/38', 'HumanEval/51', '131', 'HumanEval/64', '317', 'HumanEval/89', '39', '474']","def encode(message):
    vowels = 'aeiouAEIOU'
    shifted_vowels = 'cCgGkKoOqQsSuU'
    table = str.maketrans(vowels, shifted_vowels)
    return message.swapcase().translate(table)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,1,normal,['HumanEval/94'],"import math

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max((x for x in lst if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,5,normal,"['HumanEval/94', '685', '558', '398', 'HumanEval/66']","def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max((x for x in lst if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,10,normal,"['HumanEval/94', '685', '558', '398', 'HumanEval/66', 'HumanEval/59', '805', '32', '148', '566']","import math

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max((x for x in lst if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_dict_case(dict):
    if not dict:
        return False
    key_types = set(type(key) for key in dict.keys())
    if len(key_types) > 1 or list(key_types)[0]!= str:
        return False
    case_types = set(key.islower() for key in dict.keys())
    return len(case_types) == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,5,normal,"['HumanEval/95', '523', '53', '464', '582']","def check_dict_case(dict):
    if not dict:
        return False
    key_types = set(type(key) for key in dict.keys())
    if len(key_types) > 1 or list(key_types)[0]!= str:
        return False
    case_types = set(key.isupper() or key.islower() for key in dict.keys())
    return len(case_types) == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,10,normal,"['HumanEval/95', '523', '53', '464', '582', '917', '277', '192', '349', '737']","def check_dict_case(dict):
    if not dict:
        return False
    all_lower = all(key.islower() for key in dict if isinstance(key, str))
    all_upper = all(key.isupper() for key in dict if isinstance(key, str))
    all_string = all(isinstance(key, str) for key in dict)
    return (all_lower or all_upper) and all_string",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,1,normal,['256'],"def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['256', '605', 'HumanEval/60', 'HumanEval/96', '685']","def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['256', '605', 'HumanEval/60', 'HumanEval/96', '685', '211', '253', 'HumanEval/82', '66', '623']","def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['726'],"def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['726', '98', '127', 'HumanEval/97', '445']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['726', '98', '127', 'HumanEval/97', '445', '919', '745', 'HumanEval/25', '577', '366']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['HumanEval/64'],"def count_upper(s):
    vowels = ""AEIOU""
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['HumanEval/64', '165', '684', 'HumanEval/98', '776']","def count_upper(s):
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['HumanEval/64', '165', '684', 'HumanEval/98', '776', '461', '806', '666', '459', '30']","def count_upper(s):
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in 'AEIOU')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"import math

def closest_integer(value):
    num = float(value)
    if num - math.floor(num) == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '89', 'HumanEval/20', '435', 'HumanEval/136']","import math

def closest_integer(value):
    num = float(value)
    if num - math.floor(num) == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '89', 'HumanEval/20', '435', 'HumanEval/136', '62', '692', '577', 'HumanEval/2', '558']","import math

def closest_integer(value):
    num = float(value)
    if num - math.floor(num) == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/100'],"def make_a_pile(n):
    return [n + 2 * i if n % 2 == 1 else n - 2 * i if i > 0 else n for i in range(n)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/100', '949', 'HumanEval/113', '921', '843']","def make_a_pile(n):
    result = [n]
    for _ in range(n - 1):
        if n % 2 == 0:
            n += 2
        else:
            n += 2
        result.append(n)
    return result[:-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/100', '949', 'HumanEval/113', '921', '843', '536', 'HumanEval/60', '447', 'HumanEval/163', '342']","def make_a_pile(n):
    result = [n]
    for _ in range(n - 1):
        if n % 2 == 0:
            n += 2
        else:
            n += 2
        result.append(n)
    return result[:-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/143'],"import re

def words_string(s):
    return re.split(r'[,\s]+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/143', 'HumanEval/125', 'HumanEval/101', '128', 'HumanEval/117']","import re

def words_string(s):
    return re.split(r'[,\s]+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/143', 'HumanEval/125', 'HumanEval/101', '128', 'HumanEval/117', '118', '254', '862', '18', '374']","import re

def words_string(s):
    return re.findall(r'\w+', s.replace(',',''))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['41'],"def choose_num(x, y):
    if x > y:
        return -1
    even_nums = [i for i in range(x, y+1) if i % 2 == 0]
    return max(even_nums) if even_nums else -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['41', 'HumanEval/102', '907', '57', '904']","def choose_num(x, y):
    if x > y:
        return -1
    return y - (y % 2) if y % 2!= 0 else y if y >= x else -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['41', 'HumanEval/102', '907', '57', '904', '122', '221', '184', 'HumanEval/99', 'HumanEval/136']","def choose_num(x, y):
    if x > y:
        return -1
    return y - (y % 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['717'],"import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = (n + m) / 2
    return bin(round(avg))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['717', 'HumanEval/103', '959', '830', '422']","import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = (n + m) / 2
    return bin(round(avg))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['717', 'HumanEval/103', '959', '830', '422', '615', '664', '375', 'HumanEval/4', '419']","import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = sum(range(n, m + 1)) / (m - n + 1)
    return bin(round(avg))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['HumanEval/104'],"def unique_digits(x):
    return sorted([i for i in x if all(int(c) % 2 == 1 for c in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,5,normal,"['HumanEval/104', '41', 'HumanEval/34', '745', '426']","def unique_digits(x):
    return sorted([num for num in x if all(int(digit) % 2!= 0 for digit in str(num))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,10,normal,"['HumanEval/104', '41', 'HumanEval/34', '745', '426', '845', '572', '749', '623', 'HumanEval/131']","def unique_digits(x):
    return sorted([var_2 for var_2 in x if all(int(c) % 2 == 1 for c in str(var_2))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,1,normal,['HumanEval/88'],"def by_length(arr):
    names = [""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""]
    return [names[i-1] for i in sorted([x for x in arr if 1 <= x <= 9])[::-1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,5,normal,"['HumanEval/88', 'HumanEval/116', 'HumanEval/105', 'HumanEval/19', 'HumanEval/104']","def by_length(arr):
    names = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    return [names[i] for i in sorted([x for x in arr if 1 <= x <= 9], reverse=True)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,10,normal,"['HumanEval/88', 'HumanEval/116', 'HumanEval/105', 'HumanEval/19', 'HumanEval/104', '749', '644', '229', '122', 'HumanEval/145']","def by_length(arr):
    var_1 = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    return [var_1[var_2] for var_2 in sorted([var_3 for var_3 in arr if 1 <= var_3 <= 9], reverse=True)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,1,normal,['HumanEval/25'],"import math

def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(math.factorial(i))
        else:
            result.append(i * (i + 1) // 2)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['HumanEval/25', '483', '577', '905', 'HumanEval/139']","import math

def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(math.factorial(i))
        else:
            result.append(i * (i + 1) // 2)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['HumanEval/25', '483', '577', '905', 'HumanEval/139', '873', 'HumanEval/60', '41', '445', '21']","import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['485'],"def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,5,normal,"['485', 'HumanEval/48', 'HumanEval/10', 'HumanEval/107', '387']","def even_odd_palindrome(n):
    def is_palindrome(var_0):
        return str(var_0) == str(var_0)[::-1]
    
    even_count = 0
    odd_count = 0
    for var_3 in range(1, n + 1):
        if is_palindrome(var_3):
            if var_3 % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,10,normal,"['485', 'HumanEval/48', 'HumanEval/10', 'HumanEval/107', '387', '909', '864', 'HumanEval/155', '100', '594']","def even_odd_palindrome(n):
    def is_palindrome(var_0):
        return str(var_0) == str(var_0)[::-1]
    even_count = 0
    odd_count = 0
    for var_3 in range(1, n + 1):
        if is_palindrome(var_3):
            if var_3 % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,1,normal,['365'],"def count_nums(arr):
    def sum_of_digits(n):
        return sum(int(digit) for digit in str(n).replace('-', ''))

    return sum(1 for num in arr if sum_of_digits(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,5,normal,"['365', '256', 'HumanEval/108', '398', '133']","def count_nums(arr):
    def sum_of_digits(n):
        return sum(int(digit) for digit in str(abs(n)))
    
    return sum(1 for num in arr if sum_of_digits(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,10,normal,"['365', '256', 'HumanEval/108', '398', '133', 'HumanEval/113', '543', '253', '566', '558']","def count_nums(arr):
    return sum(sum(int(digit) for digit in str(abs(num))) > 0 for num in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['HumanEval/88'],"def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,5,normal,"['HumanEval/88', 'HumanEval/116', '378', 'HumanEval/109', 'HumanEval/57']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,10,normal,"['HumanEval/88', 'HumanEval/116', '378', 'HumanEval/109', 'HumanEval/57', '370', 'HumanEval/70', '644', '229', '433']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['257'],"def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if odd_count <= even_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,5,normal,"['257', 'HumanEval/110', '625', '591', '648']","def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return 'YES' if even_count >= odd_count else 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,10,normal,"['257', 'HumanEval/110', '625', '591', '648', '298', 'HumanEval/5', '699', '595', '578']","def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return 'YES' if even_count >= odd_count else 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['HumanEval/111'],"from collections import Counter

def histogram(test):
    counter = Counter(test.split())
    max_count = max(counter.values(), default=0)
    return {letter: count for letter, count in counter.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,5,normal,"['HumanEval/111', '217', '326', '332', '602']","from collections import defaultdict

def histogram(test):
    var_1 = defaultdict(int)
    for var_2 in test.split():
        var_1[var_2] += 1
    if not var_1:
        return {}
    var_3 = max(var_1.values())
    return {key: value for key, value in var_1.items() if value == var_3}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['HumanEval/111', '217', '326', '332', '602', '107', '172', '130', '237', '829']","from collections import Counter

def histogram(test):
    test = test.split()
    if not test:
        return {}
    count = Counter(test)
    max_count = max(count.values())
    return {k: v for k, v in count.items() if v == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['864'],"def reverse_delete(s,c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,5,normal,"['864', '456', '909', '604', 'HumanEval/112']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,10,normal,"['864', '456', '909', '604', 'HumanEval/112', 'HumanEval/48', 'HumanEval/10', '131', '364', 'HumanEval/107']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['238'],"def odd_count(lst):
    return [f""the number of odd elements {sum(int(digit) % 2 for digit in string)}n the str{sum(int(digit) % 2 for digit in string)}ng {sum(int(digit) % 2 for digit in string)} of the {sum(int(digit) % 2 for digit in string)}nput."" for string in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,5,normal,"['238', 'HumanEval/113', 'HumanEval/155', '226', '258']","def odd_count(lst):
    return [f""the number of odd elements {sum(int(d) % 2 == 1 for d in s)}n the str{sum(int(d) % 2 == 1 for d in s)}ng {sum(int(d) % 2 == 1 for d in s)} of the {sum(int(d) % 2 == 1 for d in s)}nput."" for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,10,normal,"['238', 'HumanEval/113', 'HumanEval/155', '226', '258', '18', '109', '78', '426', '61']","def odd_count(lst):
    return [f""the number of odd elements {sum(int(d) % 2 == 1 for d in s)}n the str{sum(int(d) % 2 == 1 for d in s)}ng {sum(int(d) % 2 == 1 for d in s)} of the {sum(int(d) % 2 == 1 for d in s)}nput."" for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['511'],"def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,5,normal,"['511', 'HumanEval/114', '836', '656', '559']","import sys

def minSubArraySum(nums):
    min_sum = sys.maxsize
    current_sum = 0
    for num in nums:
        current_sum += num
        min_sum = min(min_sum, current_sum)
        if current_sum > 0:
            current_sum = 0
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,10,normal,"['511', 'HumanEval/114', '836', '656', '559', '340', '974', '734', '286', '514']","import sys

def minSubArraySum(nums):
    min_sum = sys.maxsize
    current_sum = 0
    for num in nums:
        current_sum += num
        min_sum = min(min_sum, current_sum)
        if current_sum > 0:
            current_sum = 0
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,1,normal,['314'],"def max_fill(grid, capacity):
    import math
    total_water = sum(sum(row) for row in grid)
    return math.ceil(total_water / capacity)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,5,normal,"['314', '318', '303', 'HumanEval/115', '911']","import math

def max_fill(grid, capacity):
    return sum([math.ceil(sum(row) / capacity) for row in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,10,normal,"['314', '318', '303', 'HumanEval/115', '911', '463', 'HumanEval/114', '423', '259', '836']","import math

def max_fill(grid, capacity):
    return sum([math.ceil(sum(row) / capacity) for row in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,1,normal,['HumanEval/116'],"def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x))[2:].count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,5,normal,"['HumanEval/116', 'HumanEval/88', '229', '940', '635']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x))[2:].count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,10,normal,"['HumanEval/116', 'HumanEval/88', '229', '940', '635', '333', '749', 'HumanEval/19', 'HumanEval/37', '705']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x))[2:].count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['862'],"import re

def select_words(s, n):
    vowels = 'aeiouAEIOU'
    words = re.findall('\\w+', s)
    return [word for word in words if sum(1 for char in word if char not in vowels) == n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,5,normal,"['862', 'HumanEval/143', 'HumanEval/117', 'HumanEval/125', 'HumanEval/101']","import re

def select_words(s, n):
    vowels = 'aeiou'
    return [word for word in re.findall('\\w+', s) if sum(1 for char in word.lower() if char not in vowels) == n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['862', 'HumanEval/143', 'HumanEval/117', 'HumanEval/125', 'HumanEval/101', '537', '128', '604', '254', 'HumanEval/15']","import re

def select_words(s, n):
    vowels = 'aeiou'
    return [word for word in re.findall('\\w+', s) if sum(1 for char in word.lower() if char not in vowels) == n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/64'],"def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,5,normal,"['HumanEval/64', 'HumanEval/118', 'HumanEval/51', '131', '776']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i + 1] not in vowels and word[i - 1] not in vowels:
            return word[i]
    return ''",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,10,normal,"['HumanEval/64', 'HumanEval/118', 'HumanEval/51', '131', '776', 'HumanEval/134', 'HumanEval/117', '643', '868', '83']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i + 1] not in vowels and word[i - 1] not in vowels:
            return word[i]
    return ''",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,1,normal,['HumanEval/119'],"def match_parens(lst):
    def check(s):
        count = 0
        for c in s:
            if c == '(':
                count += 1
            else:
                count -= 1
            if count < 0:
                return False
        return count == 0

    return 'Yes' if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,5,normal,"['HumanEval/119', '178', 'HumanEval/56', 'HumanEval/61', '186']","def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,10,normal,"['HumanEval/119', '178', 'HumanEval/56', 'HumanEval/61', '186', 'HumanEval/6', '53', '30', '338', '482']","def match_parens(lst):
    def check(s):
        count = 0
        for char in s:
            if char == '(':
                count += 1
            else:
                count -= 1
            if count < 0:
                return False
        return count == 0

    return 'Yes' if check(lst[0] + lst[1]) or check(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['57'],"import heapq

def maximum(arr, k):
    return sorted(heapq.nlargest(k, arr))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,5,normal,"['57', '836', 'HumanEval/158', '463', 'HumanEval/120']","import heapq

def maximum(arr, k):
    return sorted(heapq.nlargest(k, arr))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,10,normal,"['57', '836', 'HumanEval/158', '463', 'HumanEval/120', '559', 'HumanEval/136', '911', '259', '122']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['881'],"def solution(lst):
    return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['881', 'HumanEval/113', '797', '770', '549']","def solution(lst):
    return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['881', 'HumanEval/113', '797', '770', '549', '775', '790', '784', '782', '853']","def solution(lst):
    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['514'],"def add_elements(arr, k):
    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,5,normal,"['514', '363', '398', '123', 'HumanEval/122']","def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,10,normal,"['514', '363', '398', '123', 'HumanEval/122', 'HumanEval/85', '148', '566', '675', '559']","def add_elements(arr, k):
    return sum(i for i in arr[:k] if len(str(i)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,1,normal,['HumanEval/123'],"def get_odd_collatz(n):
    odd_nums = [n] if n % 2!= 0 else []
    while n!= 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        if n % 2!= 0:
            odd_nums.append(n)
    return sorted(odd_nums)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,5,normal,"['HumanEval/123', '556', '406', 'HumanEval/113', '775']","def get_odd_collatz(n):
    odd_numbers = [n] if n % 2!= 0 else []
    while n!= 1:
        n = n // 2 if n % 2 == 0 else n * 3 + 1
        if n % 2!= 0:
            odd_numbers.append(n)
    return sorted(odd_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,10,normal,"['HumanEval/123', '556', '406', 'HumanEval/113', '775', '426', '258', 'HumanEval/155', '784', '274']","def get_odd_collatz(n):
    odd_numbers = set()
    while n!= 1:
        if n % 2 == 1:
            odd_numbers.add(n)
        n = n // 2 if n % 2 == 0 else 3 * n + 1
    odd_numbers.add(1)
    return sorted(list(odd_numbers))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,1,normal,['910'],"from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['910', 'HumanEval/124', '336', '191', '866']","from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['910', 'HumanEval/124', '336', '191', '866', '455', '403', '762', '820', '906']","import re

def valid_date(date):
    if not re.match(r'^\d{2}-\d{2}-\d{4}$', date):
        return False
    month, day, year = map(int, date.split('-'))
    if month < 1 or month > 12:
        return False
    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):
        return False
    if month in [4, 6, 9, 11] and (day < 1 or day > 30):
        return False
    if month == 2 and (day < 1 or day > 29):
        return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['HumanEval/125'],"def split_words(txt):
    if'' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.replace(',','').split()
    else:
        return sum(1 for char in txt if char.islower() and ord(char) % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,5,normal,"['HumanEval/125', 'HumanEval/143', '128', 'HumanEval/101', 'HumanEval/117']","def split_words(txt):
    if'' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.replace(',','').split()
    else:
        return sum(1 for char in txt if char.islower() and ord(char) % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,10,normal,"['HumanEval/125', 'HumanEval/143', '128', 'HumanEval/101', 'HumanEval/117', '956', '79', '964', '748', '15']","def split_words(txt):
    if'' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.replace(',','').split()
    else:
        return sum(1 for char in txt if char.islower() and ord(char) % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['HumanEval/19'],"def is_sorted(lst):
    return lst == sorted(lst) and all(lst.count(i) < 3 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,5,normal,"['HumanEval/19', '472', 'HumanEval/57', 'HumanEval/126', '567']","def is_sorted(lst):
    return lst == sorted(lst) and all(lst.count(i) <= 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['HumanEval/19', '472', 'HumanEval/57', 'HumanEval/126', '567', '889', 'HumanEval/70', '104', '705', '569']","def is_sorted(lst):
    return lst == sorted(lst) and all(lst.count(i) < 3 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"import math

def intersection(interval1, interval2):
    def is_prime(n):
        if n <= 1:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        sqrt_n = math.isqrt(n)
        for i in range(3, sqrt_n + 1, 2):
            if n % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start + 1
    return 'YES' if length > 0 and is_prime(length) else 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', '473', 'HumanEval/82', '605', '249']","def intersection(interval1, interval2):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start + 1
    return ""YES"" if length > 0 and is_prime(length) else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', '473', 'HumanEval/82', '605', '249', 'HumanEval/31', '298', 'HumanEval/39', '256', '685']","import math

def intersection(interval1, interval2):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
            if n % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start + 1
    return 'YES' if length > 1 and is_prime(length) else 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['HumanEval/8'],"def prod_signs(arr):
    if not arr:
        return None
    sign_product = 1
    magnitude_sum = 0
    for num in arr:
        if num < 0:
            sign_product *= -1
        elif num > 0:
            sign_product *= 1
        magnitude_sum += abs(num)
    return magnitude_sum * sign_product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['HumanEval/8', 'HumanEval/128', '734', '922', '463']","def prod_signs(arr):
    if not arr:
        return None
    sign = 1 if sum(1 for x in arr if x < 0) % 2 == 0 else -1
    return sign * sum(abs(x) for x in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['HumanEval/8', 'HumanEval/128', '734', '922', '463', '415', '911', '188', '366', '123']","def prod_signs(arr):
    if not arr:
        return None
    sign = 1
    for num in arr:
        if num < 0:
            sign *= -1
        elif num == 0:
            return 0
    return sign * sum(abs(num) for num in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['974'],"from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    min_path = [float('inf')] * k
    queue = deque([(grid[i][j], [grid[i][j]]) for i in range(n) for j in range(n)])
    
    while queue:
        path_value, path = queue.popleft()
        if len(path) == k:
            if path < min_path:
                min_path = path
        elif len(path) < k:
            for dx, dy in directions:
                nx, ny = len(path) % n + dx, len(path) % n + dy
                if 0 <= nx < n and 0 <= ny < n:
                    queue.append((path_value, path + [grid[nx][ny]]))
                    
    return min_path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,5,normal,"['974', 'HumanEval/129', '753', '721', '94']","from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    queue = deque([(grid[i][j], i, j) for i in range(n) for j in range(n)])
    queue = deque(sorted(queue))
    result = []

    while queue and len(result) < k:
        val, x, y = queue.popleft()
        result.append(val)
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n:
                queue.append((grid[nx][ny], nx, ny))
                queue = deque(sorted(queue))

    return result[:k]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,10,normal,"['974', 'HumanEval/129', '753', '721', '94', '50', '408', '322', '95', 'HumanEval/136']","from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    queue = deque([(grid[0][0], 0, 0, [grid[0][0]])])
    visited = {(0, 0)}
    
    while queue:
        val, x, y, path = queue.popleft()
        if len(path) == k:
            return path
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:
                queue.append((grid[nx][ny], nx, ny, path + [grid[nx][ny]]))
                visited.add((nx, ny))
    return []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,1,normal,['873'],"def tri(n):
    sequence = [0, 1, 3]
    for i in range(3, n + 1):
        if i % 2 == 0:
            sequence.append(1 + i / 2)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])
    return sequence[:n + 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['873', 'HumanEval/130', '239', '926', '84']","def tri(n):
    sequence = [0]*(n+2)
    sequence[1] = 3
    for i in range(2, n+2):
        if i % 2 == 0:
            sequence[i] = 1 + i / 2
        else:
            sequence[i] = sequence[i-1] + sequence[i-2] + sequence[i+1] if i+1 <= n+1 else sequence[i-1] + sequence[i-2] + 1 + (i+1) / 2
    return [1] + sequence[2:n+2]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['873', 'HumanEval/130', '239', '926', '84', 'HumanEval/46', 'HumanEval/39', '623', 'HumanEval/55', '274']","def tri(n):
    sequence = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            sequence.append(i // 2 + 1)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])
    return sequence[:n + 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['479'],"def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
        if product == 0:
            break
    return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['479', '745', '845', '577', 'HumanEval/131']","def digits(n):
    product = 1
    has_odd_digit = False
    for digit in str(n):
        digit = int(digit)
        if digit % 2 == 1:
            product *= digit
            has_odd_digit = True
    return product if has_odd_digit else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['479', '745', '845', '577', 'HumanEval/131', '365', 'HumanEval/66', '657', '36', '398']","def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['HumanEval/132'],"def is_nested(s):
    stack = []
    for char in s:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if len(stack) > 1:
                return True
            stack.pop()
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['HumanEval/132', '823', '91', 'HumanEval/56', 'HumanEval/61']","def is_nested(s):
    stack = []
    for char in s:
        if char == '[':
            stack.append(char)
        else:
            if len(stack) > 1:
                return True
            stack.pop()
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['HumanEval/132', '823', '91', 'HumanEval/56', 'HumanEval/61', '175', '192', '771', '576', 'HumanEval/6']","def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        else:
            if len(stack) > 1:
                return True
            stack.pop()
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['267'],"import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['267', 'HumanEval/142', 'HumanEval/133', '683', '287']","import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,10,normal,"['267', 'HumanEval/142', 'HumanEval/133', '683', '287', '420', '837', '905', '514', '419']","import math

def sum_squares(lst):
    return sum(math.ceil(var_2) ** 2 for var_2 in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['192'],"def check_if_last_char_is_a_letter(txt):
    if not txt or txt[-1] =='':
        return False
    words = txt.split()
    return txt[-1].isalpha() and len(words) > 1 and words[-1] == txt[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,5,normal,"['192', '352', 'HumanEval/134', '523', '396']","def check_if_last_char_is_a_letter(txt):
    if not txt or txt[-1] =='':
        return False
    words = txt.split()
    return len(words[-1]) == 1 and words[-1].isalpha()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,10,normal,"['192', '352', 'HumanEval/134', '523', '396', '210', '860', '546', '182', '134']","def check_if_last_char_is_a_letter(txt):
    words = txt.split()
    if not words or not txt or txt[-1] =='':
        return False
    return len(words[-1]) == 1 and words[-1].isalpha()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,1,normal,['HumanEval/88'],"def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,5,normal,"['HumanEval/88', 'HumanEval/116', '433', '229', 'HumanEval/135']","def can_arrange(arr):
    result = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            result = i
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,10,normal,"['HumanEval/88', 'HumanEval/116', '433', '229', 'HumanEval/135', '472', 'HumanEval/158', '407', '381', '200']","def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,1,normal,['HumanEval/136'],"def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,5,normal,"['HumanEval/136', '62', '408', 'HumanEval/90', '755']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,10,normal,"['HumanEval/136', '62', '408', 'HumanEval/90', '755', '496', 'HumanEval/12', 'HumanEval/22', 'HumanEval/163', 'HumanEval/24']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,1,normal,['HumanEval/152'],"import locale

def compare_one(a, b):
    locale.setlocale(locale.LC_ALL, 'de_DE')  # set locale to handle comma as decimal point
    a = locale.atof(str(a))
    b = locale.atof(str(b))
    
    if a > b:
        if isinstance(a, int):
            return int(a)
        else:
            return str(a).replace('.', ',')
    elif a < b:
        if isinstance(b, int):
            return int(b)
        else:
            return str(b).replace('.', ',')
    else:
        return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,5,normal,"['HumanEval/152', 'HumanEval/102', '433', 'HumanEval/137', '177']","def compare_one(a, b):
    a = str(a).replace(',', '.')
    b = str(b).replace(',', '.')
    if float(a) == float(b):
        return None
    return a if float(a) > float(b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,10,normal,"['HumanEval/152', 'HumanEval/102', '433', 'HumanEval/137', '177', '970', '695', '292', '555', '924']","def compare_one(a, b):
    a = str(a).replace(',', '.')
    b = str(b).replace(',', '.')
    if float(a) == float(b):
        return None
    return a if float(a) > float(b) else b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,1,normal,['271'],"def is_equal_to_sum_even(n):
    for a in range(2, n // 2 + 1, 2):
        for b in range(a, n // 2 + 1, 2):
            for c in range(b, n // 2 + 1, 2):
                d = n - a - b - c
                if d >= c and d % 2 == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,5,normal,"['271', '274', 'HumanEval/138', '123', '600']","def is_equal_to_sum_even(n):
    if n < 8 or n % 2!= 0:
        return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,10,normal,"['271', '274', 'HumanEval/138', '123', '600', '904', '634', '881', '138', '962']","def is_equal_to_sum_even(n):
    if n < 8 or n % 2!= 0:
        return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,1,normal,['483'],"import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,5,normal,"['483', '32', '905', '577', 'HumanEval/139']","import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,10,normal,"['483', '32', '905', '577', 'HumanEval/139', '873', '745', '926', '583', 'HumanEval/39']","import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,1,normal,['631'],"import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '_' if len(m.group()) == 1 else '-', text)
    return text",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,5,normal,"['631', '892', '678', '693', 'HumanEval/140']","import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '_' if len(m.group()) == 1 else '-', text)
    return text.replace(' ', '_')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,10,normal,"['631', '892', '678', '693', 'HumanEval/140', '628', '800', '542', '451', '748']","import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '_' if len(m.group()) == 1 else '-', text)
    text = re.sub('-+', '-', text)
    return text",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    valid_extensions = ['txt', 'exe', 'dll']
    parts = file_name.split('.')
    if len(parts)!= 2 or parts[1] not in valid_extensions:
        return 'No'
    if not parts[0] or not parts[0][0].isalpha():
        return 'No'
    if sum(c.isdigit() for c in parts[0]) > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '823', '396', '737']","import re

def file_name_check(file_name):
    if len(re.findall('\d', file_name)) > 3:
        return 'No'
    if file_name.count('.')!= 1:
        return 'No'
    name, extension = file_name.split('.')
    if not name or not name[0].isalpha():
        return 'No'
    if extension not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '823', '396', '737', '175', '403', '822', '860', '192']","import re

def file_name_check(file_name):
    if len(re.findall('\d', file_name)) > 3:
        return 'No'
    if len(file_name.split('.'))!= 2:
        return 'No'
    name, extension = file_name.split('.')
    if not name or not name[0].isalpha():
        return 'No'
    if extension not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,1,normal,['267'],"def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,5,normal,"['267', 'HumanEval/142', '837', 'HumanEval/133', '287']","def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,10,normal,"['267', 'HumanEval/142', '837', 'HumanEval/133', '287', '420', '683', '905', '340', '170']","def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,1,normal,['HumanEval/143'],"import sympy

def words_in_sentence(sentence):
    return''.join(word for word in sentence.split() if sympy.isprime(len(word)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,5,normal,"['HumanEval/143', 'HumanEval/125', '128', 'HumanEval/101', 'HumanEval/117']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    return''.join(word for word in sentence.split() if is_prime(len(word)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,10,normal,"['HumanEval/143', 'HumanEval/125', '128', 'HumanEval/101', 'HumanEval/117', '964', '254', '79', '862', '570']","import math

def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    return''.join(word for word in sentence.split() if is_prime(len(word)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,1,normal,['HumanEval/25'],"from math import gcd

def simplify(x, n):
    x_num, x_den = map(int, x.split('/'))
    n_num, n_den = map(int, n.split('/'))
    result_den = x_den * n_den
    result_num = x_num * n_num
    common_divisor = gcd(result_num, result_den)
    return result_num // common_divisor == result_den // common_divisor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['HumanEval/25', '749', 'HumanEval/144', '900', '123']","from fractions import Fraction

def simplify(x, n):
    result = Fraction(x) * Fraction(n)
    return result.denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,10,normal,"['HumanEval/25', '749', 'HumanEval/144', '900', '123', '913', '621', '577', '623', '41']","from fractions import Fraction

def simplify(x, n):
    result = Fraction(x) * Fraction(n)
    return result.denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,1,normal,['HumanEval/145'],"def order_by_points(nums):
    def digits_sum(num):
        return sum(int(digit) for digit in str(abs(num)))
    return sorted(enumerate(nums), key=lambda x: (digits_sum(x[1]), x[0]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,5,normal,"['HumanEval/145', '749', 'HumanEval/19', '705', 'HumanEval/149']","def order_by_points(nums):
    return sorted(enumerate(nums), key=lambda x: (sum(int(digit) for digit in str(abs(x[1]))), x[0]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,10,normal,"['HumanEval/145', '749', 'HumanEval/19', '705', 'HumanEval/149', '104', 'HumanEval/116', '569', '516', '37']","def order_by_points(nums):
    return sorted(enumerate(nums), key=lambda x: (sum(int(digit) for digit in str(abs(x[1]))), x[0]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,1,normal,['41'],"def specialFilter(nums):
    return sum(1 for num in nums if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,5,normal,"['41', 'HumanEval/146', '817', '426', '883']","def specialFilter(nums):
    odd_digits = set('13579')
    return sum(1 for num in nums if num > 10 and str(abs(num))[0] in odd_digits and str(abs(num))[-1] in odd_digits)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,10,normal,"['41', 'HumanEval/146', '817', '426', '883', '433', '258', '184', '623', '692']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,1,normal,['HumanEval/147'],"import itertools

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    return sum(1 for i, j, k in itertools.combinations(range(n), 3) if (a[i] + a[j] + a[k]) % 3 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,5,normal,"['HumanEval/147', '916', '121', '611', '21']","def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,10,normal,"['HumanEval/147', '916', '121', '611', '21', '415', '120', '672', '747', '661']","def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,1,normal,['HumanEval/148'],"def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    idx1 = planets.index(planet1)
    idx2 = planets.index(planet2)
    return planets[min(idx1, idx2) + 1:max(idx1, idx2)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,5,normal,"['HumanEval/148', '873', 'HumanEval/63', '119', '492']","def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    idx1, idx2 = planets.index(planet1), planets.index(planet2)
    if idx1 < idx2:
        return planets[idx1 + 1:idx2]
    else:
        return planets[idx2 + 1:idx1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,10,normal,"['HumanEval/148', '873', 'HumanEval/63', '119', '492', '846', '292', '502', '579', '150']","def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    idx1, idx2 = planets.index(planet1), planets.index(planet2)
    if idx1 < idx2:
        return planets[idx1 + 1:idx2]
    else:
        return planets[idx2 + 1:idx1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,1,normal,['HumanEval/149'],"def sorted_list_sum(lst):
    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,5,normal,"['HumanEval/149', '37', '877', '749', '108']","def sorted_list_sum(lst):
    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,10,normal,"['HumanEval/149', '37', '877', '749', '108', '65', '705', '104', '889', '569']","def sorted_list_sum(lst):
    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,1,normal,['605'],"import math

def x_or_y(n, x, y):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    return x if is_prime(n) else y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['605', 'HumanEval/82', 'HumanEval/31', '260', 'HumanEval/150']","import math

def x_or_y(n, x, y):
    if n < 2:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,10,normal,"['605', 'HumanEval/82', 'HumanEval/31', '260', 'HumanEval/150', '256', 'HumanEval/39', 'HumanEval/75', 'HumanEval/127', 'HumanEval/11']","import math

def x_or_y(n, x, y):
    if n < 2:
        return y
    for i in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,1,normal,['555'],"def double_the_difference(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,5,normal,"['555', 'HumanEval/151', '320', '72', '594']","def double_the_difference(lst):
    return sum(i ** 2 for i in lst if isinstance(i, int) and i > 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,10,normal,"['555', 'HumanEval/151', '320', '72', '594', '344', 'HumanEval/133', '770', '549', '881']","def double_the_difference(lst):
    return sum([i ** 2 for i in lst if isinstance(i, int) and i > 0 and i % 2!= 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['433'],"def compare(game, guess):
    return [abs(a - b) for a, b in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['433', 'HumanEval/152', '53', '695', '636']","def compare(game, guess):
    return [abs(x - y) for x, y in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['433', 'HumanEval/152', '53', '695', '636', 'HumanEval/74', '840', 'HumanEval/137', '359', '285']","def compare(game, guess):
    return [abs(x - y) for x, y in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/153'],"def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return class_name + '.' + strongest_extension",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,5,normal,"['HumanEval/153', '393', 'HumanEval/12', '806', '220']","def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return class_name + '.' + strongest_extension",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,10,normal,"['HumanEval/153', '393', 'HumanEval/12', '806', '220', '832', '207', 'HumanEval/14', '937', '315']","def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return class_name + '.' + strongest_extension",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,1,normal,['823'],"def cycpattern_check(a, b):
    return b in a or any(b in a[i:] + a[:i] for i in range(len(a)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,5,normal,"['823', '643', 'HumanEval/154', '91', '186']","import re

def cycpattern_check(a, b):
    b_rotations = [b[i:] + b[:i] for i in range(len(b))]
    return any(re.search(rotation, a) for rotation in b_rotations)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,10,normal,"['823', '643', 'HumanEval/154', '91', '186', '178', '897', '871', '192', '454']","def cycpattern_check(a, b):
    return b in a or any(b in a[i:] + a[:i] for i in range(len(a)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,1,normal,['HumanEval/155'],"def even_odd_count(num):
    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)
    odd_count = len(str(abs(num))) - even_count
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['HumanEval/155', '258', 'HumanEval/113', '904', '387']","def even_odd_count(num):
    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)
    odd_count = len(str(abs(num))) - even_count
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['HumanEval/155', '258', 'HumanEval/113', '904', '387', '784', '78', '155', '383', '109']","def even_odd_count(num):
    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)
    odd_count = len(str(abs(num))) - even_count
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['958'],"def int_to_mini_roman(number):
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    roman_numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']
    result = ''
    for i in range(len(values)):
        while number >= values[i]:
            result += roman_numerals[i]
            number -= values[i]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['958', '961', '494', '116', 'HumanEval/156']","def int_to_mini_roman(number):
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    roman_numerals = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
    result = ''
    for i in range(len(values)):
        while number >= values[i]:
            result += roman_numerals[i]
            number -= values[i]
    return result.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['958', '961', '494', '116', 'HumanEval/156', '764', '785', '62', '479', '749']","def int_to_mini_roman(number):
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    roman_numerals = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
    result = ''
    for i in range(len(values)):
        while number >= values[i]:
            result += roman_numerals[i]
            number -= values[i]
    return result.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['826'],"import math

def right_angle_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,5,normal,"['826', 'HumanEval/157', '449', '176', '677']","def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return sides[0]**2 + sides[1]**2 == sides[2]**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,10,normal,"['826', 'HumanEval/157', '449', '176', '677', '850', '198', '236', 'HumanEval/71', '51']","def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return sides[0]**2 + sides[1]**2 == sides[2]**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,1,normal,['480'],"def find_max(words):
    return max(words, key=lambda word: (len(set(word)), word))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['480', '937', 'HumanEval/158', 'HumanEval/117', '128']","from collections import Counter

def find_max(words):
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['480', '937', 'HumanEval/158', 'HumanEval/117', '128', '862', '357', '315', '393', '562']","from collections import Counter

def find_max(words):
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['HumanEval/159'],"def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['HumanEval/159', '907', 'HumanEval/102', '31', '123']","def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['HumanEval/159', '907', 'HumanEval/102', '31', '123', '211', '167', '365', '169', 'HumanEval/115']","def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['218'],"import operator as op

def do_algebra(operators, operands):
    ops = {
        '+': op.add,
        '-': op.sub,
        '*': op.mul,
        '//': op.floordiv,
        '**': op.pow
    }
    result = operands[0]
    for i in range(len(operators)):
        result = ops[operators[i]](result, operands[i+1])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,5,normal,"['218', 'HumanEval/25', 'HumanEval/32', 'HumanEval/160', '445']","def do_algebra(operator, operand):
    expression = str(operand[0])
    for op, num in zip(operator, operand[1:]):
        expression += op + str(num)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,10,normal,"['218', 'HumanEval/25', 'HumanEval/32', 'HumanEval/160', '445', '261', '726', 'HumanEval/11', '919', '343']","def do_algebra(operator, operand):
    expression = str(operand[0])
    for op, num in zip(operator, operand[1:]):
        expression += op + str(num)
    return eval(expression)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,1,normal,['HumanEval/27'],"def solve(s):
    if any(c.isalpha() for c in s):
        return s.swapcase()
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,5,normal,"['HumanEval/27', '557', '364', 'HumanEval/161', 'HumanEval/84']","def solve(s):
    if any(c.isalpha() for c in s):
        return s.swapcase()
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,10,normal,"['HumanEval/27', '557', '364', 'HumanEval/161', 'HumanEval/84', '917', '456', 'HumanEval/64', '91', 'HumanEval/134']","def solve(s):
    if any(c.isalpha() for c in s):
        return s.swapcase()
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,5,normal,"['HumanEval/162', 'HumanEval/89', '132', '877', '330']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,10,normal,"['HumanEval/162', 'HumanEval/89', '132', '877', '330', '217', 'HumanEval/11', '226', '39', '374']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,1,normal,['HumanEval/163'],"def generate_integers(a, b):
    start = min(a, b)
    end = max(a, b)
    return [i for i in range(start, end + 1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,5,normal,"['HumanEval/163', '166', '41', '745', '621']","def generate_integers(a, b):
    return sorted([i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,10,normal,"['HumanEval/163', '166', '41', '745', '621', '692', '345', '558', '494', '503']","def generate_integers(a, b):
    return sorted([i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
