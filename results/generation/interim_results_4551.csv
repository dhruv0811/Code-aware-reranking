query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,0,normal,[],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(len(numbers) - 1):
        if numbers[i + 1] - numbers[i] <= threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(lst: List[float], threshold: float) -> bool:
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if abs(lst[i] - lst[j]) < threshold:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/52', '433', 'HumanEval/3', 'HumanEval/26']","from typing import List

def has_close_elements(lst: List[float], threshold: float) -> bool:
    lst.sort()
    for i in range(len(lst) - 1):
        if lst[i + 1] - lst[i] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/52', '433', 'HumanEval/3', 'HumanEval/26', 'HumanEval/21', 'HumanEval/25', 'HumanEval/7', '342', 'HumanEval/20']","from typing import List

def has_close_elements(lst: List[float], threshold: float) -> bool:
    for i in range(len(lst)):
        for j in range(i + 1, len(lst)):
            if abs(lst[i] - lst[j]) < threshold:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,0,normal,[],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    paren_string = paren_string.replace(' ', '')
    groups = []
    group = ''
    stack = []
    for char in paren_string:
        if char == '(':
            stack.append(char)
            group += char
        elif char == ')':
            if stack:
                stack.pop()
                group += char
                if not stack:
                    groups.append(group)
                    group = ''
            else:
                group += char
        else:
            group += char
    return groups",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/6'],"from typing import List

def separate_paren_groups(s: str) -> List[str]:
    result = []
    current_group = ''
    count = 0
    for char in s:
        if char == '(':
            count += 1
            current_group += char
        elif char == ')':
            count -= 1
            current_group += char
            if count == 0:
                result.append(current_group)
                current_group = ''
        else:
            current_group += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/6', '305', '157', 'HumanEval/17', 'HumanEval/19']","from typing import List

def separate_paren_group(s: str) -> List[str]]:
    result = []
    temp = ''
    count = 0
    for char in s:
        if char == '(':
            count += 1
            temp += char
        elif char == ')':
            count -= 1
            temp += char
            if count == 0:
                result.append(temp)
                temp = ''
        else:
            temp += char
    return result",0.0,entry point not found
1,HumanEval/1,10,normal,"['HumanEval/6', '305', '157', 'HumanEval/17', 'HumanEval/19', '374', '778', '73', 'HumanEval/1', 'HumanEval/29']","def parse_paren_group(s):
    stack = []
    max_group = 0
    for c in s:
        if c == '(':
            stack.append(c)
            max_group = max(max_group, len(stack))
        elif c == ')':
            stack.pop()
    return max_group",0.0,entry point not found
2,HumanEval/2,0,normal,[],"import math

def truncate_number(number: float) -> float:
    return number - math.floor(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/99'],"def truncate_number(var_0):
    from math import floor, ceil
    if var_0.count('.') == 1:
        while var_0[-1] == '0':
            var_0 = var_0[:-1]
    var_1 = float(var_0)
    if var_0[-2:] == '.5':
        if var_0[-1] == '5':
            var_2 = ceil(var_0)
        else:
            var_2 = floor(var_0)
    elif len(var_0) > 0:
        var_2 = int(round(var_0))
    else:
        var_2 = 0
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/99', '99', '739', '566', '518']","import math

def truncate_number(var_0):
    var_1 = float(var_0)
    if var_0.count('.') == 1:
        while var_0[-1] == '0':
            var_0 = var_0[:-1]
    if var_0[-2:] == '.5':
        if var_1 > 0:
            var_2 = math.ceil(var_1)
        else:
            var_2 = math.floor(var_1)
    elif len(var_0) > 0:
        var_2 = round(var_1)
    else:
        var_2 = 0
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,0,normal,[],"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"def below_zero(operations: List[int]) -> bool:
    total = 0
    for operation in operations:
        total += operation
        if total < 0:
            return True
    return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', '481', 'HumanEval/0', 'HumanEval/94', 'HumanEval/39']","def below_zero(operations):
    max_sum = 0
    for operation in operations:
        _sum += operation
        if _sum < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', '481', 'HumanEval/0', 'HumanEval/94', 'HumanEval/39', '598', '121', 'HumanEval/75', 'HumanEval/134', 'HumanEval/59']","def below_zero(operations):
    max_so_far = 0
    for operation in operations:
        if operation < 0:
            return True
        else:
            below_zero = False
            for i in range(1, operation + 1):
                if i < 0:
                    below_zero = True
                    break
            if below_zero:
                return True
            else:
                    below_zero = False
                    for i in range(1, operation + 1):
                        if i < 0:
                            below_zero = True
                            break
                    if below_zero:
                        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,0,normal,[],"import numpy as np
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = np.mean(numbers)
    return np.mean(np.abs(np.array(numbers) - mean))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['HumanEval/4'],"from typing import List
import numpy as np

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = np.mean(numbers)
    return np.mean(np.abs(np.array(numbers) - mean))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['HumanEval/4', '717', 'HumanEval/21', 'HumanEval/0', 'HumanEval/25']","from typing import List
import statistics

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = statistics.mean(numbers)
    return statistics.median([abs(a - mean) for a in numbers])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['HumanEval/4', '717', 'HumanEval/21', 'HumanEval/0', 'HumanEval/25', 'HumanEval/32', 'HumanEval/152', 'HumanEval/97', '63', '875']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,0,normal,[],"from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for i, num in enumerate(numbers):
        result.append(num)
        if i < len(numbers) - 1:
            result.append(delimeter)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List

def interspersed(lst: List[int], num: int) -> List[int]:
    return [x for i, x in enumerate(lst) if i % 2 == 0] + [num] * ((len(lst) - 1) // 2) + [lst[-1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,5,normal,"['HumanEval/5', 'HumanEval/8', 'HumanEval/25', 'HumanEval/32', 'HumanEval/14']","from typing import List

def intersperse(lst: List[int], val: int) -> List[int]:
    return [x for i, x in enumerate(lst)[:-1]] + [val] + [lst[-1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', 'HumanEval/8', 'HumanEval/25', 'HumanEval/32', 'HumanEval/14', 'HumanEval/17', 'HumanEval/1', 'HumanEval/29', 'HumanEval/7', 'HumanEval/6']","from typing import List

def intersperse(lst: List[int], sep: int) -> List[int]:
    result = []
    for i, elem in enumerate(lst):
        result.append(elem)
        if i < len(lst) - 1:
            result.append(sep)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,0,normal,[],"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def max_depth(s: str) -> int:
        stack = 0
        max_stack = 0
        for c in s:
            if c == '(':
                stack += 1
                max_stack = max(max_stack, stack)
            elif c == ')':
                stack -= 1
        return max_stack

    return [max_depth(group) for group in paren_string.split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_paren_group(s: str) -> int:
    """"""
    This function calculates the deepest level of nesting in a string of parentheses.
    
    Args:
    s (str): A string of parentheses.
    
    Returns:
    int: The deepest level of nesting.
    """"""
    stack = 0
    max_depth = 0
    for char in s:
        if char == '(':
            stack += 1
            max_depth = max(max_depth, stack)
        elif char == ')':
            stack -= 1
    return max_depth",0.0,entry point not found
6,HumanEval/6,5,normal,"['HumanEval/6', '305', 'HumanEval/17', 'HumanEval/19', '374']","def parse_music(s):
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(max_depth, depth)
            else:
                depth -= 1
        return max_depth

    return [parse_paren_group(x) for x in s.split(' ') if x]",0.0,entry point not found
6,HumanEval/6,10,normal,"['HumanEval/6', '305', 'HumanEval/17', 'HumanEval/19', '374', 'HumanEval/1', 'HumanEval/105', 'HumanEval/29', 'HumanEval/7', 'HumanEval/21']","from typing import List

def parse_parens(s: str) -> List[int]:
    max_depth = 0
    current_depth = 0
    for char in s:
        if char == '(':
            current_depth += 1
            max_depth = max(max_depth, current_depth)
        elif char == ')':
            current_depth -= 1
    return [max_depth]",0.0,entry point not found
7,HumanEval/7,0,normal,[],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List

def filter_by(strs: List[str], char: str) -> List[str]:
    return [s for s in strs if char in s]",0.0,entry point not found
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/1', '823', 'HumanEval/17']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/1', '823', 'HumanEval/17', 'HumanEval/6', '27', 'HumanEval/22', 'HumanEval/5', 'HumanEval/0']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,0,normal,[],"from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_result = 0
    product_result = 1
    for num in numbers:
        sum_result += num
        product_result *= num
    return sum_result, product_result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple

def sum_product(nums: List[int]) -> Tuple[int, int]:
    sum_val = 0
    product_val = 1
    for num in nums:
        sum_val += num
        product_val *= num
    return sum_val, product_val",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', 'HumanEval/60', '796', 'HumanEval/32', 'HumanEval/4']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    total_sum = 0
    total_product = 1
    for num in numbers:
        total_sum += num
        total_product *= num
    return total_sum, total_product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', 'HumanEval/60', '796', 'HumanEval/32', 'HumanEval/4', '514', 'HumanEval/67', '870', '398', '133']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    total_sum = 0
    total_product = 1
    for num in numbers:
        total_sum += num
        total_product *= num
    return total_sum, total_product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,0,normal,[],"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    max_so_far = float('-inf')
    result = []
    
    for num in numbers:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List

def running_max(nums: List[int]) -> List[int]:
    max_so_far = float('-inf')
    result = []
    for num in nums:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    return result",0.0,entry point not found
9,HumanEval/9,5,normal,"['HumanEval/9', 'HumanEval/21', 'HumanEval/12', 'HumanEval/6', 'HumanEval/25']","from typing import List

def rolling_max(nums: List[int]) -> List[int]:
    max_so_far = float('-inf')
    result = []
    for num in nums:
        max_so_far = max(max_so_far, nums[i])
        result.append(max_so_far)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', 'HumanEval/21', 'HumanEval/12', 'HumanEval/6', 'HumanEval/25', '299', '805', 'HumanEval/26', '90', '951']","from typing import List

def rolling_max(var_0: List[int]) -> List[int]:
    var_1 = []
    max_so_far = float('-inf')
    for var_2 in var_0:
        max_so_far = max(max_so_far, var_2)
        var_1.append(max_so_far)
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,0,normal,[],"def make_palindrome(string: str) -> str:
    if not string:
        return ''

    def is_palindrome(s: str) -> bool:
        return s == s[::-1]

    for i in range(len(string), 0, -1):
        if is_palindrome(string[:i]):
            return string + string[:i][::-1]

    return string + string[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def longest_palindrome(s):
    def is_palindrome(s):
        return s == s[::-1]

    for i in range(len(s), 0, -1):
        for j in range(len(s) - i + 1):
            if is_palindrome(s[j:j+i]):
                return s[j:j+i]
    return ''",0.0,entry point not found
10,HumanEval/10,5,normal,"['HumanEval/10', '485', 'HumanEval/107', '823', '53']","def longest_palindrome(s):
    def expand_around_center(s, left, right):
        while left >= 0 and right < len(s) and s[left] == s[right]:
            left -= 1
            right += 1
        return s[left + 1:right]

    longest = """"
    for i in range(len(s)):
        palindrome1 = expand_around_center(s, i, i)
        palindrome2 = expand_around_center(s, i, i + 1)
        if len(palindrome1) > len(longest):
            longest = palindrome1
        if len(palindrome2) > len(longest):
            longest = palindrome2
    return longest",0.0,entry point not found
10,HumanEval/10,10,normal,"['HumanEval/10', '485', 'HumanEval/107', '823', '53', '352', '374', '364', 'HumanEval/64', '523']","def is_palindrome(s):
    return s == s[::-1]

def longest_palindrome(s):
    if not s:
        return ''
    longest = s[0]
    for i in range(1, len(s)):
        for j in range(i, len(s)):
            substr = s[i:j+1]
            if is_palindrome(substr) and len(substr) > len(longest):
                longest = substr
    return longest

def make_flip(s):
    return '1' if s == '0' else '0'

def get_flip_with_starting_charcter(s, c):
    flip = ''
    for char in s:
        flip += make_flip(char)
    return flip

def min_flips(s):
    return min(get_flip_with_starting_charcter(s, '0'), get_flip_with_starting_charcter(s, '1'))

def func_0(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels

def func_1(s):
    return '1' if s == '0' else '0'

def func_2(s):
    return min(func_1(s), func_1(s))

def func_3(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels

def func_4(s):
    return '1' if s == '0' else '0'

def func_5(s):
    return min(func_4(s), func_3(s))

def func_6(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels

def func_5(s):
    return '1' if s == '0' else '0'

def func_6(s):
    return min(func_5(s), func_4(s))

def func_7(s):
    vowels = ""aeiouAEIOU",0.0,entry point not found
11,HumanEval/11,0,normal,[],"def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"from typing import List

def string_xor(s1: str, s2: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(s1, s2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', 'HumanEval/17', '53', 'HumanEval/7', 'HumanEval/29']","def string_xor(var_0: str, var_1: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(var_0, var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', 'HumanEval/17', '53', 'HumanEval/7', 'HumanEval/29', '192', '364', 'HumanEval/28', 'HumanEval/22', '523']","from typing import List

def string_xor(var_0: str, var_1: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(var_0, var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,0,normal,[],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest_string(lst: List[str]) -> Optional[str]:
    if not lst:
        return None
    max_len = max(len(x) for x in lst)
    for s in lst:
        if len(s) == max_len:
            return s",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', 'HumanEval/6', 'HumanEval/9', 'HumanEval/1', 'HumanEval/19']","from typing import List

def longest_string(var_0: List[str]) -> str:
    if not var_0:
        return None
    return max(var_0, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', 'HumanEval/6', 'HumanEval/9', 'HumanEval/1', 'HumanEval/19', 'HumanEval/28', 'HumanEval/17', 'HumanEval/7', 'HumanEval/29', 'HumanEval/11']","from typing import List, Optional

def longest_string(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_length = max((len(x) for x in strings))
    for s in strings:
        if len(s) == max_length:
            return s",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,0,normal,[],"import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['151'],"import math

def greatest_common_divisor(a, b):
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['151', '45', '218', '687', '28']","import math

def greatest_common_divisor(a, b):
    while b!= 0:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['151', '45', '218', '687', '28', '621', '55', '260', '187', '488']","import math

def greatest_common_divisor(a, b):
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,0,normal,[],"from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i] for i in range(1, len(string) + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/29'],"from typing import List

def all_prefixes(var_0: List[str], var_1: str) -> List[str]:
    return [x for x in var_0 if x.startswith(var_1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/29', 'HumanEval/1', 'HumanEval/28', 'HumanEval/17', 'HumanEval/19']","def prefixes(s):
    return [var_0[:i+1] for i, var_0 in enumerate(var_0)]",0.0,entry point not found
14,HumanEval/14,10,normal,"['HumanEval/29', 'HumanEval/1', 'HumanEval/28', 'HumanEval/17', 'HumanEval/19', 'HumanEval/7', 'HumanEval/6', '374', 'HumanEval/14', 'HumanEval/5']","def find_prefixes(s):
    prefixes = []
    for i in range(1, len(s) + 1):
        prefixes.append(s[:i])
    return prefixes",0.0,entry point not found
15,HumanEval/15,0,normal,[],"def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['552'],"def sequence_type(var_0):
    """""" Return the sequence type: Linear or Non Linear""""""
    var_1 = [var_0[x] - var_0[x - 1] for x in range(1, len(var_0))]
    if len(set(var_1)) == 1:
        return 'Linear Sequence'
    else:
        return 'Non Linear Sequence'",0.0,entry point not found
15,HumanEval/15,5,normal,"['552', '84', '374', 'HumanEval/19', '877']","def sequence(n):
    return''.join(map(str, range(1, n + 1)))",0.0,entry point not found
15,HumanEval/15,10,normal,"['552', '84', '374', 'HumanEval/19', '877', '73', 'HumanEval/105', '18', '330', '523']","def sequence(n):
    if n == 1 or n == 2:
        return 1
    else:
        return sequence(n - 1) + sequence(n - sequence(n - 1))

def is_linear_sequence(var_0):
    if len(var_0) == 0:
        return True
    var_1 = var_0[1] - var_0[0]
    for i in range(2, len(var_0)):
        if var_0[i] - var_0[i - 1]!= var_1:
            return False
    return True

def permute(str):
    if len(str) == 1:
        return str
    var_1 = []
    for i in range(len(str)):
        var_2 = str[:i] + str[i + 1:]
        for p in permute(var_2):
            var_1.append(str[i] + p)
    return var_1

def get_char_count_array(str):
    count = [0] * 256
    for char in str:
        count[ord(char)] += 1
    return count

def remove_char(str, ch):
    return str.replace(ch, '')

def string_to_list(str):
    return list(str)

def list_to_string(lst):
    return ''.join(lst)

def find_distinct(str):
    var_1 = []
    for i in range(len(str)):
        var_2 = str[:i] + str[i + 1:]
        for p in permute(var_2):
            var_3 = var_2[:i] + str[0] + var_2[i:]
            if var_3 not in var_1:
                var_1.append(var_3)
    return var_1

def sort_string(str):
    var_1 = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join([x for x in str.split(' ') if var_1[x]])

def split_string(str):
    return re.split('; |, |\\n', str)

def find_upper_lower_number(str):
    var_1 = {'zero': 0, 'one': 1, 'two': 2, 'three':",0.0,entry point not found
16,HumanEval/16,0,normal,[],"def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['684'],"from collections import Counter

def count_distinct_characters(s):
    return sum(1 for c in Counter(s).values() if c == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['684', '523', '374', '565', '238']","from collections import Counter

def count_distinct_characters(str):
    return len(Counter(str))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['684', '523', '374', '565', '238', 'HumanEval/66', 'HumanEval/113', '764', '18', '461']","def count_distinct_characters(str):
    return len(set(str))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,0,normal,[],"import re

def parse_music(music_string: str) -> list[int]:
    notes = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    beats = [notes[note] for note in re.findall(r'o|o\||\.\|', music_string)]
    return beats",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"from typing import List

def music_string(music_string: str) -> List[int]:
    music_dict = {'o': 4, 'o|': 2, '.|': 1}
    return [music_dict.get(x, 0) for x in music_string.split()]",0.0,entry point not found
17,HumanEval/17,5,normal,"['HumanEval/17', 'HumanEval/6', 'HumanEval/26', 'HumanEval/25', '374']","def music_string(music_string):
    mapping = {'o': 4, 'o|': 2, '.|': 1}
    return [mapping[x] for x in music_string.split() if x]",0.0,entry point not found
17,HumanEval/17,10,normal,"['HumanEval/17', 'HumanEval/6', 'HumanEval/26', 'HumanEval/25', '374', 'HumanEval/1', '238', 'HumanEval/32', '673', 'HumanEval/64']","from typing import List

def music_string(music_string: str) -> List[int]:
    var_1 = {'o': 4, 'o|': 2, '.|': 1}
    return [var_1[x] for x in music_string.split(' ') if x in var_1]",0.0,entry point not found
18,HumanEval/18,0,normal,[],"import re

def how_many_times(string: str, substring: str) -> int:
    return len(re.findall(substring, string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['684'],"def func_0(str, var_0):
    return str.count(var_0)",0.0,entry point not found
18,HumanEval/18,5,normal,"['684', '823', '523', '374', '238']","def func_0(string, var_0):
        count = 0
        for var_1 in range(len(string)):
            if string[var_1] == var_0:
                count += 1
        var_2 = 10
        var_3 = var_2 // len(string)
        count = count * var_3
        var_4 = var_2 % len(string)
        for var_1 in range(var_4):
            if string[var_1] == var_0:
                count += 1
        return count",0.0,entry point not found
18,HumanEval/18,10,normal,"['684', '823', '523', '374', '238', '352', '764', '461', '818', 'HumanEval/64']","def func_0(s):
    count = 0
    # Initialize a counter variable
    for char in s:  # Loop through each character in the string
        if char == 'a':  # Check if the character is 'a'.
            count += 1  # If the character is 'a', increment the counter
    var_2 = 10  # Initialize a variable
    var_3 = var_2 // len(s)  # Calculate the quotient
    count = count * var_3  # Multiply the counter by the quotient
    var_4 = var_2 % len(s)  # Calculate the remainder
    for var_1 in range(var_4):  # Loop through the remainder
        if s[var_1] == 'a':  # Check if the character is 'a'
            count += 1  # If the character is 'a', increment the counter
    return count  # Return the final count",0.0,entry point not found
19,HumanEval/19,0,normal,[],"from collections import OrderedDict

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    numbers = numbers.split()
    sorted_numbers = sorted(numbers, key=lambda x: num_dict[x])
    return''.join(sorted_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted([num_dict[x] for x in numbers.split(' ') if x in num_dict]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', 'HumanEval/105', '472', 'HumanEval/34', 'HumanEval/20']","from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted([num_dict[x] for x in numbers.split(' ')], key=lambda x: x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', 'HumanEval/105', '472', 'HumanEval/34', 'HumanEval/20', '896', 'HumanEval/6', 'HumanEval/104', '37', 'HumanEval/21']","from typing import List

def sort_numbers(numbers: str) -> List[str]:
    return sorted(numbers.split(), key=lambda x: int(x)))",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 4)"", 'completion_id': 0})]})"
20,HumanEval/20,0,normal,[],"import heapq
from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    closest_pair = (numbers[0], numbers[0])
    
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def closest_elements(arr: List[float], k: int) -> List[float]:
    arr.sort()
    return sorted(arr[:k])",0.0,entry point not found
20,HumanEval/20,5,normal,"['HumanEval/20', 'HumanEval/21', 'HumanEval/7', 'HumanEval/25', 'HumanEval/29']","def closest_pair(nums):
    if len(nums) < 2:
        return None
    nums.sort()
    closest = [nums[0], nums[1]]
    min_diff = abs(nums[1] - nums[0])
    for i in range(1, len(nums) - 1):
        diff = abs(nums[i + 1] - nums[i])
        if diff < min_diff:
            min_diff = diff
            closest = [nums[i], nums[i + 1]]
    return tuple(sorted(closest))",0.0,entry point not found
20,HumanEval/20,10,normal,"['HumanEval/20', 'HumanEval/21', 'HumanEval/7', 'HumanEval/25', 'HumanEval/29', 'HumanEval/5', 'HumanEval/9', 'HumanEval/0', 'HumanEval/17', 'HumanEval/26']","from typing import List, Tuple

def closest_pair(nums: List[float]) -> Tuple[float, float]:
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            diff = abs(nums[i] - nums[j])
            if diff < min_diff:
                min_diff = diff
                closest_pair = (nums[i], nums[j])
    return closest_pair",0.0,entry point not found
21,HumanEval/21,0,normal,[],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    if len(numbers) < 2:
        raise ValueError(""List must contain at least two elements"")
    
    min_val = min(numbers)
    max_val = max(numbers)
    
    if min_val == max_val:
        return [0.0] * len(numbers)
    
    return [(x - min_val) / (max_val - min_val) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from scipy.stats import rankdata

def rescale_data(data):
    return [(x - min(data)) / (max(data) - min(data)) for x in data]",0.0,entry point not found
21,HumanEval/21,5,normal,"['HumanEval/21', '629', '27', 'HumanEval/6', 'HumanEval/25']","from typing import List

def rescale_list(var_0: List[float]) -> List[float]:
    var_1 = min(var_0)
    var_2 = max(var_0)
    return [(x - var_1) / (var_2 - var_1) for x in var_0]",0.0,entry point not found
21,HumanEval/21,10,normal,"['HumanEval/21', '629', '27', 'HumanEval/6', 'HumanEval/25', 'HumanEval/4', 'HumanEval/9', '554', '390', '500']","from typing import List

def rescale_list(input_list: List[float]) -> List[float]:
    min_val = min(input_list)
    max_val = max(input_list)
    return [(x - min_val) / (max_val - min_val) for x in input_list]",0.0,entry point not found
22,HumanEval/22,0,normal,[],"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"from typing import List, Any

def func_0(var_0: List[Any]) -> List[int]:
    return [x for x in var_0 if isinstance(x, int)]",0.0,entry point not found
22,HumanEval/22,5,normal,"['HumanEval/22', 'HumanEval/26', 'HumanEval/1', 'HumanEval/25', 'HumanEval/0']","from typing import List

def func_0(var_0: List[int]) -> List[int]:
    return [x for x in var_0 if isinstance(x, int)]",0.0,entry point not found
22,HumanEval/22,10,normal,"['HumanEval/22', 'HumanEval/26', 'HumanEval/1', 'HumanEval/25', 'HumanEval/0', 'HumanEval/17', 'HumanEval/5', 'HumanEval/3', 'HumanEval/7', 'HumanEval/6']","from typing import List

def func_0(var_0: List[int]) -> List[int]:
    import collections
    var_1 = collections.Counter(var_0)
    return [n for n in var_0 if var_1[n] <= 1]",0.0,entry point not found
23,HumanEval/23,0,normal,[],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['764'],"def func_0(str):
    var_0 = 0
    for var_1 in str:
        if var_1.isdigit():
            var_0 += 1
    return var_0",0.0,entry point not found
23,HumanEval/23,5,normal,"['764', '238', '818', '461', '877']","def func_0(str):
    return sum(1 for char in str if char.isdigit())",0.0,entry point not found
23,HumanEval/23,10,normal,"['764', '238', '818', '461', '877', '523', '374', 'HumanEval/23', '226', '792']","def func_0(str):
    return sum(1 for c in str if c.isdigit())

def func_0(str):
    return int(len(str) * (len(str) + 1) / 2)

def func_0(str):
    return sum(1 for c in str if c.islower())

def func_0(str):
    return sum(1 for c in str if c.isupper())

def func_0(str):
    return ''.join(sorted(str))

def func_0(var_0):
    errors = []
    if not any(c.isupper() for c in var_0):
        errors.append('String must have 1 upper case character.')
    if not any(c.islower() for c in var_0):
        errors.append('String must have 1 lower case character.')
    if not any(c.isdigit() for c in var_0):
        errors.append('String must have 1 number.')
    if len(var_0) < 7:
        errors.append('String length should be at least 7.')
    if not errors:
        errors.append('Valid string.')
    return errors

def func_0(str):
    if len(str) == 0:
        return ['']
    var_0 = permute_string(str[1:len(str)])
    var_1 = []
    for var_2 in range(0, len(var_0)):
        for var_3 in range(0, len(str)):
            var_4 = var_0[var_2][0:var_3] + str[0] + var_0[var_2][var_3:len(str) - 1]
            if var_4 not in var_1:
                var_1.append(var_4)
    return var_1

def func_0(var_0: str) -> int:
    return len(var_0)

def func_0(str):
    var_0 = ''
    for var_1 in range(len(str)):
        if var_1 % 2 == 0:
            var_0 = var_0 + str[var_1]
    return var_0

def func_0(var_0):
    return len(var_0)",0.0,entry point not found
24,HumanEval/24,0,normal,[],"def largest_divisor(n: int) -> int:
    for i in range(n - 1, 1, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['218'],"import math

def largest_divisor(a, b):
    if a < b:
        a, b = b, a
    while b!= 0:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['218', '687', '45', '832', '911']","import math

def largest_divisor(a, b):
    if a > b:
        a, b = b, a
    return b // math.gcd(a, b) - 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['218', '687', '45', '832', '911', '366', '357', '488', '406', '443']","import math

def find_gcd(a, b):
    while b!= 0:
        a, b = b, a % b
    return a

def find_largest_divisor(a, b):
    if a > b:
        a, b = b, a
    b = find_gcd(a, b)
    return b

def find_max(a):
    return max(a)

def find_max_product(a):
    a = sorted(a)
    return max(a[0] * a[1] * a[2], a[0] * a[1] * a[-1])

def find_max_product2(a):
    return max(a[i] * a[i+1] for i in range(len(a)-1))

def find_max_digit(a):
    return max(int(digit) for char in a for digit in char)

def find_max_area(a):
    return max((a[i] + a[i+1]) * (a[i] * a[i+1]) for i in range(len(a)-1))

def find_max_area(a):
    return max(int(j) for i in a for j in i)

def find_max_area2(a):
    return max((a[i] + a[i+1]) * (a[i] * a[i+1]) for i in range(len(a)-1))

def find_max_area3(a):
    return max((a[i] + a[i+1]) * (a[i] * a[i+1]) for i in range(len(a)-1))

def find_parity(a):
    a = a[0]
    for i in range(1, len(a)):
        a = a ^ a >> i
    if a & 1:
        return 'Odd'
    return 'Even'

def find_max(a):
    max = a[0]
    for i in a:
        if i < max:
            max = i
    return max",0.0,entry point not found
25,HumanEval/25,0,normal,[],"from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while n > 1:
        if n % i == 0:
            n = n // i
            factors.append(i)
        else:
            i += 1
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/5'],"from typing import List

def func_0(var_0: List[int], var_1: int) -> List[int]:
    if not var_0:
        return []
    var_2 = []
    for var_3 in var_0[:-1]:
        var_2.append(var_3)
        var_2.append(var_1)
    var_2.append(var_0[-1])
    return var_2",0.0,entry point not found
25,HumanEval/25,5,normal,"['HumanEval/5', 'HumanEval/6', 'HumanEval/17', 'HumanEval/32', 'HumanEval/26']","def func_0(var_0: List[int]) -> List[int]:
    var_1 = var_0[0]
    for var_2 in var_0[1:]:
        if var_2 > var_1:
            var_1 = var_2
    return [var_1]",0.0,entry point not found
25,HumanEval/25,10,normal,"['HumanEval/5', 'HumanEval/6', 'HumanEval/17', 'HumanEval/32', 'HumanEval/26', 'HumanEval/25', 'HumanEval/11', '905', 'HumanEval/19', 'HumanEval/1']","def func_0(var_0: str) -> str:
    return var_0.split(' ')[0]",0.0,entry point not found
26,HumanEval/26,0,normal,[],"from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    result = []
    for num in numbers:
        if num not in seen:
            result.append(num)
            seen.add(num)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List
from collections import Counter

def func_0(var_0: List[int]) -> List[int]:
    var_1 = Counter(var_0)
    return [var_2 for var_2 in var_0 if var_1[var_2] <= 1]",0.0,entry point not found
26,HumanEval/26,5,normal,"['HumanEval/26', 'HumanEval/5', 'HumanEval/17', 'HumanEval/1', 'HumanEval/11']","from collections import Counter

def func_0(var_0: List[int]) -> List[int]:
    var_1 = Counter(var_0)
    return [var_2 for var_2 in var_0 if var_1[var_2] <= 1]",0.0,entry point not found
26,HumanEval/26,10,normal,"['HumanEval/26', 'HumanEval/5', 'HumanEval/17', 'HumanEval/1', 'HumanEval/11', 'HumanEval/6', 'HumanEval/25', 'HumanEval/22', 'HumanEval/7', '27']","from typing import List

def func_0(var_0: List[int]) -> List[int]:
    return [x for x in var_0 if var_0.count(x) == 1]",0.0,entry point not found
27,HumanEval/27,0,normal,[],"def flip_case(string: str) -> str:
    return ''.join(c.swapcase() for c in string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def func_0(var_0: str) -> str:
    return var_0.swapcase()",0.0,entry point not found
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '53', '364', '523']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '53', '364', '523', '374', '823', '877', 'HumanEval/51', 'HumanEval/93']","def flip_case(string):
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,0,normal,[],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def func_0(var_0: List[str]) -> str:
    return ''.join(var_0)",0.0,entry point not found
28,HumanEval/28,5,normal,"['HumanEval/28', 'HumanEval/1', 'HumanEval/14', 'HumanEval/5', 'HumanEval/17']","from typing import List

def func_0(var_0: List[str]) -> str:
    return ''.join(var_0)",0.0,entry point not found
28,HumanEval/28,10,normal,"['HumanEval/28', 'HumanEval/1', 'HumanEval/14', 'HumanEval/5', 'HumanEval/17', 'HumanEval/19', 'HumanEval/7', 'HumanEval/11', 'HumanEval/29', 'HumanEval/8']","from typing import List

def func_0(var_0: List[str]) -> str:
    return ''.join(var_0)",0.0,entry point not found
29,HumanEval/29,0,normal,[],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_strings(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]",0.0,entry point not found
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/1', '823', 'HumanEval/28']","from typing import List

def filter_strings(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",0.0,entry point not found
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/1', '823', 'HumanEval/28', 'HumanEval/17', 'HumanEval/22', '27', 'HumanEval/5', 'HumanEval/6']","from typing import List

def filter_strings(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",0.0,entry point not found
30,HumanEval/30,0,normal,[],"def get_positive(l: list):
    return [num for num in l if num > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/42'],"def find_positive_numbers(lst):
    return [num for num in lst if num > 0]",0.0,entry point not found
30,HumanEval/30,5,normal,"['HumanEval/42', 'HumanEval/6', '27', '893', '342']","from typing import List

def func_0(var_0: List[int]) -> List[int]:
    return [e + 1 for e in var_0]",0.0,entry point not found
30,HumanEval/30,10,normal,"['HumanEval/42', 'HumanEval/6', '27', '893', '342', '329', '66', '554', 'HumanEval/30', 'HumanEval/0']","import re
from typing import List

def func_0(var_0: List[str]) -> List[int]:
    return [int(re.sub(r'[^\d]', '', var_1)) for var_1 in var_0]",0.0,entry point not found
31,HumanEval/31,0,normal,[],"import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    sqrt_n = math.isqrt(n)
    for i in range(3, sqrt_n + 1, 2):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/75'],"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def func_0(var_0):
    def func_1(var_1):
        for var_2 in range(2, var_1):
            if var_1 % var_2 == 0:
                return False
        return True
    for var_3 in range(2, 101):
        if not is_prime(var_3):
            continue
        for var_2 in range(2, 101):
            if not is_prime(var_2):
                continue
            for var_4 in range(2, 101):
                if not is_prime(var_4):
                continue
            if var_3 * var_2 * var_4 == var_0:
                return True
    return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'if' statement on line 22 (<string>, line 23)"", 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '762', 'HumanEval/127']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i ==",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 77)', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '762', 'HumanEval/127', '260', 'HumanEval/94', 'HumanEval/134', 'HumanEval/0', '433']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def func_0(var_0):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    def func_1(var_1):
        for var_2 in range(2, var_1):
            if var_1 % var_2 == 0:
                return False
        return True

    var_3 = 1
    for var_4 in range(2, var_0 + 1):
        if var_0 % var_4 == 0 and is_prime(var_4):
            var_3 = max(var_3, var_4)
    return var_3",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,0,normal,[],"import numpy as np

def find_zero(xs: list):
    if len(xs) % 2!= 0 or xs[-1] == 0:
        raise ValueError(""xs must have an even number of coefficients and the largest non-zero coefficient must be the last one"")
    coefficients = np.poly1d(xs)
    roots = np.roots(coefficients)
    return roots[np.isreal(roots)][0].real",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def poly(coefficients, x):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(coefficients)])

def func_1(coefficients):
    a, b = -1.0, 1.0
    while poly(coefficients, a) * poly(coefficients, b) > 0:
        a *= 2.0
        b *= 2.0
    while abs(b - a) > 1e-10:
        c = (a + b) / 2.0
        if poly(coefficients, c) * poly(coefficients, a) > 0:
            a = c
        else:
            b = c
    return (a + b) / 2.0",0.0,entry point not found
32,HumanEval/32,5,normal,"['HumanEval/32', 'HumanEval/25', 'HumanEval/11', 'HumanEval/39', 'HumanEval/4']","import math

def func_0(var_0: list, var_1: float):
    return sum([coeff * math.pow(var_1, i) for i, coeff in enumerate(var_0)])

def poly(var_0: list, var_1: float):
    return func_0(var_0, var_1)

def func_1(var_0: list):
    var_4, var_5 = -1.0, 1.0
    while poly(var_0, var_4) * poly(var_0, var_5) > 0:
        var_4 *= 2.0
        var_5 *= 2.0
    while var_5 - var_4 > 1e-10:
        var_6 = (var_4 + var_5) / 2.0
        if poly(var_0, var_6) * poly(var_0, var_4) > 0:
            var_4 = var_6
        else:
            var_5 = var_6
    return var_4",0.0,entry point not found
32,HumanEval/32,10,normal,"['HumanEval/32', 'HumanEval/25', 'HumanEval/11', 'HumanEval/39', 'HumanEval/4', 'HumanEval/6', 'HumanEval/21', '859', 'HumanEval/7', 'HumanEval/128']","import math

def poly(x, coeffs):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(x)])

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
        if n % i == 0:
            return False
    return True

def func_0(var_0):
    var_1 = [0, 1]
    while True:
        var_1.append(var_1[-1] + var_1[-2])
        if is_prime(var_1[-1]):
            var_0 -= 1
        if var_0 == 0:
            return var_1[-1]",0.0,entry point not found
33,HumanEval/33,0,normal,[],"def sort_third(l):
    return [x if i % 3!= 0 else sorted([y for y in l if i % 3 == 0])[0] for i, x in enumerate(l)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    return l[:3] + sorted(l[3::3]) + l[1:3] + sorted(l[2::3])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/34', 'HumanEval/104', 'HumanEval/105', 'HumanEval/58']","def sort_third(l: list):
    return [x if i % 3!= 0 else sorted([x])[0] for i, x in enumerate(l)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/34', 'HumanEval/104', 'HumanEval/105', 'HumanEval/58', 'HumanEval/87', '37', '108', '308', 'HumanEval/116']","def sort_third(l: list):
    return l[:3] + sorted(l[3::3]) + l[1::3] + l[2::3]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,0,normal,[],"def unique(lst):
    return sorted(set(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(lst: list):
    return sorted(list(set(lst)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', 'HumanEval/33', 'HumanEval/116', '472', '27']","def unique(lst):
    return sorted(set(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', 'HumanEval/33', 'HumanEval/116', '472', '27', 'HumanEval/158', '712', '569', 'HumanEval/58', 'HumanEval/104']","def unique(var_0: list):
    return sorted(list(set(var_0)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,0,normal,[],"def max_element(lst):
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['HumanEval/9'],"from typing import List

def max_element(lst: List[int]) -> int:
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['HumanEval/9', '613', 'HumanEval/6', '366', 'HumanEval/21']","def max_element(lst):
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['HumanEval/9', '613', 'HumanEval/6', '366', 'HumanEval/21', '90', '299', '393', '805', 'HumanEval/12']","def max_element(lst):
    return max(lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,0,normal,[],"def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['781'],"def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['781', '687', '406', '641', 'HumanEval/113']","def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['781', '687', '406', '641', 'HumanEval/113', '211', '566', 'HumanEval/146', 'HumanEval/55', '873']","def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 and i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,0,normal,[],"def sort_even(l):
    return [x if i % 2!= 0 else y for i, (x, y) in enumerate(zip(l, sorted(l)[::2]))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/34'],"def sort_even(l: list):
    even = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    return [x if i % 2!= 0 else even[i // 2] for i, x in enumerate(l)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/34', 'HumanEval/104', '896', 'HumanEval/58', '472']","def sort_even(l):
    even = sorted([x for i, x in enumerate(l) if i % 2 == 0])
    return [x if i % 2!= 0 else even[i // 2] for i, x in enumerate(l)]]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ']' (<string>, line 3)"", 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/34', 'HumanEval/104', '896', 'HumanEval/58', '472', 'HumanEval/158', 'HumanEval/116', 'HumanEval/105', 'HumanEval/87', 'HumanEval/33']","def sort_even(l: list):
    return [x if i % 2!= 0 else sorted([x for x in l if x % 2 == 0 weight for x in l])[i // 2] for i, x in enumerate(l)]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 2)', 'completion_id': 0})]})"
38,HumanEval/38,0,normal,[],"def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each group has length 3.
    groups = [s[i:i+3] for i in range(0, len(s), 3)]
    # reverse elements in each group. Unless group has fewer elements than 3.
    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def encode_cyclic(s: str):
    groups = [s[3 * i:3 * (i + 1)] for i in range((len(s) + 2) // 3)]
    groups = [group[1:] + group[0] if len(group) == 3"" else group for group in groups]
    return ''.join(groups)",0.0,entry point not found
38,HumanEval/38,5,normal,"['HumanEval/38', '374', 'HumanEval/50', '18', 'HumanEval/64']","def encode_cyclic(s):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [group[1:] + group[0] if len(group) == 3 else group for group in groups]
    return ''.join(groups)",0.0,entry point not found
38,HumanEval/38,10,normal,"['HumanEval/38', '374', 'HumanEval/50', '18', 'HumanEval/64', '330', '565', '315', '421', 'HumanEval/118']","def encode_cyclic(s):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [group[1:] + group[:1] if len(group) == 3 else group for group in groups]
    return ''.join(groups)",0.0,entry point not found
39,HumanEval/39,0,normal,[],"import math

def is_prime(n: int) -> bool:
    """"""Check if a number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def is_perfect_square(n: int) -> bool:
    """"""Check if a number is a perfect square.""""""
    root = math.isqrt(n)
    return root * root == n

def prime_fib(n: int) -> int:
    """"""Return the n-th number that is a Fibonacci number and it's also prime.""""""
    a, b = 0, 1
    count = 0
    while True:
        a, b = b, a + b
        if is_perfect_square(5 * a * a + 4) or is_perfect_square(5 * a * a - 4):
            if is_prime(b):
                count += 1
                if count == n:
                    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['873'],"import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    sqrt_n = math.isqrt(n)
    for i in range(3, sqrt_n + 1, 2):
        if n % i == 0:
            return False
    return True

def prime_fib(n):
    a, b = 0, 1
    count = 0
    while True:
        a, b = b, a + b
        if is_prime(b) and count == n:
            return b
        count += 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['873', 'HumanEval/55', 'HumanEval/59', '260', 'HumanEval/75']","from math import sqrt
from functools import lru_cache

@lru_cache(maxsize=None)
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_fib(n):
    a, b = 0, 1
    while a <= n:
        a, b = b, a + b
    return b if is_prime(b) else prime_fib(n)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['873', 'HumanEval/55', 'HumanEval/59', '260', 'HumanEval/75', 'HumanEval/39', 'HumanEval/63', '905', 'HumanEval/127', 'HumanEval/94']","import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n) + 1)):
        if n % i == 0:
            return False
    return True

def prime_fib(n):
    fib = [0, 1]
    while len(fib) < n:
        fib.append(fib[-1] + fib[-2])
    for i in range(n-1, -1, -1):
        if is_prime(fib[i]):
            return fib[i]
    return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,0,normal,[],"def triples_sum_to_zero(l):
    seen = set()
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            complement = - (l[i] + l[j])
            if complement in l[j+1:]:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['121'],"def check_triplet(l: list):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False",0.0,entry point not found
40,HumanEval/40,5,normal,"['121', '916', '767', '481', '340']","def check_triplet(nums, target):
    nums.sort()
    for i in range(len(nums) - 2):
        left, right = i + 1, len(nums) - 1
        while left < right:
            current_sum = nums[i] + nums[left] + nums[right]
            if current_sum == target:
                return True
            elif current_sum < target:
                left += 1
            else:
                right -= 1
    return False",0.0,entry point not found
40,HumanEval/40,10,normal,"['121', '916', '767', '481', '340', '527', '685', '65', '598', '798']","def check_triplet(var_0, var_1, sum):
    for var_2 in range(var_1 - 1, var_0):
        for var_3 in range(var_2 + 1, var_1):
            if var_0[var_2] + var_0[var_3] == sum:
                return True
    return False",0.0,entry point not found
41,HumanEval/41,0,normal,[],"import math

def car_race_collision(n: int) -> int:
    return math.floor(n * (n - 1) / 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['111'],"import math

def count_cars(n):
    count = 0
    for i in range(n):
        for j in range(i+1, n):
            if math.sqrt((i-j)**2 + (i-j)**2) <= n:
                count += 1
    return count",0.0,entry point not found
41,HumanEval/41,5,normal,"['111', '187', '552', 'HumanEval/26', '250']","def count_collisions(n):
    def is_collision(car1, car2):
        return abs(car1[0] - car2[0]) == 1 and abs(car1[1] - car2[1]) == 1

    cars = [(i, i) for i in range(n)]
    collisions = 0
    for i in range(n):
        for j in range(i + 1, n):
            if is_collision(cars[i], cars[j]):
                collisions += 1
    return collisions",0.0,entry point not found
41,HumanEval/41,10,normal,"['111', '187', '552', 'HumanEval/26', '250', '168', '70', '433', '736', '843']","import math

def func_0(n):
    return math.ceil(n / 2)",0.0,entry point not found
42,HumanEval/42,0,normal,[],"def incr_list(l: list):
    return [i + 1 for i in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def calculate_list(var_0: list):
    return [e + 1 for e in var_0]",0.0,entry point not found
42,HumanEval/42,5,normal,"['HumanEval/42', 'HumanEval/26', 'HumanEval/14', 'HumanEval/17', '27']","def incr_list(lst):
    return [i + 1 for i in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', 'HumanEval/26', 'HumanEval/14', 'HumanEval/17', '27', 'HumanEval/5', '810', 'HumanEval/6', '769', '255']","def incr_list(l: list):
    return [i + 1 for i in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,0,normal,[],"def pairs_sum_to_zero(lst):
    seen = set()
    for num in lst:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['481'],"def is_subset_sum(nums, target):
    if target == 0:
        return True
    if not nums:
        return False
    if nums[0] > target:
        return is_subset_sum(nums[1:], target)
    return is_subset_sum(nums[1:], target - nums[0]) or is_subset_sum(nums[1:], target)

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1)

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1))

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1)

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1)

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1))

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1))

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1)

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1))

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1))

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1))

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1))

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum(nums) + 1))

def pairs_sum_to_zero(nums):
    return any(is_subset_sum(nums, target) for target in range(-sum(nums), sum",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 11)', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['481', '415', '65', '271', '634']","def pairs_sum_to_zero(nums):
    num_set = set(nums)
    pairs = set()
    for num in num_set:
        if -num in num_set:
            pairs.add(tuple(sorted((num, -num))))
    return len(pairs)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['481', '415', '65', '271', '634', '798', '121', '270', '420', '656']","def pairs_sum_to_zero(lst):
    count_dict = {}
    for num in lst:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
    pairs = 0
    for num in count_dict:
        if -num in count_dict and num!= -num:
            pairs += min(count_dict[num], count_dict[-num])
        elif num == -num and count_dict[num] > 1:
            pairs += count_dict[num] // 2
    return pairs",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,0,normal,[],"def change_base(x: int, base: int) -> str:
    if x == 0:
        return '0'
    digits = []
    while x:
        digits.append(int(x % base))
        x //= base
    return ''.join(map(str, digits[::-1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['99'],"def func_0(n):
    return bin(n).replace('0b', '')",0.0,entry point not found
44,HumanEval/44,5,normal,"['99', 'HumanEval/11', 'HumanEval/15', '735', '218']","def func_0(n, base):
    if n < base:
        return str(n)
    else:
        return func_0(n // base, base) + str(n % base)",0.0,entry point not found
44,HumanEval/44,10,normal,"['99', 'HumanEval/11', 'HumanEval/15', '735', '218', 'HumanEval/25', '518', '123', 'HumanEval/39', '619']","def func_0(n, base):
    if base < 2:
        raise ValueError(""Base must be at least 2"")
    if n == 0:
        return '0'
    digits = []
    while n:
        digits.append(int(n % base))
        n //= base
    return ''.join(map(str, digits[::-1]))",0.0,entry point not found
45,HumanEval/45,0,normal,[],"import math

def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,1,normal,['826'],"import math

def process(var_0, var_1, var_2):
    var_3 = pow(var_0, 2)
    var_4 = pow(var_1, 2)
    var_5 = pow(var_2, 2)
    if var_3 == var_4 + var_5 or var_4 == var_3 + var_5 or var_5 == var_3 + var_4:
        return 'Right-angled Triangle'
    elif var_3 > var_4 + var_5 or var_4 > var_3 + var_5 or var_5 > var_3 + var_4:
        return 'Obtuse-angled Triangle'
    else:
        return 'Acute-angled Triangle'

# Example usage:
print(process(3, 4, 5))  # Output: 'Right-angled Triangle'
print(process(5, 12, 13))  # Output: 'Right-angled Triangle'
print(process(3, 5, 7))  # Output: 'Acute-angled Triangle'",0.0,entry point not found
45,HumanEval/45,5,normal,"['826', '738', '927', '180', '120']","import math

def func_0(var_0, var_1):
    var_2 = pow(var_0, 2)
    var_3 = pow(var_1, 2)
    var_4 = pow(var_0, 2)
    var_5 = pow(var_1, 2)
    if var_2 == var_3 + var_4 or var_3 == var_2 + var_4 or var_5 == var_2 + var_4:
        return 'Right-angled Triangle'
    elif var_2 > var_3 + var_4 or var_3 > var_2 + var_4 or var_5 > var_2 + var_3:
        return 'Obtuse-angled Triangle'
    else:
        return 'Acute-angled Triangle'

def func_1(var_0):
    if var_0 < 0:
        return 0
    else:
        return 1 / pow(2, var_0) + func_1(var_0 - 1)

def func_2(var_0):
    if var_0 is None:
        return 0
    else:
        var_1 = func_2(var_0.left)
        var_6 = func_2(var_0.right)
        if var_1 > var_6:
            return var_1 + 1
        else:
            return var_6 + 1

def func_3(var_0, var_1, var_2, var_3):
    var_4 = 6371.01 * math.acos(math.sin(math.radians(var_0)) * math.sin(math.radians(var_2)) + math.cos(math.radians(var_0)) * math.cos(math.radians(var_2)) * math.cos(math.radians(var_1) - math.radians(var_3)))
    return var_4

def func_4(var_0):
    var_1 = max(abs(x * y) for x, y in var_0)
    return var_1",0.0,entry point not found
45,HumanEval/45,10,normal,"['826', '738', '927', '180', '120', '488', 'HumanEval/152', '63', '951', '761']","import math

def func_0(var_0, var_1):
    var_2 = math.sqrt(var_0**2 + var_1**2)
    var_3 = math.sqrt(var_0**2 - var_1**2)
    if var_2 == var_3:
        return 'Right-angled Triangle'
    elif var_2 > var_3:
        return 'Obtuse-angled Triangle'
    else:
        return 'Acute-angled Triangle'

def func_1(var_0):
    if var_0 < 0:
        return 0
    else:
        return 1 / (2 ** var_0) + func_1(var_0 - 1)

def func_2(var_0, var_1):
    var_0.data = var_1
    var_0.left = None
    var_0.right = None

def func_3(var_0):
    if var_0 is None:
        return 0
    else:
        var_1 = max_height(var_0.left)
        var_2 = max_height(var_0.right)
        if var_1 > var_2:
            return var_1 + 1
        else:
            return var_2 + 1""

def func_4(var_0, var_1, var_2, var_3):
    var_4 = 6371.01 * math.acos(math.sin(math.radians(var_0)) * math.sin(math.radians(var_2)) + math.cos(math.radians(var_0)) * math.cos(math.radians(var_2)) * math.sin(math.radians(var_1 - var_3)))
    return var_4

def func_5(var_0):
    var_1 = max([abs(x * y) for x, y in var_0])
    return var_1

def func_6(var_0):
    var_1 = math.sqrt(5 * (5 + 2 * math.sqrt(5))) * (var_0 ** 2) / 4.0
    return var_1

def func_7(var_0, var_1):
    return [abs(x - y) for x, y in zip(var_0, var_1)]

def func_8(var_0):
    var_1 = [abs(b - a) for a, b in var_0]
    var_2 = max",0.0,entry point not found
46,HumanEval/46,0,normal,[],"def fib4(n):
    if n <= 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    fib4_prev_prev_prev_prev = 0
    fib4_prev_prev_prev = 0
    fib4_prev_prev = 2
    fib4_prev = 0
    for _ in range(4, n + 1):
        fib4_curr = fib4_prev_prev_prev + fib4_prev_prev + fib4_prev + fib4_prev_prev_prev_prev
        fib4_prev_prev_prev = fib4_prev_prev
        fib4_prev_prev = fib4_prev
        fib4_prev = fib4_curr
        fib4_prev_prev_prev = fib4_prev_prev_prev
    return fib4_curr",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,1,normal,['873'],"def fib(n):
    if n <= 0:
        return 0
    elif n == 1 or n == 2:
        return 1
    else:
        return fib(n-1) + fib(n-2)",0.0,entry point not found
46,HumanEval/46,5,normal,"['873', 'HumanEval/55', '84', '552', '905']","def fib(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b

def fib(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b

def fib(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b

def fib(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b

def fib(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b

def fib(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b

def fib(n):",0.0,entry point not found
46,HumanEval/46,10,normal,"['873', 'HumanEval/55', '84', '552', '905', 'HumanEval/63', 'HumanEval/26', 'HumanEval/113', 'HumanEval/105', '583']","def fib(n):
    if n <= 3:
        return 0
    elif n == 4:
        return 1
    else:
        a, b = 0, 1
        for _ in range(4, n):
            a, b = b, a + b
        return b",0.0,entry point not found
47,HumanEval/47,0,normal,[],"import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,1,normal,['HumanEval/21'],"from typing import List

def func_0(var_0: List[float]) -> List[float]:
    var_1 = min(var_0)
    var_2 = max(var_0)
    return [(x - var_1) / (var_2 - var_1) for x in var_0]",0.0,entry point not found
47,HumanEval/47,5,normal,"['HumanEval/21', '472', 'HumanEval/6', '342', '27']","from typing import List
import heapq

class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index

    def __lt__(self, other):
        return self.value < other.value

def func_0(list):
    high = float('-inf')
    p = (0, float('inf'))
    pq = []
    for i in range(len(list)):
        heapq.heappush(pq, Node(list[i][0], i, 0))
        high = max(high, list[i][0])
    while True:
        top = heapq.heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if high - low < p[1] - p[0]:
            p = (low, high)
        if j == len(list[i]) - 1:
            return p
        heapq.heappush(pq, Node(list[i][j + 1], i, j + 1))
        high = max(high, list[i][j + 1])
        return p",0.0,entry point not found
47,HumanEval/47,10,normal,"['HumanEval/21', '472', 'HumanEval/6', '342', '27', '629', 'HumanEval/34', 'HumanEval/19', '554', 'HumanEval/4']","from typing import List

def min_max_product(nums: List[float]) -> List[float]:
    min_val = min(nums)
    max_val = max(nums)
    return [(x - min_val) / (max_val - min_val) for x in nums]",0.0,entry point not found
48,HumanEval/48,0,normal,[],"def is_palindrome(text: str) -> bool:
    text = ''.join(e for e in text if e.isalnum()).lower()
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['352'],"def is_palindrome(s):
    return s == s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['352', 'HumanEval/10', '485', 'HumanEval/107', '53']","def is_palindrome(s):
    return s == s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['352', 'HumanEval/10', '485', 'HumanEval/107', '53', '192', '823', '403', '822', '756']","import re

def func_0(str):
    return str == str[::-1]

def func_1(var_0):
    return var_0 == var_0[::-1]

def func_2(var_0):
    var_1 = 1
    while var_0 // var_1 >= 10:
        var_1 *= 10
    while var_0!= 0:
        var_2 = var_0 // var_1
        var_3 = var_0 % 10
        if var_2!= var_3:
            return False
        var_0 = var_0 % var_1 // 10
        var_1 = var_1 // 10
    return True

def func_3(var_4, var_0):
    var_4.sort()
    for var_5 in range(var_0 - 1, -1, -1):
        if func_2(var_4[var_5]):
            return var_4[var_5]
    return -1

def func_4(var_0):
    var_1 = 0
    var_2 = 0
    for var_3 in range(1, var_0 + 1):
        if var_3 % 2 == 1 and func_2(var_3):
            var_2 += 1
        elif var_3 % 2 == 0 and func_2(var_3):
            var_1 += 1
    return (var_2, var_1)

def func_5(str):
    if str[0] == str[-1]:
        return 'Equal'
    else:
        return 'Not Equal'

def func_6(str):
    var_0 = False
    var_1 = False
    for var_2 in str:
        if var_2.isalpha():
            var_0 = True
        if var_2.isdigit():
            var_1 = True
    return var_0 and var_1

def func_7(var_0, var_1):
    if var_1 in var_0:
        var_2 = re.compile('\\A' + var_1)
        var_3 = var_2.search(var_0)
        if var_3:
            return 'String starts with the given substring'
        else:
            return 'String does not start with the given substring'
    else:
        return '",0.0,entry point not found
49,HumanEval/49,0,normal,[],"def modp(n: int, p: int) -> int:
    result = 1
    for _ in range(n):
        result = (result * 2) % p
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,1,normal,['260'],"import math

def newman_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def func_0(var_0):
    if var_0 == 0 or var_0 == 1:
        return 1
    return 2 * newman_prime(var_0 - 1) + newman_prime(var_0 - 1)",0.0,entry point not found
49,HumanEval/49,5,normal,"['260', '671', '406', '45', '735']","import math

def mod(n, m):
    return n % m

def newman_prime(n):
    if n == 2:
        return 2
    if n % 2 == 0:
        return 0
    i = 3
    while i * i <= n:
        if n % i == 0:
            return 0
        i += 2
    return 1

def newman_prime(n):
    if n == 2:
        return 2
    if n % 2 == 0:
        return 0
    i = 3
    while i * i <= n:
        if n % i == 0:
            return 0
        i += 2
    return 1

def func_0(var_0):
    if var_0 == 0 or var_0 == 1:
        return 1
    return 2 * newman_prime(var_0 - 1) + newman_prime(var_0 - 2)

def newman_prime(n):
    if n == 2:
        return 2
    if n % 2 == 0:
        return 0
    i = 3
    while i * i <= n:
        if n % i == 0:
            return 0
        i += 2
    return 1

def func_0(var_0):
    if var_0 == 0 or var_0 == 1:
        return 1
    return 2 * newman_prime(var_0 - 1) + newman_prime(var_0 - 2)

def newman_prime(n):
    if n == 2:
        return 2
    if n % 2 == 0:
        return 0
    i = 3
    while i * i <= n:
        if n % i == 0:
            return 0
        i += 2
    return 1

def func_0(var_0):
    return int(math.log2(var_0)) - var_0 + 1

def func_1(var_0):
    if var_0 == 0:
        return 1
    if var_0 & var_0 - 1 == 0:
        return var_0
    var_1 = var_0 ^ var_0 >> 1
    return var_1 ^ var_1 >>",0.0,entry point not found
49,HumanEval/49,10,normal,"['260', '671', '406', '45', '735', 'HumanEval/113', '218', '687', 'HumanEval/39', '151']","import math

def gcd(a, b):
    while b!= 0:
        a, b = (b, a % b)
    return a

def lcm(a, b):
    return a * b // gcd(a, b)

def mod(a, b):
    return a % b

def newman_conjecture(n):
    if n == 0 or n == 1:
        return 1
    return 2 * newman_conjecture(n - 1) + newman_conjecture(n - 1)

def func_0(var_0):
    return int(newman_conjecture(var_0 - 1) - var_0)

def func_1(var_0):
    if var_0 == 0:
        return 1
    if var_0 & var_0 + 1 == 0:
        return var_0
    var_1 = get_Pos_of_Right_most_Bit(~var_0)
    return 1 << var_1 - 1 | var_0

def func_2(var_0):
    var_1 = var_0 ^ var_0 >> 1
    var_1 = var_1 ^ var_1 >> 2
    var_1 = var_1 ^ var_1 >> 4
    var_1 = var_1 ^ var_1 >> 8
    var_1 = var_1 ^ var_1 >> 16
    return var_1

def func_3(var_0, var_1):
    var_2 = var_0
    var_3 = var_1
    var_4 = find_gcd(var_2, var_3)
    for var_5 in range(2, var_0):
        var_4 = find_gcd(var_4, var_5)
    return var_4

def func_4(var_0):
    var_1 = []
    for var_2 in var_0:
        var_3 = sum(int(d) for d in var_2)
        var_1.append('the number of digits in the string'+ str(var_3) +'is'+ str(var_3))
    return var_1

def func_5(var_0, var_1):
    var_2 = min(var_0, var_1)
    var_3 = max(var_0, var_1)",0.0,entry point not found
50,HumanEval/50,0,normal,[],"def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) if ch.isalpha() else ch for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,1,normal,['HumanEval/50'],"def encode(var_0: str):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in var_0])

def decode(var_0: str):
    return ''.join([chr((ord(var_1) - 97 - 5) % 26 + 97) for var_1 in var_0])",0.0,entry point not found
50,HumanEval/50,5,normal,"['HumanEval/50', 'HumanEval/38', '319', 'HumanEval/51', 'HumanEval/64']","def encode_cyclic(s: str):
    return ''.join([chr((ord(var_1) - 5 - ord('a')) % 26 + ord('a') for var_1 in s])",0.0,entry point not found
50,HumanEval/50,10,normal,"['HumanEval/50', 'HumanEval/38', '319', 'HumanEval/51', 'HumanEval/64', 'HumanEval/162', '330', '374', '565', '933']","def encode_cyclic(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def decode_cyclic(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_0(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_1(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_2(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_3(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_4(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_5(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_6(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_7(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_8(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_9(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func_10(s):
    return ''.join([chr((ord(var_1) - 97 + 5) % 26 + 97) for var_1 in s])

def func",0.0,entry point not found
51,HumanEval/51,0,normal,[],"def remove_vowels(text):
    vowels = 'aeiouAEIOU'
    return ''.join([char for char in text if char not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,1,normal,['HumanEval/51'],"import os

def move_vowels(text):
    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u'])",0.0,entry point not found
51,HumanEval/51,5,normal,"['HumanEval/51', 'HumanEval/64', '478', '459', '319']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['HumanEval/51', 'HumanEval/64', '478', '459', '319', '495', '330', '254', '523', '748']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,0,normal,[],"def below_threshold(l: list, t: int) -> bool:
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['433'],"import heapq

def below_threshold(lst, threshold):
    return all(i < threshold for i in lst)

def below_threshold_alt(lst, threshold):
    return all(i < threshold for i in lst)

def below_threshold_heapq(lst, threshold):
    return all(i < threshold for i in heapq.nlargest(1, lst))

def below_threshold_list_comp(lst, threshold):
    return all(i < threshold for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['433', 'HumanEval/0', 'HumanEval/3', 'HumanEval/39', 'HumanEval/134']","def below_threshold(numbers, threshold):
    return all(num < threshold for num in numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['433', 'HumanEval/0', 'HumanEval/3', 'HumanEval/39', 'HumanEval/134', 'HumanEval/124', 'HumanEval/52', 'HumanEval/31', 'HumanEval/57', '762']","def below_threshold(var_0, var_1):
    return all(var_2 < var_1 for var_2 in var_0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,0,normal,[],"def add(x: int, y: int) -> int:
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/115'],"def add_numbers(var_0, var_1):
    return sum(var_0) / var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/115', '398', 'HumanEval/53', 'HumanEval/32', 'HumanEval/25']","def add(var_0, var_1):
    return var_0 + var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/115', '398', 'HumanEval/53', 'HumanEval/32', 'HumanEval/25', 'HumanEval/4', 'HumanEval/133', '873', 'HumanEval/67', '696']","def add(var_0, var_1):
    return var_0 + var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,0,normal,[],"def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['53'],"def same_first_last(lst):
    if len(lst) < 1:
        return 'List is too short'
    else:
        return 'Not Equal'",0.0,entry point not found
54,HumanEval/54,5,normal,"['53', '352', '823', '565', '70']","import re

def same_length_tuples(var_0, var_1):
    return func_0(var_0, var_1)

def func_0(var_0, var_1):
    var_2 = 1
    for tuple in var_0:
        if len(tuple)!= var_1:
            var_2 = 0
            break
    return var_2",0.0,entry point not found
54,HumanEval/54,10,normal,"['53', '352', '823', '565', '70', 'HumanEval/64', '523', '461', '818', '192']","import re

def same_rely(str1, str2):
    if str1 == str2:
        return True
    else:
        return False",0.0,entry point not found
55,HumanEval/55,0,normal,[],"def fib(n: int) -> int:
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,1,normal,['873'],"def fib(n):
    if n <= 0:
        return ""Input should be a positive integer""
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        a, b = 1, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', '905', 'HumanEval/26']","def fib(n):
    if n <= 0:
        return ""Input should be a positive integer.""
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        a, b = 1, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', '905', 'HumanEval/26', '479', '583', '745', 'HumanEval/113', '389']","def fib(n):
    if n <= 1:
        return n
    return fib(n - 1) + fib(n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,0,normal,[],"def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['771'],"from collections import deque

def correct_bracketing(brackets: str):
    if len(brackets) % 2!= 0:
        return False
    bracket_map = {')': '(', '}': '{', ']': '['}
    var_1 = deque()
    for var_2 in brackets:
        if var_2 in bracket_map.values():
            var_1.append(var_2)
        if var_2 in bracket_map.keys():
            if not var_1:
                return False
            var_3 = var_1.pop()
            if var_3!= bracket_map[var_2]:
                return False
    return not var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['771', '352', '823', '913', '670']","def correct_bracketing(brackets):
    stack = []
    bracket_map = {')': '(', '}': '{', ']': '['}
    for bracket in brackets:
        if bracket in bracket_map.values():
            stack.append(bracket)
        elif bracket in bracket_map:
            if not stack or stack.pop()!= bracket_map[bracket]:
                return False
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['771', '352', '823', '913', '670', '680', '433', '396', '737', 'HumanEval/57']","from collections import deque

def correct_bracketing(brackets: str):
    if len(brackets) & 1:
        return False
    bracket_map = {')': '(', '}': '{', ']': '['}
    var_1 = deque()
    for var_2 in brackets:
        if var_2 in bracket_map.values():
            var_1.append(var_2)
        if var_2 in bracket_map.keys():
            if not var_1:
                return False
            var_3 = var_1.pop()
            if bracket_map[var_2]!= var_3:
                return False
    return not var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,0,normal,[],"def monotonic(l: list):
    increasing = decreasing = True
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['HumanEval/57'],"def monotonic(lst):
    increasing = decreasing = True
    for i in range(len(lst) - 1):
        if lst[i] < lst[i + 1]:
            increasing = False
        elif lst[i] > lst[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['HumanEval/57', '472', 'HumanEval/3', 'HumanEval/21', 'HumanEval/0']","def func_0(var_0):
    if var_0 == sorted(var_0) or var_0 == sorted(var_0, reverse=True):
        return True
    return False",0.0,entry point not found
57,HumanEval/57,10,normal,"['HumanEval/57', '472', 'HumanEval/3', 'HumanEval/21', 'HumanEval/0', '433', '329', 'HumanEval/52', '342', '66']","def is_monotonic(l):
    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))",0.0,entry point not found
58,HumanEval/58,0,normal,[],"def common(l1: list, l2: list):
    return sorted(set(l1) & set(l2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def func_0(var_0: list, var_1: list):
    return sorted(set(var_0) & set(var_1))",0.0,entry point not found
58,HumanEval/58,5,normal,"['HumanEval/58', '108', '70', 'HumanEval/26', 'HumanEval/7']","def func_0(var_0: list, var_1: list):
    return sorted(set(var_0) & set(var_1))",0.0,entry point not found
58,HumanEval/58,10,normal,"['HumanEval/58', '108', '70', 'HumanEval/26', 'HumanEval/7', '342', '943', 'HumanEval/87', '862', 'HumanEval/20']","def func_0(var_0: list, var_1: list) -> list:
    return sorted(list(set(var_0) & set(var_1)))",0.0,entry point not found
59,HumanEval/59,0,normal,[],"import math

def largest_prime_factor(n: int):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"import math

def largest_prime_factor(n):
    max_factor = 1
    while n % 2 == 0:
        max_factor = 2
        n = n // 2
    for i in range(3, int(n**0.5) + 1, 2):
        while n % i == 0:
            max_factor = i
            n = n // i
    if n > 2:
        max_factor = n
    return max_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '260', 'HumanEval/75', '357', '805']","import math

def largest_prime_factor(n):
    max_divisor = math.floor(math.sqrt(n))
    while n % 2 == 0:
        n = n // 2
    for i in range(3, max_divisor + 1, 2):
        while n % i == 0:
            n = n // i
    if n > 2:
        return n
    else:
        return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '260', 'HumanEval/75', '357', '805', '294', 'HumanEval/39', '366', '905', 'HumanEval/127']","import math

def largest_prime_factor(n):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,0,normal,[],"def sum_to_n(n: int) -> int:
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['HumanEval/60'],"def sum_to_n(n):
    return sum(range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['HumanEval/60', '962', '398', '340', '105']","def sum_Natural(n):
    return n * (n + 1) // 2

def sum_n(n):
    return sum_Natural(n)

def sum_n(n):
    return sum_Natural(n)

def sum_n(n):
    return sum_Natural(n)

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return sum(range(1, n + 1))

def sum_n(n):
    return sum_Natural(n)

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return sum(range(1, n + 1))

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1 // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n * (n + 1) // 2

def sum_n(n):
    return n *",0.0,entry point not found
60,HumanEval/60,10,normal,"['HumanEval/60', '962', '398', '340', '105', '514', '142', '870', '133', '212']","def sum_n(n):
    return n * (n + 1) // 2",0.0,entry point not found
61,HumanEval/61,0,normal,[],"def correct_bracketing(brackets):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['771'],"from collections import deque

def valid_brackets(brackets: str):
    if len(brackets) & 1:
        return False
    stack = deque()
    for bracket in brackets:
        if bracket == '(' or bracket == '{' or bracket == '[':
            stack.append(bracket)
        elif bracket == ')' or bracket == '}' or bracket == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and bracket!= ')') or (top == '{' and bracket!= '}') or (top == '[' and bracket!= ']'):
                return False
    return not stack",0.0,entry point not found
61,HumanEval/61,5,normal,"['771', '352', '823', '670', '680']","from collections import deque

def check_brackets(brackets: str):
    stack = deque()
    bracket_map = {')': '(', '}': '{', ']': '['}
    for bracket in brackets:
        if bracket in bracket_map.values():
            stack.append(bracket)
        elif bracket in bracket_map.keys():
            if not stack or stack.pop()!= bracket_map[bracket]:
                return False
    return not stack",0.0,entry point not found
61,HumanEval/61,10,normal,"['771', '352', '823', '670', '680', 'HumanEval/57', '433', '396', '737', '913']","from collections import deque

def correct_bracket(brackets: str):
    if len(brackets) & 1:
        return False
    stack = deque()
    for bracket in brackets:
        if bracket == '(' or bracket == '{' or bracket == '[':
            stack.append(bracket)
        if bracket == ')' or bracket == '}' or bracket == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and bracket!= ')') or (top == '{' and bracket!= '}') or (top == '[' and bracket!= ']'):
                return False
    return not stack",0.0,entry point not found
62,HumanEval/62,0,normal,[],"def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 +...
     Return derivative of this polynomial in the same form.
    """"""
    return [i * x for i, x in enumerate(xs[1:], 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['456'],"def derivative(xs):
    return [i*x for i, x in enumerate(xs[1:])",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 2)"", 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['456', 'HumanEval/21', 'HumanEval/11', '413', 'HumanEval/4']","def derivative(xs):
    return [i * xs[i] for i in range(1, len(xs))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['456', 'HumanEval/21', 'HumanEval/11', '413', 'HumanEval/4', 'HumanEval/152', '391', '859', 'HumanEval/7', '447']","from sympy import symbols, Poly

def derivative(coefficients):
    x = symbols('x')
    poly = Poly(''.join(f'{coefficients[i]}*x^{len(coefficients)-i-1}' for i in range(len(coefficients))), x)
    return [float(coeff) for coeff in poly.diff(x).all_coeffs()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,0,normal,[],"def fibfib(n: int):
    if n <= 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c
        return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['873'],"def fibFib(n):
    if n <= 1:
        return n
    elif n == 2:
        return 0
    else:
        a, b, c = 0, 0, 1
        for _ in range(2, n):
            a, b, c = b, c, a + b + c
        return c",0.0,entry point not found
63,HumanEval/63,5,normal,"['873', 'HumanEval/63', '84', 'HumanEval/55', '905']","from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n):
    if n == 0:
        return 0
    if n == 1 or n == 2:
        return 0
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['873', 'HumanEval/63', '84', 'HumanEval/55', '905', '552', 'HumanEval/113', 'HumanEval/26', 'HumanEval/105', '926']","def fibfib(n):
    if n == 0:
        return 0
    if n == 1 or n == 2:
        return 0
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,0,normal,[],"def vowels_count(s):
    vowels = 'aeiouy'
    count = 0
    for char in s.lower():
        if char in vowels and (char!= 'y' or s.lower().endswith(char)):
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', 'HumanEval/98', '684', '523', '172']","import re

def vowels_count(word):
    return len(re.findall(r'[aeiouy]', word, re.IGNORECASE))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,10,normal,"['HumanEval/64', 'HumanEval/98', '684', '523', '172', 'HumanEval/113', '461', '818', '374', '861']","import re

def vowels_count(s):
    return sum(1 for c in s if c in 'aeiouAEIOU')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,0,normal,[],"def circular_shift(x, shift):
    x_str = str(x)
    shift = shift % len(x_str)
    return x_str[-shift:] + x_str[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,1,normal,['HumanEval/38'],"def circular_shift(n, k):
    return ((n << k) | (n >> (32 - k))) & 0xFFFFFFFF

def circular_shift_int(n, k):
    return ((n << k) | (n >> (32 - k))) & 0xFFFFFFFF

def circular_shift_str(s, k):
    return s[-k:] + s[:-k]

def circular_shift_list(lst, k):
    return lst[-k:] + lst[:-k]

def circular_shift_bytes(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytes_object(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytes_array(b, k):
    return b[-k:] + b[:-k]

def circular_shift_int_array(arr, k):
    return (arr[-k:] + arr[:-k])

def circular_shift_bytes_object_view(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytes_view(b, k):
    return b[-k:] + b[:-k]

def circular_shift_memoryview(m, k):
    return m[-k:] + m[:-k]

def circular_shift_bytesio(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray_view(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray_object(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray_array(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray_buffer(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray_raw(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray_memory(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray_view_object(b, k):
    return b[-k:] + b[:-k]

def circular_shift_bytearray_view_array(b, k):
    return b[-k:] + b[:-k]

def circular_shift(var_0: str):
    var_1 = len(var_0)
    var_2 = var_1 % 3
    if var_2 == 0:
        var_3 = var_1]
    elif var_2 == 1:
        var_3 =",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ']' (<string>, line 68)"", 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/38', '781', 'HumanEval/15', '739', '218']","def circular_shift(n, k):
    k = k % 10  # to handle cases where k is greater than 10
    return int(str(n)[-k:] + str(n)[: -k]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 3)"", 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/38', '781', 'HumanEval/15', '739', '218', 'HumanEval/11', '604', '323', '456', '671']","def circular_shift(var_0: str, shift: int) -> str:
    shift = shift % len(var_0)
    return var_0[-shift:] + var_0[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,0,normal,[],"def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['HumanEval/66'],"def func_0(var_0):
    if var_0 == '':
        return 0
    return sum((ord(char) if char.isupper() else 0 for char in var_0))",0.0,entry point not found
66,HumanEval/66,5,normal,"['HumanEval/66', '398', 'HumanEval/84', '148', '566']","def sum_digits(var_0):
    return sum((ord(char) if char.isupper() else 0 for char in var_0))",0.0,entry point not found
66,HumanEval/66,10,normal,"['HumanEval/66', '398', 'HumanEval/84', '148', '566', 'HumanEval/108', '724', 'HumanEval/151', '949', '959']","def sum_digits(n):
    return sum(int(digit) for digit in str(n))",0.0,entry point not found
67,HumanEval/67,0,normal,[],"import re

def fruit_distribution(s, n):
    numbers = re.findall(r'\d+', s)
    apples = int(numbers[0])
    oranges = int(numbers[1])
    return n - apples - oranges",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['HumanEval/113'],"from re import findall

def fruit_distribution(s, total):
    s = s.replace('and', '').replace(' ', '')
    apples, oranges = map(int, findall('\d+', s))
    return total - apples - oranges",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['HumanEval/113', '926', 'HumanEval/84', 'HumanEval/105', '949']","def fruit_distribution(s, total):
    s = s.replace(""and"", """")
    s = s.replace("" "", """")
    s = s.split(""or"")
    s = [int(i) for i in s]
    return total - sum(s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['HumanEval/113', '926', 'HumanEval/84', 'HumanEval/105', '949', 'HumanEval/145', '684', 'HumanEval/32', '207', '142']","def fruit_distribution(s, total):
    s = s.replace("" and "", "" "")
    s = s.split()
    s = [int(i) for i in s if i.isdigit()]
    return total - sum(s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,0,normal,[],"def pluck(arr):
    even_nodes = [(node, i) for i, node in enumerate(arr) if node % 2 == 0]
    return [min(even_nodes, key=lambda x: (x[0], x[1]))[0], min(even_nodes, key=lambda x: (x[0], x[1]))[1]] if even_nodes else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['367'],"import heapq

def pluck(arr):
    if not arr:
        return [None, None]

    min_heap = []
    for i, num in enumerate(arr):
        heapq.heappush(min_heap, (num, i))

    smallest = heapq.heappop(min_heap)
    if smallest[0] == arr[0]:
        return [smallest[0], smallest[1]]
    return [smallest[0], smallest[1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,5,normal,"['367', '342', '893', 'HumanEval/105', 'HumanEval/113']","def pluck_smallest(arr):
    if not arr:
        return None
    smallest = min(arr)
    smallest_index = arr.index(smallest)
    return [smallest, smallest_index]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['367', '342', '893', 'HumanEval/105', 'HumanEval/113', '94', '322', '472', '896', '843']","class TreeNode:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index

def get_height(node):
    if node is None:
        return 0
    return max(get_height(node.left), get_height(node.right)) + 1

def is_tree_balanced(node):
    if node is None:
        return True
    var_3 = get_height(node.left)
    var_4 = get_height(node.right)
    if abs(var_3 - var_4) <= 1 and is_tree_balanced(node.left) and is_tree_balanced(node.right):
        return True
    return False

def func_0(var_0):
    if not var_0:
        return True
    if is_tree_balanced(var_0.left) and is_tree_balanced(var_0.right):
        return False
    return func_0(var_0.left) and func_0(var_0.right)

def pluck_smallest_indexed_node(var_0):
    if not var_0:
        return None
    smallest = var_0[0]
    for var_1 in var_0:
        if var_1.value < smallest.value:
            smallest = var_1
    return smallest

def pluck_smallest_indexed_node(var_0):
    if not var_0:
        return None
    smallest = var_0[0]
    for var_1 in var_0:
        if var_1.value < smallest.value:
            smallest = var_1
    return smallest

def pluck_smallest_indexed_node(var_0):
    if not var_0:
        return None
    smallest = var_0[0]
    for var_1 in var_0:
        if var_1.value < smallest.value:
            smallest = var_1
    return smallest

def pluck_smallest_indexed_node(var_0):
    if not var_0:
        return None
    smallest = var_0[0]
    for var_1 in var_0:
        if var_1.value < smallest.value:
            smallest = var_1
    return smallest

def pluck_smallest_indexed_node(var_0):
    if not var_0:
        return None
    smallest = var_0[0]
    for var_1 in var_0:
        if var_1.value <",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 69)', 'completion_id': 0})]})"
69,HumanEval/69,0,normal,[],"from collections import Counter

def search(lst):
    counter = Counter(lst)
    for num in sorted(counter.keys(), reverse=True):
        if counter[num] >= num and num > 0:
        return num
    return -1",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'if' statement on line 6 (<string>, line 7)"", 'completion_id': 0})]})"
69,HumanEval/69,1,normal,['613'],"def search(lst):
    """"""
    This function checks if there is any integer in the list that is greater than the count of its occurrences.
    
    Parameters:
    lst (list): A list of integers.
    
    Returns:
    int: -1 if no such integer exists, otherwise the integer.
    """"""
    count_dict = {}
    for num in lst:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
    for num, count in count_dict.items():
        if num > count:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['613', 'HumanEval/59', '329', '342', '285']","import re

def search(lst):
    count = {}
    for num in lst:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    for num, freq in count.items():
        if freq > 1:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['613', 'HumanEval/59', '329', '342', '285', '66', 'HumanEval/39', '27', 'HumanEval/26', '787']","from collections import Counter

def search(lst):
    count = Counter(lst)
    return [key for key, value in count.items() if value > 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,0,normal,[],"def strange_sort_list(lst):
    if not lst:
        return []
    result = [min(lst)]
    lst.remove(min(lst))
    while lst:
        result.append(max(lst))
        lst.remove(max(lst))
        if lst:
            result.append(min(lst))
            lst.remove(min(lst))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['HumanEval/34'],"import numpy as np

def sorted_list(lst):
    return sorted(list(set(lst)))",0.0,entry point not found
70,HumanEval/70,5,normal,"['HumanEval/34', 'HumanEval/33', '472', 'HumanEval/57', 'HumanEval/58']","def sorted_list(lst):
    return sorted(lst)",0.0,entry point not found
70,HumanEval/70,10,normal,"['HumanEval/34', 'HumanEval/33', '472', 'HumanEval/57', 'HumanEval/58', '896', 'HumanEval/116', 'HumanEval/158', 'HumanEval/105', 'HumanEval/104']","def sorted_list(var_0):
    return sorted(var_0)",0.0,entry point not found
71,HumanEval/71,0,normal,[],"import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,1,normal,['826'],"import math

def triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    if sides[0] + sides[1] > sides[2]:
        return ""Valid Triangle""
    elif sides[0] == sides[1] == sides[2]:
        return ""Equilateral Triangle""
    elif sides[0] == sides[1] or sides[1] == sides[2]:
        return ""Isosceles Triangle""
    else:
        return ""Scalene Triangle""

def triangle_area(a, b, c):
    s = (a + b + c) / 2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return area",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,5,normal,"['826', '519', '738', '180', '835']","import math

def triangle_type(a, b, c):
    sides = [a, b, c]
    sides.sort()
    if sides[0] + sides[1] <= sides[2]:
        return ""Invalid triangle""
    elif sides[0] == sides[1] == sides[2]:
        return ""Equilateral triangle""
    elif sides[0] == sides[1] or sides[1] == sides[2]:
        return ""Isosceles triangle""
    else:
        return ""Scalene triangle""

def triangle_area(a, b, c):
    s = (a + b + c) / 2
    return math.sqrt(s * (s - a) * (s - b) * (s - c))

def is_right_angled(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return sides[0]**2 + sides[1]**2 == sides[2]**2

def triangle_properties(a, b, c):
    return {
        ""type"": triangle_type(a, b, c),
        ""area"": triangle_area(a, b, c),
        ""is_right_angled"": is_right_angled(a, b, c)
    }",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['826', '519', '738', '180', '835', '742', 'HumanEval/77', '830', 'HumanEval/71', '497']","import math

def triangle_area(a, b, c):
    # Check if the sides form a valid triangle
    if a + b <= c or a + c <= b or b + c <= a:
        return ""Invalid triangle""
    
    # Calculate the semi-perimeter
    s = (a + b + c) / 2
    
    # Calculate the area using Heron's formula
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    
    return area

def triangle_properties(a, b, c):
    # Check if the triangle is valid
    if a + b <= c or a + c <= b or b + c <= a:
        return ""Invalid triangle""
    
    # Calculate the area
    area = triangle_area(a, b, c)
    
    # Calculate the semi-perimeter
    s = (a + b + c) / 2
    
    # Calculate the circumradius
    R = (a * b * c) / (4 * area)
    
    # Calculate the inradius
    r = area / s
    
    # Calculate the height
    h = 2 * area / a
    
    return R, r, h

def triangle_description(a, b, c):
    # Check if the triangle is valid
    if a + b <= c or a + c <= b or b + c <= a:
        return ""Invalid triangle""
    
    # Calculate the semi-perimeter
    s = (a + b + c) / 2
    
    # Calculate the area using Heron's formula
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    
    # Determine the type of triangle
    if a == b == c:
        return ""Equilateral triangle""
    elif a == b or b == c or a == c:
        return ""Isosceles triangle""
    else:
        return ""Scalene triangle""

def triangle_color(a, b, c):
    # Check if the triangle is valid
    if a + b <= c or a + c <= b or b + c <= a:
        return ""Invalid triangle""
    
    # Determine the color based on the side lengths
    if a == b == c:
        return ""Red""
    elif a == b or b == c or a == c:
        return ""Blue""
    else",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected ':' (<string>, line 67)"", 'completion_id': 0})]})"
72,HumanEval/72,0,normal,[],"def will_it_fly(q, w):
    return q == q[::-1] and sum(q) <= w",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['121'],"def will_it_fly(cards, max_weight):
    """"""
    Checks if a set of cards will fly given their weights and the maximum weight limit.
    
    Args:
    cards (list): A list of integers representing the weights of the cards.
    max_weight (int): The maximum weight limit.
    
    Returns:
    bool: True if the cards will fly, False otherwise.
    """"""
    def is_palindrome(lst):
        return lst == lst[::-1]
    
    def can_fly(cards, max_weight):
        if not is_palindrome(cards):
            return False
        return sum(cards) <= max_weight)
    
    return can_fly(cards, max_weight)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: unmatched ')' (<string>, line 18)"", 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['121', '433', 'HumanEval/0', 'HumanEval/32', '123']","def will_it_fly(q, w):
    if sorted(q) == q and sum(q) <= w:
        return True
    else:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,10,normal,"['121', '433', 'HumanEval/0', 'HumanEval/32', '123', '485', '650', 'HumanEval/57', '367', '916']","def will_it_fly(q, w):
    q.sort()
    if q == q[::-1] and sum(q) <= w:
        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,0,normal,[],"from collections import Counter

def smallest_change(arr):
    count = Counter(arr)
    freq = sum(val % 2 for val in count.values())
    return max(0, freq - 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,1,normal,['364'],"def func_1(str):
    return min(get_flip_with_starting_charcter(str, '0'), get_flip_with_starting_charcter(str, '1'))

def get_flip_with_starting_charcter(str, char):
    count = 0
    for i in range(len(str)):
        if str[i]!= char:
            count += 1
    return count",0.0,entry point not found
73,HumanEval/73,5,normal,"['364', '410', '322', '875', 'HumanEval/105']","def func_0(var_0):
    var_1 = min(var_0)
    var_2 = [i for i, var_3 in enumerate(var_0) if var_3 == var_1]
    return var_2",0.0,entry point not found
73,HumanEval/73,10,normal,"['364', '410', '322', '875', 'HumanEval/105', '433', '947', '371', '94', '95']","from collections import Counter

def smallest_missing(arr):
    count = Counter(arr)
    i = 1
    while True:
        if count[i] == 0:
            return i
        i += 1",0.0,entry point not found
74,HumanEval/74,0,normal,[],"def total_match(lst1, lst2):
    sum1 = sum(len(s) for s in lst1)
    sum2 = sum(len(s) for s in lst2)
    if sum1 < sum2:
        return lst1
    elif sum1 > sum2:
        return lst2
    else:
        return lst1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['186'],"import re

def solve_problem(lst1, lst2):
    result = []
    for s1 in lst1:
        for s2 in lst2:
            if re.search(s1, s2):
                result.append((s1, s2))
    return result",0.0,entry point not found
74,HumanEval/74,5,normal,"['186', '178', 'HumanEval/7', '18', '285']","import re

def func_0(lst1, lst2):
    return (len(''.join(lst1)), len(''.join(lst2)))",0.0,entry point not found
74,HumanEval/74,10,normal,"['186', '178', 'HumanEval/7', '18', '285', '352', 'HumanEval/29', '298', 'HumanEval/26', '917']","import re

def func_0(lst1, lst2):
    return [x for x in lst1 if x in lst2]",0.0,entry point not found
75,HumanEval/75,0,normal,[],"import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, int(math.sqrt(a)) + 1):
        if a % i == 0:
            a //= i
            if is_prime(i) and is_prime(a // i) and is_prime(a):
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"import math

def is_multiply_of_primes(n):
    def is_prime(num):
        if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

    for i in range(2, n):
        if n % i == 0 and is_prime(i):
            return True
    return False",0.0,entry point not found
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/127', 'HumanEval/39', '260']","def is_multiply_of_primes(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(2, n):
        if is_prime(i):
            for j in range(2, n):
                if is_prime(j):
                    for k in range(2, n):
                        if is_prime(k) and i * j * k == n:
                            return True
    return False",0.0,entry point not found
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/127', 'HumanEval/39', '260', '121', 'HumanEval/94', '884', '677', '228']","def is_multiply_of_primes(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = [i for i in range(2, n + 1) if is_prime(i)]
    for i in range(len(primes)):
        for j in range(i, len(primes)):
            for k in range(j, len(primes)):
                if primes[i] * primes[j] * primes[k] == n:
                    return True
    return False",0.0,entry point not found
76,HumanEval/76,0,normal,[],"import math

def is_power(x, n):
    if x < 1 or n < 2:
        return False
    log_x = math.log(x, n)
    return math.isclose(log_x, round(log_x))",0.0,entry point not found
76,HumanEval/76,1,normal,['HumanEval/59'],"import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def is_simple_power(n):
    if n < 2:
        return False
    for base in range(2, n):
        power = 1
        while power <= n:
            if power == n:
                return True
            power *= base
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,5,normal,"['HumanEval/59', 'HumanEval/75', '600', 'HumanEval/39', '93']","import math

def is_prime(var_0: int):
    if var_0 < 2:
        return False
    for var_1 in range(2, int(math.sqrt(var_0)) + 1, var_0 - 1):
        if var_0 % var_1 == 0:
            return False
    return True

def func_0(var_0: int):
    treasures = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]
    random_numbers = [random.randint(1, 100) for _ in range(5)]
    treasures.extend(random_numbers)
    treasures.sort()
    return treasures",0.0,entry point not found
76,HumanEval/76,10,normal,"['HumanEval/59', 'HumanEval/75', '600', 'HumanEval/39', '93', '887', 'HumanEval/127', '900', '121', '762']","import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def func_0(var_0, var_1):
    treasures = [var_0]
    for i in range(2, var_1 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_1(var_0):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_2(var_0, var_1):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_3(var_0):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_4(var_0):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_5(var_0, var_1):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_6(var_0):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_7(var_0, var_1):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_8(var_0):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_9(var_0, var_1, var_2, var_3):
    treasures = []
    for i in range(2, var_0 + 1):
        if is_prime(i):
            treasures.append(i)
    return treasures

def func_10",0.0,entry point not found
77,HumanEval/77,0,normal,[],"import math

def iscube(a):
    root = round(math.pow(abs(a), 1/3))
    return root ** 3 == abs(a)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['762'],"import math

def is_cube(var_0):
    cube_root = round(math.pow(var_0, 1/3))
    return cube_root ** 3 == var_0",0.0,entry point not found
77,HumanEval/77,5,normal,"['762', '121', 'HumanEval/39', '123', '900']","import math

def is_cube(n):
    root = round(n ** (1. / 3))
    return root ** 3 == n",0.0,entry point not found
77,HumanEval/77,10,normal,"['762', '121', 'HumanEval/39', '123', '900', 'HumanEval/59', '887', 'HumanEval/75', '600', 'HumanEval/127']","import math

def is_cube(n):
    cube_root = round(n ** (1. / 3))
    return cube_root ** 3 == n

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def is_perfect_cube(n):
    return is_cube(n) and is_prime(n)

def func_0(n):
    return is_perfect_cube(n)",0.0,entry point not found
78,HumanEval/78,0,normal,[],"def hex_key(num):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    prime_hex = '23B7D'
    count = 0
    for char in num:
        if char in prime_hex:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,1,normal,['HumanEval/162'],"def hex_key(num):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    prime_hex = {'2': True, '3': True, '5': True, '7': True, 'B': True, 'D': True}
    count = 0
    for char in num:
        if char in prime_hex:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['HumanEval/162', '260', 'HumanEval/39', '406', 'HumanEval/19']","def hex_capture(num):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    count = 0
    for char in num:
        if char in ['2', '3', '5', '7', 'B', 'D']:
            count += 1
    return count",0.0,entry point not found
78,HumanEval/78,10,normal,"['HumanEval/162', '260', 'HumanEval/39', '406', 'HumanEval/19', '387', 'HumanEval/11', 'HumanEval/59', 'HumanEval/75', '39']","def hex_capture(num):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    primes = {'2': True, '3': True, '3': True, '5': True, '7': True, 'B': True, 'D': True}
    count = 0
    for char in num:
        if char in primes:
            count += 1
    return count",0.0,entry point not found
79,HumanEval/79,0,normal,[],"def decimal_to_binary(decimal):
    return ""db"" + bin(decimal)[2:] + ""db""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,1,normal,['99'],"def decimal_to_binary(decimal):
    return bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['99', 'HumanEval/84', 'HumanEval/79', '406', '53']","def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['99', 'HumanEval/84', 'HumanEval/79', '406', '53', '218', '735', 'HumanEval/99', '928', '877']","def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,0,normal,[],"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] == s[i+2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['523'],"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if len(set(s[i:i+3]))!= 3:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,5,normal,"['523', '53', '823', '482', 'HumanEval/64']","def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] == s[i+2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['523', '53', '823', '482', 'HumanEval/64', '352', '192', '917', '285', '822']","def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] == s[i+2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,0,normal,[],"def numerical_letter_grade(grades):
    letter_grades = {
        'A+': 4.0, 'A': 3.7, 'A-': 3.3, 'B+': 3.0, 'B': 2.7, 'B-': 2.3,
        'C+': 2.0, 'C': 1.7, 'C-': 1.3, 'D+': 1.0, 'D': 0.7, 'D-': 0.0, 'E': 0.0
    }
    result = []
    for g in grades:
        for grade, gpa in letter_grades.items():
            if g >= gpa:
                result.append(grade)
                break
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def numerical_letter_grade(grades):
    letter_grades = {
        4.0: 'A+', 
        3.7: 'A', 
        3.3: 'A-', 
        3.0: 'B+', 
        2.7: 'B', 
        2.3: 'B-', 
        2.0: 'C+', 
        1.7: 'C', 
        1.3: 'C-', 
        1.0: 'D+', 
        0.7: 'D', 
        0.0: 'D-' 
    }
    return [letter_grades.get(gpa, 'E') for gpa in sorted(set(grades))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,5,normal,"['HumanEval/81', 'HumanEval/21', 'HumanEval/105', '433', 'HumanEval/0']","def numerical_letter_grade(grades):
    letter_grades = {
        4.0: 'A+', 
        (3.7, float('inf')): 'A', 
        (3.3, 3.7): 'A-', 
        (3.0, 3.3): 'B+', 
        (2.7, 3.0): 'B', 
        (2.3, 2.7): 'B-', 
        (2.0, 2.3): 'C+', 
        (1.7, 2.0): 'C', 
        (1.3, 1.7): 'C-', 
        (1.0, 1.3): 'D+', 
        (0.7, 1.0): 'D', 
        (0.0, 0.7): 'D-', 
        (0.0, 0.0: 0.0, 0.0): 'E'
    }
    result = []
    for grade in grades:
        for threshold, letter in letter_grades.items():
            if isinstance(threshold, tuple):
                if grade > threshold[0] and grade <= threshold[1]:
                    result.append(letter)
                    break
            else:
                if grade >= threshold:
                    result.append(letter)
                    break
        else:
            result.append('Invalid grade')
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 15)', 'completion_id': 0})]})"
81,HumanEval/81,10,normal,"['HumanEval/81', 'HumanEval/21', 'HumanEval/105', '433', 'HumanEval/0', 'HumanEval/32', 'HumanEval/25', 'HumanEval/19', 'HumanEval/20', 'HumanEval/87']","def letter_grade(grades):
    letter_grades = {
        4.0: 'A+', 
        3.7: 'A', 
        3.3: 'A-', 
        3.0: 'B+', 
        2.7: 'B', 
        2.3: 'B-', 
        2.0: 'C+', 
        1.7: 'C', 
        1.3: 'C-', 
        1.0: 'D+', 
        0.7: 'D', 
        0.0: 'E'
    }
    return [letter_grades.get(round(g, 1), 'Invalid GPA') for g in grades]",0.0,entry point not found
82,HumanEval/82,0,normal,[],"def prime_length(s):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    return prime_length(len(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,1,normal,['523'],"def prime_length(s):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    return is_prime(len(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['523', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39', 'HumanEval/127']","def prime_length(s):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    return is_prime(len(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,10,normal,"['523', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39', 'HumanEval/127', '192', '352', '70', 'HumanEval/94', 'HumanEval/134']","def prime_length(s):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    return is_prime(len(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,0,normal,[],"def starts_one_ends(n):
    return 9 * (10 ** (n - 2)) + 10 ** (n - 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,1,normal,['211'],"def starts_one_ends(n):
    return 9 * (10 ** (n - 2)) + 10 ** (n - 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,5,normal,"['211', '109', 'HumanEval/26', '278', '671']","def starts_one_ends(n):
    return 9 * (10 ** (n - 2)) + 10",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,10,normal,"['211', '109', 'HumanEval/26', '278', '671', '572', '929', 'HumanEval/113', '813', '781']","def starts_one_ends(n):
    return 9 * (10 ** (n - 2)) + 10 * (10 ** (n - 1)) - 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,0,normal,[],"def solve(N):
    return bin(N)[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,1,normal,['148'],"def sum_digits(n):
    return sum(int(digit) for digit in str(n))",0.0,entry point not found
84,HumanEval/84,5,normal,"['148', '566', '398', 'HumanEval/84', 'HumanEval/32']","def sum_digits(n):
    return sum(int(digit) for digit in str(n))",0.0,entry point not found
84,HumanEval/84,10,normal,"['148', '566', '398', 'HumanEval/84', 'HumanEval/32', 'HumanEval/108', 'HumanEval/60', '959', '23', 'HumanEval/94']","def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))",0.0,entry point not found
85,HumanEval/85,0,normal,[],"def add(lst):
    return sum(num for i, num in enumerate(lst) if i % 2!= 0 and num % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['HumanEval/113'],"def func_0(var_0):
    return ['the number of even elements'+ str(var_2) +'in the input.' for var_2 in var_0 if int(var_2) % 2 == 0]",0.0,entry point not found
85,HumanEval/85,5,normal,"['HumanEval/113', '781', 'HumanEval/26', 'HumanEval/25', '342']","def func_0(var_0):
    return [var_2 for var_2 in var_0 if var_2 % 2 == 0]",0.0,entry point not found
85,HumanEval/85,10,normal,"['HumanEval/113', '781', 'HumanEval/26', 'HumanEval/25', '342', '134', '500', '329', '696', '66']","def func_0(var_0):
    return [var_1 for var_1 in var_0 if var_1 % 2 == 0]",0.0,entry point not found
86,HumanEval/86,0,normal,[],"def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['374'],"def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['374', '877', '53', 'HumanEval/105', 'HumanEval/64']","def anti_shuffle(s):
    return ''.join(sorted(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['374', '877', '53', 'HumanEval/105', 'HumanEval/64', 'HumanEval/27', 'HumanEval/51', '823', '364', '896']","def anti_shuffle(s):
    return ''.join(sorted(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,0,normal,[],"def get_row(lst, x):
    result = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    result.sort(key=lambda tup: (tup[0], -tup[1]))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['215'],"def get_row(lst, x):
    result = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                result.append((i, j))
    result.sort(key=lambda x: (x[0], -x[1]))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,5,normal,"['215', '282', 'HumanEval/17', 'HumanEval/21', 'HumanEval/7']","def get_row(lst, x):
    :
    result = []
    for i, row in enumerate(lst):
        if x in row:
            j = row.index(x)
            result.append((i, j))
    result.sort(key=lambda x: (x[0], -x[1]))
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 2)', 'completion_id': 0})]})"
87,HumanEval/87,10,normal,"['215', '282', 'HumanEval/17', 'HumanEval/21', 'HumanEval/7', 'HumanEval/5', 'HumanEval/29', '749', '682', '308']","def get_row(lst, x):
    return sorted([(i, j) for i, row in enumerate(lst) for lst in lst if lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: closing parenthesis ')' does not match opening parenthesis '[' (<string>, line 2)"", 'completion_id': 0})]})"
88,HumanEval/88,0,normal,[],"def sort_array(array):
    if not array:
        return array

    first_index = array[0]
    last_index = array[-1]
    sum_first_last = first_index + last_index

    if sum_first_last % 2 == 0:
        return sorted(array, reverse=True)
    else:
        return sorted(array)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,1,normal,['12'],"def sort_array(array):
    if not array:
        return array

    first_index_value = array[0]
    last_index_value = array[-1]

    if (first_index_value + last_index_value) % 2 == 0:
        return sorted(array, reverse=True)
    else:
        return sorted(array)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['12', '433', 'HumanEval/145', 'HumanEval/34', '896']","def sort_array(array):
    if len(array) == 0:
        return array
    first_index_value = array[0]
    last_index_value = array[-1]
    sum_of_first_and_last = first_index_value + last_index_value
    if sum_of_first_and_last % 2 == 0:
            return sorted(array, reverse=True)
        else:
            return sorted(array)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: unindent does not match any outer indentation level (<string>, line 9)', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['12', '433', 'HumanEval/145', 'HumanEval/34', '896', 'HumanEval/105', '340', 'HumanEval/104', '472', 'HumanEval/123']","def sort_array(array):
    if len(array) == 0:
        return array
    if sum(array[0], array[-1]) % 2 == 0:
        return sorted(array)
    else:
        return sorted(array, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,0,normal,[],"def encrypt(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    shifted_alphabet = alphabet[2:] + alphabet[:2]
    table = str.maketrans(alphabet + alphabet.upper(), shifted_alphabet + shifted_alphabet.upper())
    return s.translate(table)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,1,normal,['HumanEval/162'],"def encrypt(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    shifted_alphabet = alphabet[2:] + alphabet[:2]
    table = str.maketrans(alphabet, shifted_alphabet)
    return s.translate(table)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/162', '374', 'HumanEval/64', '523', '933']","def encrypt(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    shifted_alphabet = alphabet[2:] + alphabet[:2]
    table = str.maketrans(alphabet + alphabet.upper(), shifted_alphabet + shifted_alphabet.upper())
    return s.translate(table)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/162', '374', 'HumanEval/64', '523', '933', 'HumanEval/38', '192', '965', 'HumanEval/50', '364']","def encrypt(s):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    shifted_alphabet = alphabet[2:] + alphabet[:2]
    table = str.maketrans(alphabet, shifted_alphabet)
    return s.translate(table)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,0,normal,[],"def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst.sort()
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['410'],"def next_smallest(lst):
    if not lst or len(lst) < 2:
        return None
    lst = sorted(set(lst))
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['410', '322', '947', '62', '94']","from typing import List, Optional

def next_smallest(lst: List[int]) -> Optional[int]:
    if not lst:
        return None
    if len(set(lst))!= len(lst):
        return None
    return sorted(lst)[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['410', '322', '947', '62', '94', '95', '342', '329', '457', '66']","from typing import List, Optional

def next_smallest(lst: List[int]) -> Optional[int]:
    if len(lst) < 2:
        return None
    lst.sort()
    for i in range(1, len(lst)):
        if lst[i]!= lst[i - 1]:
            return lst[i]
    return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,0,normal,[],"import re

def is_bored(S):
    return len(re.findall(r'I[^\.\?\!]*[\.\?\!]', S))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"import re

def is_bored(var_0):
    var_1 = re.split('[.?!]\\s*', var_0)
    return sum((sentence.startswith('I ') for sentence in var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '172', '684', '570', '823']","import re

def is_bored(var_0):
    var_1 = re.split('[.?!]\\s*', var_0)
    return sum((sentence.startswith('I ') for sentence in var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '172', '684', '570', '823', '159', 'HumanEval/98', '365', 'HumanEval/113', '572']","import re

def is_bored(var_0):
    var_1 = re.split('[.?!]\\s*', var_0)
    return sum((sentence[0:2] == 'I'for sentence in var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,0,normal,[],"def any_int(x, y, z):
    return (x + y == z or x + z == y or y + z == x) and all(isinstance(i, int) for i in [x, y, z])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['121'],"def any_int(x, y, z):
    return (x + y == z or x + z == y or y + z == x) and all(isinstance(i, int) for i in [x, y, z])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['121', '916', '541', 'HumanEval/94', 'HumanEval/39']","def any_int(x, y, z):
    return (x + y == z or x + z == y or y + z == x) and all(isinstance(i, int) for i in [x, y, z])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['121', '916', '541', 'HumanEval/94', 'HumanEval/39', '398', 'HumanEval/72', '598', '481', 'HumanEval/92']","def any_int(x, y, z):
    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and 
            (x + y == z or x + z == y or y + z == x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,0,normal,[],"def encode(message):
    vowels = 'aeiouAEIOU'
    result = ''
    for char in message:
        if char in vowels:
            index = (ord(char) - ord('a') + 2) % 6
            if char.isupper():
                result += chr(ord('A') + index)
            else:
                result += chr(ord('a') + index)
        elif char.isupper():
            result += chr(ord('A') - ord(char) + ord('a'))
        else:
            result += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/38'],"def encode(message):
    vowels = 'aeiouAEIOU'
    result = ''
    for char in message:
        if char in vowels:
            new_char = chr(ord(char) + 2)
            if new_char in vowels:
                new_char = chr(ord(new_char) - 26)
            result += new_char
        else:
            result += chr(ord(char) ^ 32)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,5,normal,"['HumanEval/38', 'HumanEval/64', 'HumanEval/51', 'HumanEval/93', '523']","def encode(message):
    vowels = 'aeiouAEIOU'
    return ''.join([c.swapcase() if c not in vowels else chr(ord(c) + 2) for c in message])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,10,normal,"['HumanEval/38', 'HumanEval/64', 'HumanEval/51', 'HumanEval/93', '523', 'HumanEval/118', '748', '459', '478', '495']","def encode(message):
    vowels = 'aeiouAEIOU'
    encoded_message = ''
    for char in message:
        if char in vowels:
            index = ord(char) + 2
            if char.isupper():
                encoded_message += chr(index).upper()
            else:
                encoded_message += chr(index)
        else:
            encoded_message += char.swapcase()
    return encoded_message",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,0,normal,[],"import math

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max([num for num in lst if is_prime(num)])
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,1,normal,['HumanEval/94'],"def isPrime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def func_0(lst):
    max_prime = 0
    for num in lst:
        if isPrime(abs(int(lst[lst.index(max_prime)]))):
            max_prime = abs(int(lst[lst.index(max_prime)]))
    return sum(int(digit) for digit in str(max_prime))",0.0,entry point not found
94,HumanEval/94,5,normal,"['HumanEval/94', 'HumanEval/59', '260', '805', '342']","import heapq

class Node:
    def __init__(self, value, list_num, index):
        self.value = value
        self.list_num = list_num
        self.index = index

    def __lt__(self, other):
        return self.value < other.value

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def func_0(lst):
    pq = []
    for i in range(len(lst)):
        heapq.heappush(pq, Node(lst[i], i, 0))
    max_prime = 0
    while pq:
        top = heapq.heappop(pq)
        low = top.value
        i = top.list_num
        j = top.index
        if is_prime(low) and low > max_prime:
            max_prime = low
        if j == len(lst[i]) - 1:
            break
        heapq.heappush(pq, Node(lst[i][j + 1], i, j + 1))
    return sum(int(digit) for digit in str(max_prime))",0.0,entry point not found
94,HumanEval/94,10,normal,"['HumanEval/94', 'HumanEval/59', '260', '805', '342', 'HumanEval/39', '566', 'HumanEval/4', '148', 'HumanEval/32']","import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def sum_digits_single(n):
    return sum(int(digit) for digit in str(n))

def sum_of_largest_prime_digits(lst):
    max_prime = max([num for num in lst if is_prime(num)])
    return sum_digits_single(max_prime)",0.0,entry point not found
95,HumanEval/95,0,normal,[],"def check_dict_case(dict):
    if not dict:
        return False
    keys = list(dict.keys())
    all_lower = all(key.islower() for key in keys)
    all_upper = all(key.isupper() for key in keys)
    return all_lower or all_upper",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    else:
        var_0 ='start'
        for var_1 in dict.keys():
            if isinstance(var_1, str) == False:
                return False
            if var_0 =='start':
                if var_1.isupper():
                    var_0 = 'upper'
                elif var_1.islower():
                    var_0 = 'lower'
                else:
                    return False
            elif var_0 == 'upper' and (not var_1.isupper()) or (var_0 == 'lower' and (not var_1.islower())):
                return False
            else:
                break
        return var_0 == 'upper' or var_0 == 'lower'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,5,normal,"['HumanEval/95', '523', '277', '771', '352']","def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    else:
        var_0 ='start'
        for var_1 in dict.keys():
            if isinstance(var_1, str) == False:
                return False
            if var_0 =='start':
                if var_1.isupper():
                    var_0 = 'upper'
                elif var_1.islower():
                    var_0 = 'lower'
                else:
                    return False
        return var_0 == 'upper' or var_0 == 'lower'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,10,normal,"['HumanEval/95', '523', '277', '771', '352', '53', '464', '833', 'HumanEval/0', 'HumanEval/27']","def check_dict_case(dict):
    if len(dict.keys()) == 0:
        return False
    var_0 ='start'
    for var_1 in dict.keys():
        if isinstance(var_1, str) == False:
            return False
        if var_0 =='start':
            if var_1.isupper():
                var_0 = 'upper'
            elif var_1.islower():
                var_0 = 'lower'
            else:
                return False
        elif var_0 == 'upper' and not var_1.isupper() or var_0 == 'lower' and not var_1.islower():
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,0,normal,[],"import math

def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    primes = [i for i in range(2, n) if is_prime(i)]
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,1,normal,['260'],"def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
        if len(primes) == n - 1:
            break
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['260', 'HumanEval/39', 'HumanEval/59', 'HumanEval/26', 'HumanEval/75']","def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    num = 2
    while len(primes) < n:
        if is_prime(num) and num < n:
            primes.append(num)
        num += 1
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['260', 'HumanEval/39', 'HumanEval/59', 'HumanEval/26', 'HumanEval/75', '433', '810', '342', '211', 'HumanEval/146']","from typing import List

def count_up_to(n: int) -> List[int]:
    def is_prime(num: int) -> bool:
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    num = 2
    while len(primes) < n:
        if is_prime(num) and num < n:
            primes.append(num)
        num += 1
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,0,normal,[],"def multiply(a, b):
    return (a % 10) * (b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['566'],"def multiply(a, b):
    return (a % 10) * (b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['566', '905', '621', 'HumanEval/67', '127']","def multiply(a, b):
    return (a % 10) * (b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['566', '905', '621', 'HumanEval/67', '127', '148', '293', '581', '55', '260']","def multiply(a, b):
    return (a % 10) * (b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,0,normal,[],"def count_upper(s):
    vowels = 'AEIOU'
    count = 0
    for i, char in enumerate(s):
        if char in vowels and i % 2 == 0 and char.isupper():
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['HumanEval/64'],"def count_upper(s):
    vowels = ""AEIOU""
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['HumanEval/64', 'HumanEval/98', 'HumanEval/66', '523', '172']","def count_upper(s):
    vowels = ""AEIOU""
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['HumanEval/64', 'HumanEval/98', 'HumanEval/66', '523', '172', '624', 'HumanEval/113', '684', '781', '387']","def count_upper(s):
    vowels = ""AEIOU""
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,0,normal,[],"import math

def closest_integer(value):
    return math.ceil(float(value) - 0.5) if float(value) >= 0 else math.floor(float(value) + 0.5)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"import math

def closest_integer(value):
    num = float(value)
    if num % 1 == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '739', '830', '519', 'HumanEval/103']","import math

def closest_integer(value):
    value = float(value)
    if value == int(value):
        return int(value)
    elif value % 1 == 0.5:
        return int(round(value)) if value > 0 else -int(round(value))
    else:
        return round(value)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '739', '830', '519', 'HumanEval/103', '148', '531', 'HumanEval/39', '851', '671']","import math

def closest_integer(var_0):
    var_1 = float(var_0)
    if var_0[-2:] == '.5':
        if var_1 > 0:
            var_2 = math.ceil(var_1)
        else:
            var_2 = math.floor(var_1)
    else:
        var_2 = round(var_1)
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,0,normal,[],"def make_a_pile(n):
    result = [n]
    i = n + (1 if n % 2 else 2)
    while len(result) < n:
        if i % 2:
            result.append(i)
        else:
            result.append(i + 1)
        i += 2
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/113'],"def make_a_pile(n):
    result = [n]
    for i in range(1, n):
        if n % 2 == 1:
            result.append(n + 2)
            n += 2
        else:
            result.append(n + 2)
            n += 2
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/113', '843', 'HumanEval/26', '108', '342']","def make_a_pile(n):
    result = [n]
    i = 1
    while n > 1:
        n = n + 1 if n % 2 else n + 2
        result.append(n)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/113', '843', 'HumanEval/26', '108', '342', 'HumanEval/32', '31', 'HumanEval/105', '949', '810']","def make_a_pile(n):
    result = []
    level = n
    while len(result) < n:
        result.append(level)
        if level % 2 == 0:
            level += 2
        else:
            level += 1
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,0,normal,[],"import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/19'],"import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/19', 'HumanEval/17', '374', '523', '570']","def words_string(s):
    return s.replace(',','').split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/19', 'HumanEval/17', '374', '523', '570', '18', '823', 'HumanEval/6', 'HumanEval/105', '247']","def words_string(s):
    return s.replace(',','').split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,0,normal,[],"def choose_num(x, y):
    if x % 2!= 0 and y % 2!= 0:
        return -1
    return max(i for i in range(x, y+1) if i % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['781'],"import math

def choose_num(x, y):
    if x % 2!= 0 and y % 2!= 0:
        return -1
    else:
        return max(i for i in range(x, y + 1) if i % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['781', '433', '218', '873', '158']","import math

def choose_num(x, y):
    if x % 2!= 0 and y % 2!= 0:
        return -1
    elif x % 2 == 0:
        return x
    else:
        return y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['781', '433', '218', '873', '158', '583', '621', '671', '134', '359']","import math

def choose_num(x, y):
    if x % 2 == 0 and y % 2 == 0:
        return max(x, y)
    elif x % 2 == 0:
        return x
    elif y % 2 == 0:
        return y
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,0,normal,[],"import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = math.floor((n + m) / 2)
    rounded_avg = round((n + m) / 2)
    return bin(rounded_avg)[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['717'],"import math

def rounded_avg(n, m):
    if n > m:
        return -1
    total = sum(range(n, m+1))
    avg = total / (m - n + 1)
    return bin(round(avg))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['717', '851', '830', 'HumanEval/103', '739']","import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = round((n + m) / 2)
    return bin(avg)[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['717', '851', '830', 'HumanEval/103', '739', '519', '638', '422', 'HumanEval/77', 'HumanEval/71']","import math

def rounded_avg(n, m):
    if n > m:
        return -1
    total = sum(range(n, m + 1))
    avg = total / (m - n + 1)
    return bin(round(avg))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,0,normal,[],"def unique_digits(x):
    def has_even_digit(n):
        return any(int(digit) % 2 == 0 for digit in str(n))

    return sorted([num for num in x if not has_even_digit(num)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['406'],"def unique_digits(x):
    def has_even_digit(n):
        while n:
            digit = n % 10
            if digit % 2 == 0:
                return True
            n //= 10
        return False

    return sorted([num for num in x if not has_even_digit(num)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,5,normal,"['406', '781', 'HumanEval/116', '749', 'HumanEval/113']","def unique_digits(x):
    def has_even_digit(n):
        return any(int(digit) % 2 == 0 for digit in str(n))
    
    return sorted([num for num in x if not has_even_digit(num)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,10,normal,"['406', '781', 'HumanEval/116', '749', 'HumanEval/113', '27', 'HumanEval/105', 'HumanEval/158', 'HumanEval/34', '15']","def unique_digits(x):
    def has_even_digit(n):
        return any(int(digit) % 2 == 0 for digit in str(n))
    
    return sorted([num for num in x if not has_even_digit(num)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,0,normal,[],"import numpy as np

def by_length(arr):
    arr = np.array(arr)
    mask = (arr >= 1) & (arr <= 9)
    arr = arr[mask]
    arr = np.sort(arr)
    arr = arr[::-1]
    digit_names = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    return [digit_names[i] for i in arr]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,1,normal,['HumanEval/105'],"def by_length(arr):
    digit_names = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    sorted_arr = sorted([num for num in arr if 1 <= num <= 9], reverse=True)
    return [digit_names[num] for num in sorted_arr]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,5,normal,"['HumanEval/105', 'HumanEval/88', '433', 'HumanEval/19', '27']","import re

def by_length(arr):
    var_1 = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    arr = sorted([i for i in arr if 1 <= i <= 9], reverse=True)
    return [var_1[i] for i in arr]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,10,normal,"['HumanEval/105', 'HumanEval/88', '433', 'HumanEval/19', '27', 'HumanEval/116', 'HumanEval/113', 'HumanEval/158', 'HumanEval/34', '749']","def by_length(arr):
    digit_names = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    arr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)
    return [digit_names[x] for x in arr]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,0,normal,[],"import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,1,normal,['905'],"import math

def func(var):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(var)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['905', '873', 'HumanEval/32', 'HumanEval/115', 'HumanEval/26']","import math

def func(var_0):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(var_0)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['905', '873', 'HumanEval/32', 'HumanEval/115', 'HumanEval/26', 'HumanEval/67', 'HumanEval/84', 'HumanEval/113', 'HumanEval/108', '133']","def func_0(var_0):
    return [factorial(i + 1, 2 * i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(var_0)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,0,normal,[],"def even_odd_palindrome(n):
    even = 0
    odd = 0
    for i in range(1, n + 1):
        if str(i) == str(i)[::-1] and i % 2 == 0:
            even += 1
        elif str(i) == str(i)[::-1] and i % 2!= 0:
            odd += 1
    return even, odd",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['HumanEval/107'],"def is_palindrome(n):
    return str(n) == str(n)[::-1]

def hodal_0(n):
    even_count = 0
    palindrome_count = 0
    for i in range(1, n + 1):
        if i % 2 == 0 and is_palindrome(i):
            even_count += 1
        elif i % 2!= 0 and is_palindrome(i):
            palindrome_count += 1
    return (even_count, palindrome_count)",0.0,entry point not found
107,HumanEval/107,5,normal,"['HumanEval/107', '485', 'HumanEval/10', '781', '406']","def is_palindrome(n):
    return str(n) == str(n)[::-1]

def count_even_odd_palindromes(n):
    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindromes = 0
    odd_palindromes = 0
    for i in range(1, n + 1)):
        if i % 2 == 0 and is_palindrome(i):
            even_palindromes += 1
        elif i % 2!= 0 and is_palindrome(i):
            odd_palindromes += 1
    return (odd_palindromes, even_palindromes)",0.0,entry point not found
107,HumanEval/107,10,normal,"['HumanEval/107', '485', 'HumanEval/10', '781', '406', '134', 'HumanEval/113', '387', 'HumanEval/64', 'HumanEval/105']","def is_palindrome(n):
    return str(n) == str(n)[::-1]

def count_even_odd_palindromes(n):
    count_even = 0
    count_odd = 0
    for i in range(1, n + 1):
        if is_palindrome(i):
            if i % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
    return (count_odd, count_even)

print(count_even_odd_palindromes(12))",0.0,entry point not found
108,HumanEval/108,0,normal,[],"def count_nums(arr):
    def sum_of_digits(n):
        return sum(int(digit) if digit!= '-' else -int(digit) for digit in str(abs(n)))

    return sum(1 for num in arr if sum_of_digits(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,1,normal,['566'],"def sum_digits(n):
    return sum(int(digit) for digit in str(n))",0.0,entry point not found
108,HumanEval/108,5,normal,"['566', 'HumanEval/146', '398', '433', 'HumanEval/113']","def count_odd_digits(numbers):
    return sum(sum(int(digit) % 2 for digit in str(num)) for num in numbers)",0.0,entry point not found
108,HumanEval/108,10,normal,"['566', 'HumanEval/146', '398', '433', 'HumanEval/113', '767', '527', 'HumanEval/115', 'HumanEval/108', '148']","def sum_digits(var_0):
    return sum((int(digit) for digit in str(var_0)))",0.0,entry point not found
109,HumanEval/109,0,normal,[],"def move_one_ball(arr):
    return len(arr) == 0 or arr == sorted(arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['433'],"def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x==0, x))

def move_zero",0.0,entry point not found
109,HumanEval/109,5,normal,"['433', 'HumanEval/57', 'HumanEval/105', '896', '370']","def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    non_zero = [x for x in arr if x!= 0]
    return non_zero + [0] * (len(arr) - len(non_zero))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted(arr, key=lambda x: (x == 0, x))

def move_zeroes(arr):
    return sorted",0.0,entry point not found
109,HumanEval/109,10,normal,"['433', 'HumanEval/57', 'HumanEval/105', '896', '370', '889', 'HumanEval/158', '472', '670', '680']","def move_ball(var_0):
    var_1 = var_0.copy()
    var_2 = sorted(var_1)
    for i in range(len(var_1)):
        if var_1[i]!= var_2[i]:
            return False
    return True",0.0,entry point not found
110,HumanEval/110,0,normal,[],"def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = len(lst1) - odd_count
    return ""YES"" if odd_count <= len(lst2) else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['HumanEval/52'],"def verify_insecurities(lst, threshold):
    def is_valid(lst):
        for num in lst:
            if num >= threshold:
                return False
        return True

    return is_valid(lst)
    return ""YES"" if is_valid(lst) else ""NO""",0.0,entry point not found
110,HumanEval/110,5,normal,"['HumanEval/52', 'HumanEval/0', 'HumanEval/3', 'HumanEval/7', 'HumanEval/25']","def func_0(lst1, lst2):
    return [x for x in lst1 if x in lst2] + [x for x in lst2 if x in lst1]",0.0,entry point not found
110,HumanEval/110,10,normal,"['HumanEval/52', 'HumanEval/0', 'HumanEval/3', 'HumanEval/7', 'HumanEval/25', 'HumanEval/26', '70', '342', 'HumanEval/11', 'HumanEval/22']","def func_0(lst1, lst2):
    return [x for x in lst1 if x in lst2]",0.0,entry point not found
111,HumanEval/111,0,normal,[],"from collections import Counter

def histogram(test):
    if not test:
        return {}
    
    words = test.split()
    counter = Counter(words)
    max_count = max(counter.values())
    
    return {key: value for key, value in counter.items() if value == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['862'],"from collections import Counter
import re

def func(var_0, var_1):
    var_2 = re.findall('\\w+', var_0)
    var_3 = Counter(var_2).most_common(var_1)
    return {var_4: var_5 for var_4, var_5 in var_3 if var_5 >= var_3[0][1]}",0.0,entry point not found
111,HumanEval/111,5,normal,"['862', '684', 'HumanEval/116', 'HumanEval/105', '523']","from collections import Counter
import re

def histogram(s, k):
    words = re.findall('\\w+', s)
    return Counter(words).most_common(k)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['862', '684', 'HumanEval/116', 'HumanEval/105', '523', '374', '278', 'HumanEval/19', 'HumanEval/113', '172']","from collections import Counter
import re

def func_0(var_0, var_1):
    var_2 = re.findall('\\w+', var_0)
    var_3 = Counter(var_2).most_common(var_1)
    return list(var_3)",0.0,entry point not found
112,HumanEval/112,0,normal,[],"def reverse_delete(s, c):
    c = set(c)
    result = [char for char in s if char not in c]
    return (''.join(result), result == result[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['HumanEval/10'],"def reverse_string(s, c):
    s = s.lower()
    c = c.lower()
    result = ''
    for char in s:
        if char in c:
            result += char
    return result[::-1]",0.0,entry point not found
112,HumanEval/112,5,normal,"['HumanEval/10', 'HumanEval/107', '53', '604', '823']","def reverse_and_check(s, c):
    s = s[::-1]
    return (s, s.startswith(c))",0.0,entry point not found
112,HumanEval/112,10,normal,"['HumanEval/10', 'HumanEval/107', '53', '604', '823', '860', 'HumanEval/64', '364', '889', '319']","import re

def reverse_and_check(s, c):
    s = s[::-1]
    return (s, s == c)",0.0,entry point not found
113,HumanEval/113,0,normal,[],"import re

def odd_count(lst):
    return [f""the number of odd elements {len(re.sub('[24680]', '', s))}n the str{len(s)}ng {len(s)} of the {len(s)}nput."" for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['HumanEval/113'],"def odd_elements(New_list):
    result = []
    for lst in New_list:
        odd_count = sum(1 for num in lst if num % 2 == 1)
        result.append(""the number of odd elements "" + str(odd_count) + "" in the string "" + str(lst) + "" of the list "" + str(New_list) + ""nput."")
    return result",0.0,entry point not found
113,HumanEval/113,5,normal,"['HumanEval/113', '18', 'HumanEval/17', '374', '781']","def odd_elements_in_string(s):
    odd_count = sum(1 for char in s if ord(char) % 2 == 1)
    return_str in s:
        return_str = return_str.replace(str(odd_count), 'the number of odd elements'+ str(odd_count) + 'n the' + str(odd_count) +'of the'+ str(odd_count) + 'nput.')
    return return_str",0.0,entry point not found
113,HumanEval/113,10,normal,"['HumanEval/113', '18', 'HumanEval/17', '374', '781', '387', '684', 'HumanEval/26', '406', '134']","def odd_elements_count(var_0):
    var_1 = []
    for var_2 in var_0:
        var_3 = sum((int(digit) % 2 == 1 for digit in var_2))
        var_1.append(var_3)
    return var_1

def string_generator(var_0, var_1):
    var_2 = ''
    for i in range(var_1):
        var_2 += var_0
    return var_2

def odd_elements_string(var_0, var_1):
    var_2 = string_generator(var_0, var_1)
    var_3 = odd_elements_count(var_2)
    var_4 = ''
    for i in range(len(var_3)):
        var_4 += 'the number of odd elements in the string'+ str(i) +'is'+ str(var_3[i]) + 'n the string'+ str(i) +'of the string'+ str(i) + 'nput.'
    return var_4

var_0 = ['123', '456', '789']
var_1 = 3
print(odd_elements_string(var_0, var_1))",0.0,entry point not found
114,HumanEval/114,0,normal,[],"from typing import List

def minSubArraySum(nums: List[int]) -> int:
    if not nums:
        return 0
    
    current_sum = max_sum = nums[0]
    
    for num in nums[1:]:
        current_sum = min(num, current_sum + num)
        max_sum = min(max_sum, current_sum)
    
    return max_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['476'],"def func_0(var_0):
    return min(sum(nums) for nums in var_0)",0.0,entry point not found
114,HumanEval/114,5,normal,"['476', '870', '212', '133', '271']","def subArraySum(nums):
    if not nums:
        return 0
    
    min_sum = float('inf')
    current_sum = 0
    
    for num in nums:
        current_sum += num
        min_sum = min(min_sum, current_sum)
        
        if current_sum > 0:
            current_sum = 0
    
    return min_sum",0.0,entry point not found
114,HumanEval/114,10,normal,"['476', '870', '212', '133', '271', '634', '481', '504', '798', 'HumanEval/115']","def func_0(var_0):
    return sum(var_0)",0.0,entry point not found
115,HumanEval/115,0,normal,[],"from collections import deque

def max_fill(grid, capacity):
    rows, cols = len(grid), len(grid[0])
    visited = [[False]*cols for _ in range(rows)]
    queue = deque([(0, 0, 0, 0)])  # row, col, water, moves
    visited[0][0] = True

    while queue:
        row, col, water, moves = queue.popleft()
        if row == rows - 1 and col == cols - 1:
            return moves
        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nr, nc = row + dr, col + dc
            if 0 <= nr < rows and 0 <= nc < cols and not visited[nr][nc]:
                new_water = water + grid[nr][nc]
                if new_water <= capacity:
                    queue.append((nr, nc, new_water, moves + 1))
                    visited[nr][nc] = True
                elif new_water > capacity:
                    queue.append((nr, nc, 0, moves + 1))
                    visited[nr][nc] = True
    return -1  # No path found",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,1,normal,['911'],"def min_bucket_size(grid, bucket_size]:
    min_bucket = float('inf')
    for row in grid:
        for cell in row:
            if cell == 1:
                min_bucket_size = min(min_bucket_size, bucket_size)
    return min_bucket_size",0.0,entry point not found
115,HumanEval/115,5,normal,"['911', '951', '366', '393', '805']","def settings(feedback):
    grid = feedback['grid']
    bucket_capacity = feedback['bucket_capacity']
    total_water = sum(sum(row) for row in grid)
    buckets_needed = -(-total_water // bucket_capacity)  # Ceiling division
    return buckets_needed",0.0,entry point not found
115,HumanEval/115,10,normal,"['911', '951', '366', '393', '805', '938', '299', '303', '663', '517']","def func_0(var_0):
    max_val = 0
    for i in range(len(var_0)):
        for j in range(len(var_0[0])):
            if var_0[i][j] > max_val:
                max_val = var_0[i][j]
    return max_val",0.0,entry point not found
116,HumanEval/116,0,normal,[],"from functools import cmp_to_key

def sort_array(arr):
    def count_ones(n):
        return bin(n).count('1')

    arr.sort(key=cmp_to_key(lambda x, y: (count_ones(x) - count_ones(y), x - y))
    return arr",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 7)"", 'completion_id': 0})]})"
116,HumanEval/116,1,normal,['433'],"def sort_by_ones(arr):
    return sorted(arr, key=lambda x: bin(x).count('1'))",0.0,entry point not found
116,HumanEval/116,5,normal,"['433', 'HumanEval/105', 'HumanEval/116', '896', 'HumanEval/34']","def sort_by_ones(arr):
    return sorted(arr, key=lambda x: bin(x)[2:].count('1'))",0.0,entry point not found
116,HumanEval/116,10,normal,"['433', 'HumanEval/105', 'HumanEval/116', '896', 'HumanEval/34', 'HumanEval/104', '472', 'HumanEval/158', 'HumanEval/149', '12']","def sort_wines(wines):
    return sorted(wines, key=lambda x: bin(x)[2:].count('1'))",0.0,entry point not found
117,HumanEval/117,0,normal,[],"import re

def select_words(s, n):
    words = re.findall(r'\b\w+\b', s.lower())
    result = []
    for word in words:
        consonants = sum(1 for char in word if char.isalpha() and char not in 'aeiou')
        if consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['HumanEval/64'],"import re

def select_gravel(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if re.search(r'[aeiouyAEIOU]$', s, re.IGNORECASE):
        n_vowels += 1
    return n_vowels",0.0,entry point not found
117,HumanEval/117,5,normal,"['HumanEval/64', '374', '523', 'HumanEval/17', '570']","def select_words(s, n):
    vowels = ""aeiouAEIOU""
    words = s.split()
    result = []
    for word in words:
        n_vowels = sum(c in vowels for c in word)
        if word[-1] == 'y' or word[-1] == 'Y':
            n_vowels += 1
        if n_vowels == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['HumanEval/64', '374', '523', 'HumanEval/17', '570', 'HumanEval/26', 'HumanEval/19', '860', '950', 'HumanEval/105']","import re

def select_gravel(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",0.0,entry point not found
118,HumanEval/118,0,normal,[],"def get_closest_vowel(word):
    vowels = 'AEIOU'
    for i in range(len(word) - 2, -1, -1):
        if word[i] in vowels:
            if word[i+1] not in vowels and word[i+2] not in vowels:
            return word[i]
    return """"",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'if' statement on line 5 (<string>, line 6)"", 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/64'],"def get_closest_vowel(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] in 'yY':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,5,normal,"['HumanEval/64', 'HumanEval/51', '523', '823', '461']","def get_closest_vowel(s):
    vowels = ""aeiouAEIOU""
    for i in range(len(s) - 1, -1, -1):
        if s[i] in vowels:
            return s[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,10,normal,"['HumanEval/64', 'HumanEval/51', '523', '823', '461', '818', '364', '53', '482', 'HumanEval/117']","def get_closest_vowel(s):
    vowels = ""aeiouAEIOU""
    for i in range(len(s) - 1, -1, -1):
        if s[i] in vowels:
            return s[i]
    return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,0,normal,[],"def match_parens(lst):
    s1, s2 = lst
    open_count = 0
    for c in s1 + s2:
            if c == '(':
                open_count += 1
            elif c == ')':
                if open_count == 0:
                    return 'No'
                open_count -= 1
    return 'Yes' if open_count == 0 else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,1,normal,['53'],"def match_parentheses(lst):
    open_count = 0
    close_count = 0
    for item in lst:
        if item == '(':
            open_count += 1
        elif item == ')':
            close_count += 1
    return 'Yes' if open_count == close_count else 'No'",0.0,entry point not found
119,HumanEval/119,5,normal,"['53', '186', '178', '352', '823']","import re

def match_parentheses(lst):
    open_paren = re.compile(r'\(')
    close_paren = re.compile(r'\)')
    open_count = 0
    close_count = 0
    for char in lst:
        if open_paren.search(char):
            open_count += 1
        elif close_paren.search(char):
            close_count += 1
    if open_count == close_count:
        return 'Yes'
    else:
        return 'No'",0.0,entry point not found
119,HumanEval/119,10,normal,"['53', '186', '178', '352', '823', '917', 'HumanEval/6', '16', '43', '771']","def match_parentheses(lst):
    new_lst = []
    for item in lst:
        if item == '(':
            new_lst.append(item)
        elif item == ')':
            if new_lst and new_lst[-1] == '(':
                new_lst.pop()
            else:
                new_lst.append(item)
    return 'Yes' if not new_lst else 'No'",0.0,entry point not found
120,HumanEval/120,0,normal,[],"import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['911'],"import heapq

def max_k_numbers(numbers, k):
    return heapq.nlargest(k, numbers)",0.0,entry point not found
120,HumanEval/120,5,normal,"['911', 'HumanEval/9', '433', '342', '805']","import heapq

def max_k_numbers(nums, k):
    return heapq.nlargest(k, nums)",0.0,entry point not found
120,HumanEval/120,10,normal,"['911', 'HumanEval/9', '433', '342', '805', '299', '366', 'HumanEval/21', '517', '90']","import heapq

def max_k_numbers(nums, k):
    return heapq.nlargest(k, nums)",0.0,entry point not found
121,HumanEval/121,0,normal,[],"def solution(lst):
    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['HumanEval/113'],"def solution(ity):
    return sum(i for i in ity if i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['HumanEval/113', '797', '781', 'HumanEval/4', 'HumanEval/32']","def solution(numbers):
    return sum(num for num in numbers if num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['HumanEval/113', '797', '781', 'HumanEval/4', 'HumanEval/32', '340', '398', '134', 'HumanEval/121', 'HumanEval/64']","def solution(var_0):
    return sum(var_1 for var_2 in var_0 if var_1 % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,0,normal,[],"def add_elements(arr, k):
    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['398'],"import re

def sum_of_digits(arr):
    return sum(int(digit) for num in arr for digit in re.findall('\d', str(num)))",0.0,entry point not found
122,HumanEval/122,5,normal,"['398', 'HumanEval/115', 'HumanEval/113', 'HumanEval/32', 'HumanEval/4']","def elements_at_most_k(arr, k):
    return sum(el for el in arr if el <= k)",0.0,entry point not found
122,HumanEval/122,10,normal,"['398', 'HumanEval/115', 'HumanEval/113', 'HumanEval/32', 'HumanEval/4', 'HumanEval/122', '148', 'HumanEval/121', 'HumanEval/67', '949']","def sum_digits(var_0):
    return sum((int(el) for var_1 in var_0))",0.0,entry point not found
123,HumanEval/123,0,normal,[],"def get_odd_collatz(n):
    def collatz(n):
        sequence = [n]
        while n!= 1:
            if n % 2 == 0:
                n = n // 2
            else:
                n = 3 * n + 1
            sequence.append(n)
        return sequence

    sequence = collatz(n)
    return sorted(set([num for num in sequence if num % 2!= 0]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,1,normal,['781'],"import math
import re

def func_0(var_0):
    odd_numbers = []
    def collatz(n):
        while n!= 1:
            if n % 2 == 0:
                n = n // 2
            else:
                n = 3 * n + 1
            odd_numbers.append(n)
        return odd_numbers

    def get_odd_numbers(var_0):
        odd_numbers = collatz(var_0)
        return [num for num in odd_numbers if num % 2!= 0]

    return get_odd_numbers(var_0)",0.0,entry point not found
123,HumanEval/123,5,normal,"['781', 'HumanEval/113', '406', 'HumanEval/26', 'HumanEval/32']","import math
import re

def func_0(var_0):
    count = 0
    for var_1 in range(1, int(math.sqrt(var_0)) + 2):
        if var_0 % var_1 == 0:
            if var_0 // var_1 == var_1:
                count = count + 1
            else:
                count = count + 2
    if count % 2 == 0:
        return 'Even'
    else:
        return 'Odd'

def func_1(var_0):
    var_1 = []
    for var_2 in var_0:
        var_3 = sum((int(digit) % 2 == 1 for digit in var_2))
        var_1.append('The number of odd elements is'+ str(var_3) +'in the string'+ str(var_3) +'of the'+ str(var_3) + 'input.')
    return var_1

def func_2(var_0):
    var_1 = var_0 ^ var_0 >> 1
    var_1 = var_1 ^ var_1 2
    var_1 = var_1 ^ var_1 >> 8
    var_1 = var_1 ^ var_1 >> 16
    if var_1 & 1:
        return 'Odd Parity'
    return 'Even Parity'

def func_3(var_0: list) -> list:
    import collections
    var_1 = collections.Counter(var_0)
    return [num for num, count in var_1.items() if count <= 1]

def func_4(var_0: list, var_1: float):
    return sum([coeff * math.pow(var_1, i) for i, coeff in enumerate(var_0)])

def func_5(var_0: list):
    var_4, var_5 = (-1.0, 1.0)
    while poly(var_0, var_4) * poly(var_0, var_5) > 0:
        var_4 *= 2.0
        var_5 *= 2.0
    while var_5 - var_4 > 1e-10:
        var_6 = (var_4 + var_5) / 2.0
        if poly(var_0,",0.0,entry point not found
123,HumanEval/123,10,normal,"['781', 'HumanEval/113', '406', 'HumanEval/26', 'HumanEval/32', '873', 'HumanEval/105', '84', '15', '647']","import math
import re
from typing import List

def func_0(var_0):
    def collatz(n):
        if n <= 0:
            return []
        elif n == 1:
            return [1]
        else:
            sequence = [n]
            while n!= 1:
                if n % 2 == 0:
                    n = n // 2
                else:
                    n = 3 * n + 1
                sequence.append(n)
            return sequence

    def get_odd_collatz(n):
        sequence = collatz(n)
        return [num for num in sequence if num % 2!= 0]

    def get_polite_response():
        return ""I'd be happy to help you with that!""

    def get_polite_response_with_collatz(n):
        return f""I'd be happy to help you with that! The Collatz sequence for {n} is: {get_odd_collatz(n)}""

    if isinstance(var_0, int):
        return get_polite_response_with_collatz(var_0)
    elif isinstance(var_0, str):
        return get_polite_response()
    else:
        raise ValueError(""Invalid input type"")",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,0,normal,[],"import re

def valid_date(date):
    pattern = re.compile(r'^(\d{2})-(\d{2})-(\d{4})$')
    match = pattern.match(date)
    if match:
        day, month, year = map(int, match.groups())
        if 1 <= month <= 12 and 1 <= day <= 31 and year > 0:
            if month in [1, 3, 5, 7, 8, 10, 12]:
                return 1 <= day <= 31
            elif month in [4, 6, 9, 11]:
                return 1 <= day <= 30
            elif month == 2:
                return 1 <= day <= 29 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))
        return False
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,1,normal,['910'],"from datetime import datetime

def valid_date(date_str):
    try:
        datetime.strptime(date_str, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['910', '866', '191', '336', '159']","from datetime import datetime

def valid_date(date_str):
    try:
        datetime.strptime(date_str, '%m-%d-%Y')
        month = int(date_str.split('-')[0])
        if (month < 1 or month > 12) or (month in [4, 6, 9, 11] and int(date_str.split('-')[1]) > 30) or (month in [1, 3, 5, 7, 8, 10, 12] and int(date_str.split('-')[1]) > 31):
            return False
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['910', '866', '191', '336', '159', '396', '737', '928', '774', '352']","import re

def valid_date(date_str):
    try:
        day, month, year = map(int, date_str.split('-'))
        if month < 1 or month > 12:
            return False
        if month in [1, 3, 5, 7, 8, 10, 12]:
            if day < 1 or day > 31:
                return False
        elif month in [4, 6, 9, 11]:
            if day < 1 or day > 30:
                return False
        elif month == 2:
            if day < 1 or day > 29:
                return False
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,0,normal,[],"import re

def split_words(txt):
    txt = re.sub(r'[^\w\s,]', '', txt)
    if ',' in txt:
        return txt.split(',')
    elif'' in txt:
        return txt.split()
    else:
        return sum(1 for i in range(ord('a'), ord('z')+1) if txt.islower() else None",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 10)', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['73'],"import re

def Get_Words(var_0):
    words = re.split('; |, |\\*|\n', var_0)
    return words",0.0,entry point not found
125,HumanEval/125,5,normal,"['73', 'HumanEval/17', '523', '374', '570']","import re

def func_0(var_0):
    words = re.split('; |, |\\*|\n', var_0)
    return [word for word in words if any(char.islower() for char in word)]",0.0,entry point not found
125,HumanEval/125,10,normal,"['73', 'HumanEval/17', '523', '374', '570', 'HumanEval/91', '459', '478', '495', 'HumanEval/19']","import re

def func_0(var_0):
    return re.split('[,;*\\n]', var_0)",0.0,entry point not found
126,HumanEval/126,0,normal,[],"def is_sorted(lst):
    return lst == sorted(lst) and len(lst) == len(set(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['HumanEval/57'],"import math
import csv

def sorted_0(var_0: list):
    if len(var_0) == 0:
        return True
    var_1 = sorted(var_0)
    var_2 = sorted(var_0, reverse=True)
    var_3 = []
    for i in range(len(var_0)):
        if var_0[i] == var_1[i] or var_0[i] == var_2[i] for i in var_0:
        if var_0[i] in var_1 and var_0[i] in var_2:
            return False
        elif var_0[i] in var_1 and var_0[i] not in var_2(var_0):
    var_1 = sorted(var_0)
    var_2 = sorted(var_0, reverse=True)
    for i in range(len(var_0)):
        if var_0[i]!= var_1:",0.0,entry point not found
126,HumanEval/126,5,normal,"['HumanEval/57', '670', '680', 'HumanEval/34', '472']","import csv
import math

def sorted_list(lst):
    return sorted(set(lst))

def is_sorted(lst):
    sorted_lst = sorted_list(lst)
    return lst == sorted_lst or lst == sorted_lst[::-1]

def is_sorted_ascending(lst):
    return is_sorted(lst)

def is_sorted_descending(lst):
    return is_sorted(lst[::-1])

def is_sorted(lst):
    if is_sorted_ascending(lst) or is_sorted_descending(lst):
        return True
    return False

def sorted_list(lst):
    return sorted(set(lst))

def is_sorted(lst):
    return sorted_list(lst) == lst or sorted_list(lst) == lst[::-1]

def is_sorted_ascending(lst):
    return is_sorted(lst)

def is_sorted_descending(lst):
    return is_sorted(lst[::-1])

def is_sorted(lst):
    if is_sorted_ascending(lst) or is_sorted_descending(lst):
        return True
    return False

def sorted_list(lst):
    return sorted(set(lst))

def is_sorted(lst):
    return sorted_list(lst) == lst or sorted_list(lst) == lst[::-1]

def is_sorted_ascending(lst):
    return is_sorted(lst)

def is_sorted_descending(lst):
    return is_sorted(lst[::-1])

def is_sorted(lst):
    if is_sorted_ascending(lst) or is_sorted_descending(lst):
        return True
    return False

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1]

def is_sorted(lst):
    return sorted(set(lst)) == lst or sorted(set(lst)) == lst[::-1",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '[' was never closed (<string>, line 84)"", 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['HumanEval/57', '670', '680', 'HumanEval/34', '472', '433', 'HumanEval/58', 'HumanEval/116', 'HumanEval/158', 'HumanEval/105']","import csv
import math

def sorted_list(llist):
    return sorted(list(set(llist))

def is_sorted(llist):
    return sorted(llist) == llist or sorted(llist, reverse=True) == llist

def sorted_list(llist):
    return sorted(list(set(llist)))

def sorted_list(llist):
    return sorted(llist, key=lambda x: bin(x)[2:].count('1'))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (-len(set(x)), x))[0]

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):
    return sorted(llist, key=lambda x: (len(str(x)), x))

def sorted_list(llist):",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: '(' was never closed (<string>, line 5)"", 'completion_id': 0})]})"
127,HumanEval/127,0,normal,[],"def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    if intersection_start <= intersection_end:
        intersection_length = intersection_end - intersection_start + 1
        def is_prime(n):
            if n < 2:
                return False
            for i in range(2, int(n**0.5) + 1):
                if n % i == 0:
                    return False
            return True
        return ""YES"" if is_prime(intersection_length) else ""NO""
    else:
        return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"def intersection(interval1, interval2):
    def is_prime(n):
        if n <= 1:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        for i in range(3, int(n**0.5) + 1, 2):
            if n % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    intersection_length = end - start
    if intersection_length >= 0 and is_prime(intersection_length):
        return 'YES'
    return 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', 'HumanEval/59', 'HumanEval/75', 'HumanEval/39', '70']","def intersection(interval1, interval2):
    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    intersection_length = end - start
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True
    if intersection_length > 0 and is_prime(intersection_length):
        return 'YES'
    return 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', 'HumanEval/59', 'HumanEval/75', 'HumanEval/39', '70', 'HumanEval/52', '260', '111', '218', '637']","def intersection(interval1, interval2):
    var_4 = max(interval1[0], interval2[0])
    var_5 = min(interval1[1], interval2[1])
    var_6 = var_5 - var_4
    def is_prime(var_7):
        if var_7 < 2:
            return False
        for var_8 in range(2, int(var_7 ** 0.5) + 1):
            if var_7 % var_8 == 0:
                return False
        return True
    if var_6 > 0 and is_prime(var_6):
        return 'YES'
    return 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,0,normal,[],"def prod_signs(arr):
    if not arr:
        return None
    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]
    product = 1
    for sign in signs:
        product *= sign
    return sum(abs(x) for x in arr) * product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['566'],"def prod_signs(arr):
    if not arr:
        return None
    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]
    product = 1
    for sign in signs:
        product *= sign
    return sum(x * product for x in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['566', '398', 'HumanEval/115', 'HumanEval/66', '433']","def prod_signs(arr):
    if not arr:
        return None
    signs = [1 if num > 0 else -1 if num < 0 else 0 for num in arr]
    product = 1
    for sign in signs:
        product *= sign
    return sum(abs(num) for num in arr) * product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['566', '398', 'HumanEval/115', 'HumanEval/66', '433', '645', 'HumanEval/113', '798', '504', 'HumanEval/67']","def prod_signs(arr):
    if not arr:
        return None
    sign = 1
    for num in arr:
        if num < 0:
            sign *= -1
        elif num == 0:
            return 0
    return sum(abs(num) for num in arr) * sign",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,0,normal,[],"from collections import deque

def minPath(grid, k):
    rows, cols = len(grid), len(grid[0])
    visited = [[False]*cols for _ in range(rows)]
    queue = deque([(grid[0][0], [(grid[0][0], (0, 0))])])
    visited[0][0] = True

    while queue:
        val, path = queue.popleft()
        if len(path) == k:
            return [x[0] for x in path]
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            x, y = path[-1][1][0] + dx, path[-1][1][1] + dy
            if 0 <= x < rows and 0 <= y < cols and not visited[x][y]:
                queue.append((grid[x][y], path + [(grid[x][y], (x, y))]))
                visited[x][y] = True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['322'],"from collections import deque

def Path(grid, k):
    n = len(grid)
    visited = [[False]*n for _ in range(n)]
    queue = deque([(i, j, [grid[i][j]]) for i in range(n) for j in range(n)])
    visited[0][0] = True
    min_path = []
    min_val = float('inf')

    while queue:
        x, y, path = queue.popleft()
        if len(path) == k:
            if path[-1] < min_val:
                min_val = path[-1]
                min_path = path
        else:
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny, path + [grid[nx][ny]])))
    return min_path",0.0,entry point not found
129,HumanEval/129,5,normal,"['322', '947', '50', '95', '457']","from collections import deque

def Path(grid, k):
    n = len(grid)
    visited = [[False]*n for _ in range(n)]
    queue = deque([(i, j, [grid[i][j]]) for i in range(n) for j in range(n)])
    visited[0][0] = True
    min_path = []
    while queue:
        x, y, path = queue.popleft()
        if len(path) == k:
            if not min_path or path < min_path:
                min_path = path
            continue
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                queue.append((nx, ny, path + [grid[nx][ny]]))
                visited[nx][ny] = True
    return min_path",0.0,entry point not found
129,HumanEval/129,10,normal,"['322', '947', '50', '95', '457', '62', '410', '94', '528', '325']","from collections import deque
from typing import List

def Path(grid: List[List[int]], k: int) -> List[int]:
    rows, cols = len(grid), len(grid[0])
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    queue = deque([(grid[i][j], i, j, [grid[i][j]]) for i in range(rows) for j in range(cols)])
    visited = set((i, j) for i in range(rows) for j in range(cols))
    min_path = None

    while queue:
        val, x, y, path = queue.popleft()
        if len(path) == k:
            if min_path is None or path < min_path:
                min_path = path
        else:
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in visited:
                    queue.append((grid[nx][ny], nx, ny, path + [grid[nx][ny]]))
                    visited.add((nx, ny))

    return min_path",0.0,entry point not found
130,HumanEval/130,0,normal,[],"def tri(n):
    sequence = [3, 2]
    while len(sequence) < n + 1:
        if len(sequence) % 2 == 0:
            sequence.append(1 + len(sequence) // 2)
        else:
            sequence.append(sequence[-1] + sequence[-2] + sequence[-3])
    return sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,1,normal,['873'],"def tri(n):
    tribonacci_sequence = [3, 2]
    for i in range(2, n + 1):
        if i % 2 == 0:
            tribonacci_sequence.append(1 + i / 2)
        else:
            tribonacci_sequence.append(tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3] + tribonacci_sequence[i - 1])
    return [1] + tribonacci_sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['873', '84', '583', '926', '552']","def tri(n):
    sequence = [3]
    for i in range(1, n + 1):
        if i % 2 == 0:
            sequence.append(1 + i / 2)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])
    return sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['873', '84', '583', '926', '552', '905', '687', 'HumanEval/55', '493', 'HumanEval/113']","def tri(n):
    sequence = [3]
    for i in range(1, n + 1):
        if i % 2 == 0:
            sequence.append(1 + i / 2)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])
    return sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,0,normal,[],"def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
    return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['566'],"def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
    return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['566', '781', '406', '134', 'HumanEval/113']","def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
    return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['566', '781', '406', '134', 'HumanEval/113', '148', '387', '260', '619', '583']","def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
    return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,0,normal,[],"def is_nested(s):
    stack = []
    for bracket in s:
        if bracket == '[':
            stack.append(bracket)
        elif bracket == ']':
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['771'],"from collections import deque

def is_nested(s):
    stack = deque()
    for bracket in s:
        if bracket == '[':
            stack.append(bracket)
        elif bracket == ']':
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['771', '823', '352', '523', '396']","from collections import deque

def is_nested(s):
    stack = deque()
    for char in s:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['771', '823', '352', '523', '396', '737', '374', '913', '53', 'HumanEval/0']","from collections import deque

def is_nested(s):
    stack = deque()
    for char in s:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if not stack:
                return False
            stack.pop()
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,0,normal,[],"import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['419'],"import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['419', '422', '398', 'HumanEval/32', 'HumanEval/4']","import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,10,normal,"['419', '422', '398', 'HumanEval/32', 'HumanEval/4', 'HumanEval/121', '724', 'HumanEval/115', 'HumanEval/60', 'HumanEval/67']","import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,0,normal,[],"def check_if_last_char_is_a_letter(txt):
    txt = txt.strip()
    if not txt:
        return False
    return txt[-1].isalpha() and not txt[-1].isalnum()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['822'],"import re

def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    if txt = txt.strip()
    if txt and re.search(r'[a-zA-Z]$', txt):
        return txt[-1] not in txt[:-1]
    return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: invalid syntax. Maybe you meant '==' or ':=' instead of '='? (<string>, line 6)"", 'completion_id': 0})]})"
134,HumanEval/134,5,normal,"['822', '523', '461', '823', 'HumanEval/141']","import re

def check_if_last_char_is_a_letter(txt):
    if len(txt) == 0:
        return False
    if txt[-1] =='':
        return False
    if re.search('[a-zA-Z]$', txt):
        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,10,normal,"['822', '523', '461', '823', 'HumanEval/141', '818', '482', '774', '53', '192']","import re

def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    last_char = txt[-1]
    if not re.search(r'\s$').search(txt):
        return last_char.isalpha()
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,0,normal,[],"def can_arrange(arr):
    for i in range(1, len(arr)):
        if arr[i] <= arr[i-1]:
            return i-1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,1,normal,['433'],"def can_arrange(arr):
    for i in range(1, len(arr)):
        if arr[i] <= arr[i-1]:
            return i-1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,5,normal,"['433', 'HumanEval/57', '472', 'HumanEval/58', 'HumanEval/105']","def can_arrange(arr):
    for i in range(1, len(arr)):
        if arr[i] <= arr[i-1]:
            return i-1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,10,normal,"['433', 'HumanEval/57', '472', 'HumanEval/58', 'HumanEval/105', '670', '680', '896', 'HumanEval/34', 'HumanEval/87']","def can_arrange(arr):
    for i in range(1, len(arr)):
        if arr[i] <= arr[i-1]:
            return i-1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,0,normal,[],"def largest_smallest_integers(lst):
    negative_nums = [num for num in lst if num < 0]
    positive_nums = [num for num in lst if num > 0]
    
    if negative_nums:
        largest_negative = max(negative_nums)
    else:
        largest_negative = None

    if positive_nums:
        smallest_positive = min(positive_nums)
    else:
        smallest_positive = None

    return largest_negative, smallest_positive",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,1,normal,['HumanEval/9'],"def largest_smallest_integers(lst):
    negative = [i for i in lst if i < 0]
    positive = [i for i in lst if i > 0]
    
    if negative:
        a = max(negative)
    else:
        a = None
        
    if positive:
        b = min(positive)
    else:
        b = None
        
    return a, b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,5,normal,"['HumanEval/9', 'HumanEval/12', '472', 'HumanEval/21', '342']","def largest_smallest_integers(lst):
    negative = [x for x in lst if x < 0]
    positive = [x for x in lst if x > 0]
    if negative:
        largest_negative = max(negative)
    else:
        largest_negative = None
    if positive:
        smallest_positive = min(positive)
    else:
        smallest_positive = None
    return (largest_negative, smallest_positive)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,10,normal,"['HumanEval/9', 'HumanEval/12', '472', 'HumanEval/21', '342', '613', '648', '911', 'HumanEval/39', '322']","def largest_smallest_integers(lst):
    negative = [i for i in lst if i < 0]
    positive = [i for i in lst if i > 0]
    if negative:
        largest_negative = max(negative)
    else:
        largest_negative = None
    if positive:
        smallest_positive = min(positive)
    else:
        smallest_positive = None
    return (largest_negative, smallest_positive)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,0,normal,[],"def compare_one(a, b):
    if isinstance(a, str) and isinstance(b, str):
        a = a.replace('.', '').replace(',', '.').replace(',', '')
        b = b.replace('.', '').replace(',', '.').replace(',', '')
        return a if float(a) > float(b) else b if float(b) > float(a) else None
    elif isinstance(a, str):
        a = a.replace('.', '').replace(',', '.').replace(',', '')
        return a if float(a) > b else b if float(b) > float(a) else None
    elif isinstance(b, str):
        b = b.replace('.', '').replace(',', '.').replace(',', '')
        return a if float(a) > float(b) else b if float(b) > float(a) else None
    else:
        return a if a > b else b if b > a else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,1,normal,['309'],"def _one(a, b):
    if isinstance(a, str) and isinstance(b, str):
        a = float(a.replace('.', '').replace(',', '.'))
        b = float(b.replace('.', '').replace(',', '.'))
    elif isinstance(a, str):
        a = float(a.replace('.', '').replace(',', '.'))
    elif isinstance(b, str):
        b = float(b.replace('.', '').replace(',', '.'))

    if a == b:
        return None
    elif a >= b:
        return a
    else:
        return b",0.0,entry point not found
137,HumanEval/137,5,normal,"['309', '954', '404', '970', '433']","def _one(a, b):
    if isinstance(a, str) and isinstance(b, str):
        a = float(a.replace(',', '.'))
        b = float(b.replace(',', '.'))
    elif isinstance(a, str):
        a = float(a.replace(',', '.'))
    elif isinstance(b, str):
        b = float(b.replace(',', '.'))
        
    if a == b:
        return None
    elif a > b:
        return a
    else:
        return b",0.0,entry point not found
137,HumanEval/137,10,normal,"['309', '954', '404', '970', '433', '452', '637', '924', '802', '177']","def _one(a, b):
    if isinstance(a, str) and isinstance(b, str):
        a = float(a.replace('.', '').replace(',', '.'))
        b = float(b.replace('.', '').replace(',', '.'))
    elif isinstance(a, str):
        a = float(a.replace('.', '').replace(',', '.'))
    elif isinstance(b, str):
        b = float(b.replace('.', '').replace(',', '.'))
        
    if a > b:
        return a
    elif a < b:
        return b
    else:
        return None",0.0,entry point not found
138,HumanEval/138,0,normal,[],"def is_equal_to_sum_even(n):
    for i in range(2, n, 2):
        for j in range(i, n, 2):
            for k in range(j, n, 2):
                for last in range(k, n, 2):
                    if i + j + k + last == n:
                        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,1,normal,['121'],"def is_equal_to_sum_even(n):
    def check_triplet(var_0, var_1, sum, count):
        if count == 3 and sum == 0:
            return True
        if count == 3 or var_1 == 0 or sum < 0:
            return False
        return check_triplet(var_0, var_1 - 1, sum - var_0[var_1 - 1], count + 1) or check_triplet(var_0, var_1 - 1, sum, count)
    
    even_numbers = [i for i in range(2, n + 1, 2)]
    return check_triplet(even_numbers, len(even_numbers), n, 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,5,normal,"['121', '541', '916', '481', '598']","def is_equal_to_sum_even(n):
    for i in range(1, n):
        for j in range(i, n):
            for k in range(j, n):
                for last in range(k, n):
                    if i + j + k + last == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and last % 2 == 0:
                return True
    return False",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'if' statement on line 6 (<string>, line 7)"", 'completion_id': 0})]})"
138,HumanEval/138,10,normal,"['121', '541', '916', '481', '598', 'HumanEval/94', '685', '398', '797', 'HumanEval/32']","def is_equal_to_sum_even(n):
    for i in range(1, n):
        for j in range(i, n):
            for k in range(j, n):
                for l in range(k, n):
                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:
                        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,0,normal,[],"import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,1,normal,['905'],"import math

def brazilian_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",0.0,entry point not found
139,HumanEval/139,5,normal,"['905', '873', '583', '260', '406']","import math

def brazilian_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",0.0,entry point not found
139,HumanEval/139,10,normal,"['905', '873', '583', '260', '406', '926', '488', 'HumanEval/39', '218', '781']","import math

def brazilian_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",0.0,entry point not found
140,HumanEval/140,0,normal,[],"def fix_spaces(text):
    text = text.replace(""  "", ""-"")
    while ""  "" in text:
        text = text.replace(""  "", "" "")
    return text.replace("" "", ""_"")",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,1,normal,['523'],"def fix_spaces(text):
    text = text.replace(""  "", ""-"")
    while ""  "" in text:
        text = text.replace(""  "", "" "")
    return text.replace("" "", ""_"")",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,5,normal,"['523', '459', '823', '374', 'HumanEval/64']","import re

def fix_spaces(text):
    text = re.sub(' +', '-', text)
    return text.replace(' ', '_')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,10,normal,"['523', '459', '823', '374', 'HumanEval/64', '478', '495', 'HumanEval/51', '315', '451']","import re

def fix_spaces(text):
    text = re.sub(' +', '-', text)
    return re.sub(' ', '_', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,0,normal,[],"import re

def file_name_check(file_name):
    conditions = [
        len(re.findall('\d', file_name)) <= 3,
        file_name.count('.') == 1,
        file_name.split('.')[0][0].isalpha(),
        file_name.split('.')[-1] in ['txt', 'exe', 'dll']
    ]
    return 'Yes' if all(conditions) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    extensions = ['txt', 'exe', 'dll']
    file_name_parts = file_name.split('.')
    if len(file_name_parts)!= 2:
        return 'No'
    if not file_name_parts[1] in extensions:
        return 'No'
    if len(file_name_parts[0]) == 0:
        return 'No'
    if not file_name_parts[0][0].isalpha():
        return 'No'
    if sum(c.isdigit() for c in file_name_parts[0]) > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '396', '737', '823']","import re

def file_name_check(file_name):
    var_1 = ['txt', 'exe', 'dll']
    var_2 = file_name.split(sep='.')
    if len(var_2)!= 2:
        return 'No'
    if not var_2[1] in var_1:
        return 'No'
    if len(var_2[0]) == 0:
        return 'No'
    if not var_2[0][0].isalpha():
        return 'No'
    var_3 = len([x for x in var_2[0] if x.isdigit()])
    if var_3 > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '396', '737', '823', '669', '774', '913', '454', '822']","import re

def file_name_check(file_name):
    var_1 = ['txt', 'exe', 'dll']
    var_2 = file_name.split(sep='.')
    if len(var_2)!= 2:
        return 'No'
    if not var_2[1] in var_1:
        return 'No'
    if len(var_2[0]) == 0:
        return 'No'
    if not var_2[0][0].isalpha():
        return 'No'
    var_3 = len([x for x in var_2[0] if x.isdigit()])
    if var_3 > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,0,normal,[],"def sum_squares(lst):
    return sum(i**2 if i % 3 == 0 else i**3 if i % 4 == 0 and i % 3!= 0 else i for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,1,normal,['142'],"def sum_squares(lst):
    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3!= 0 else x for i, x in enumerate(lst)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,5,normal,"['142', '340', 'HumanEval/32', 'HumanEval/67', 'HumanEval/4']","def sum_squares(lst):
    return sum([i**2 if i % 3 == 0 else i**3 if i % 4 == 0 and i % 3!= 0 else i for i in lst])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,10,normal,"['142', '340', 'HumanEval/32', 'HumanEval/67', 'HumanEval/4', '398', 'HumanEval/121', 'HumanEval/60', 'HumanEval/84', '271']","def sum_squares(lst):
    return sum([x**2 if i%3==0 else x**3 if i%4==0 and i%3!=0 else x for i, x in enumerate(lst)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,0,normal,[],"import math

def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    return''.join([word for word in words if is_prime(len(word))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,1,normal,['HumanEval/91'],"def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
            return False
        return True

    words = sentence.split()
    return''.join([word for word in words if is_prime(len(word))])",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: expected an indented block after 'if' statement on line 6 (<string>, line 7)"", 'completion_id': 0})]})"
143,HumanEval/143,5,normal,"['HumanEval/91', '570', '374', '523', '459']","def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    return''.join([word for word in words if is_prime(len(word))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,10,normal,"['HumanEval/91', '570', '374', '523', '459', '478', '495', 'HumanEval/17', 'HumanEval/19', 'HumanEval/107']","import re
import math

def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    words = re.split('[.?!]\\s*', sentence)
    return''.join([word for word in words if is_prime(len(word))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,0,normal,[],"from fractions import Fraction

def simplify(x, n):
    frac_x = Fraction(x)
    frac_n = Fraction(n)
    return frac_x * frac_n == frac_x * frac_n.limit_denominator()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,1,normal,['905'],"from fractions import Fraction

def simplify(x, n):
    x = Fraction(x)
    n = Fraction(n)
    return x * n == int(x * n)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['905', '148', 'HumanEval/39', 'HumanEval/32', 'HumanEval/94']","from fractions import Fraction

def simplify(x, n):
    frac_x = Fraction(x)
    frac_n = Fraction(n)
    return frac_x * frac_n == int(frac_x * frac_n)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,10,normal,"['905', '148', 'HumanEval/39', 'HumanEval/32', 'HumanEval/94', '541', '900', '218', '619', '121']","from fractions import Fraction

def simplify(x, n):
    frac_x = Fraction(x)
    frac_n = Fraction(n)
    return frac_x * frac_n.denominator == frac_x.numerator * frac_n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,0,normal,[],"def order_by_points(nums):
    return sorted(enumerate(nums), key=lambda x: (sum(int(digit) for digit in str(abs(x[1]))), x[0]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,1,normal,['HumanEval/145'],"def order_by_points(nums):
    def points(n):
        n = str(n)
        sign = 1
        if n[0] == '-':
            n = n[1:]
            sign = -1
        return sum(int(digit) * sign for digit in n)

    return sorted(nums, key=points)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,5,normal,"['HumanEval/145', '12', 'HumanEval/34', '472', '342']","def order_by_points(nums):
    def sum_of_digits(n):
        return sum(int(digit) for digit in str(abs(n)))
    
    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,10,normal,"['HumanEval/145', '12', 'HumanEval/34', '472', '342', 'HumanEval/116', '896', 'HumanEval/158', 'HumanEval/105', '340']","def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), -nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,0,normal,[],"def specialFilter(nums):
    count = 0
    for num in nums:
        if_str = str(abs(num))
        if num > 10 and (if_str[0] in '13579' and if_str[-1] in '13579'):
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,1,normal,['433'],"def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and (num % 10) % 2!= 0 and (num // 10) % 2!= 0:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,5,normal,"['433', '387', '781', 'HumanEval/105', 'HumanEval/113']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and (num % 10) % 2!= 0 and (num // 10) % 2!= 0:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,10,normal,"['433', '387', '781', 'HumanEval/105', 'HumanEval/113', '134', '148', 'HumanEval/108', 'HumanEval/146', '406']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            str_num = str(num)
            if int(str_num[0]) % 2!= 0 and int(str_num[-1]) % 2!= 0:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,0,normal,[],"def _max_triples(n):
    def get_value(i):
        return i * i - i + 1

    a = [get_value(i) for i in range(1, n + 1)]
    count = 0
    for i in range(n - 2):
        for j in range(i + 1, n - 1):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",0.0,entry point not found
147,HumanEval/147,1,normal,['911'],"def func_0(var_0):
    return max([var_0[i] * var_0[(i+1) % len(var_0)] * var_0[(i+2) % len(var_0)] for i in range(len(var_0))]",0.0,entry point not found
147,HumanEval/147,5,normal,"['911', '121', '357', 'HumanEval/9', '187']","def check_triplet(var_0, var_1, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or var_1 == 0 or sum < 0:
        return False
    return check_triplet(var_0, var_1 - 1, sum - var_0[var_1 - 1], count + 1) or check_triplet(var_0, var_1 - 1, sum, count)",0.0,entry point not found
147,HumanEval/147,10,normal,"['911', '121', '357', 'HumanEval/9', '187', 'HumanEval/26', 'HumanEval/59', '550', 'HumanEval/32', '366']","def check_triplet(var_0, var_1, sum, count):
    if count == 3 and sum == 0:
        return True
    if count == 3 or var_1 == 0 or sum < 0:
        return False
    return check_triplet(var_0, var_1 - 1, sum - var_0[var_1 - 1], count + 1) or check_triplet(var_0, var_1 - 1, sum, count)",0.0,entry point not found
148,HumanEval/148,0,normal,[],"def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    index1 = planets.index(planet1)
    index2 = planets.index(planet2)
    if index1 > index2:
        index1, index2 = index2, index1
    return tuple(planets[index1+1:index2])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,1,normal,['HumanEval/148'],"def baseRate(planet1, planet2):
    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    index1 = planets.index(planet1)
    index2 = planets.index(planet2)
    if index1 < index2:
        return planets[index1 + 1:index2]
    else:
        return planets[index2 + 1:index1]",0.0,entry point not found
148,HumanEval/148,5,normal,"['HumanEval/148', '873', '358', '282', '943']","def baseRate(planet1, planet2):
    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    if planet1 not in planets or planet2 not in planets:
        return []
    index1 = planets.index(planet1)
    index2 = planets.index(planet2)
    if index1 < index2:
        return planets[index1 + 1:index2]
    else:
        return planets[index2 + 1:index1]",0.0,entry point not found
148,HumanEval/148,10,normal,"['HumanEval/148', '873', '358', '282', '943', '729', '682', '103', 'HumanEval/159', '249']","def base_rate(planet1, planet2):
    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    if planet1 not in planets or planet2 not in planets:
        return []
    index1 = planets.index(planet1)
    index2 = planets.index(planet2)
    if index1 < index2:
        return planets[index1 + 1:index2]
    else:
        return planets[index2 + 1:index1]",0.0,entry point not found
149,HumanEval/149,0,normal,[],"def sorted_list_sum(lst):
    return sorted([word for word in lst if len(word) % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,1,normal,['949'],"def func_0(var_0):
    return sum([len(str(ele)) for ele in var_0])

def func_1(var_2):
    var_2.sort(key=func_0)
    return str(var_2)

def func_1(var_0):
    var_1 = [ele for ele in var_0 if ele!= 0]
    var_2 = []
    for var_3 in var_1:
        if var_3 not in var_2:
            var_2.append(var_3)
    return func_1(var_2)",0.0,entry point not found
149,HumanEval/149,5,normal,"['949', '12', 'HumanEval/145', 'HumanEval/34', '340']","def sorted_wines(wines):
    return sorted([wine for wine in wines if wine!= 0], key=lambda x: (len(str(x)), x))",0.0,entry point not found
149,HumanEval/149,10,normal,"['949', '12', 'HumanEval/145', 'HumanEval/34', '340', 'HumanEval/4', 'HumanEval/58', 'HumanEval/19', '108', '472']","def func_0(var_0):
    return sorted([len(str(ele)) for ele in var_0 if ele!= 0])",0.0,entry point not found
150,HumanEval/150,0,normal,[],"import math

def x_or_y(n, x, y):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    if is_prime(n):
        return x
    else:
        return y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,1,normal,['260'],"def x_or_y(x, y):
    return y if x % 2 == 0 else x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['260', 'HumanEval/127', 'HumanEval/75', 'HumanEval/39', 'HumanEval/59']","def func_0(var_0, var_1):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    if is_prime(var_0) and is_prime(var_1):
        return 'YES'
    return 'NO'",0.0,entry point not found
150,HumanEval/150,10,normal,"['260', 'HumanEval/127', 'HumanEval/75', 'HumanEval/39', 'HumanEval/59', 'HumanEval/11', '269', '30', '338', '905']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def func(var_0, var_1):
    if is_prime(var_0):
        return var_1
    return ""NO""",0.0,entry point not found
151,HumanEval/151,0,normal,[],"def double_the_difference(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,1,normal,['HumanEval/4'],"from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(i**2 for i in lst if i % 2!= 0 and i > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,5,normal,"['HumanEval/4', '781', 'HumanEval/113', 'HumanEval/32', 'HumanEval/25']","def double_the_difference(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,10,normal,"['HumanEval/4', '781', 'HumanEval/113', 'HumanEval/32', 'HumanEval/25', '797', 'HumanEval/67', '398', '656', '293']","def double_the_difference(lst):
    return sum(i**2 for i in lst if i % 2!= 0 and i > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,0,normal,[],"def compare(scores, guesses):
    return [abs(score - guess) if score!= guess else 0 for score, guess in zip(scores, guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['433'],"def compare(scores, guesses):
    return [abs(score - guess) if score!= guess else 0 for score, guess in zip(scores, guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['433', '53', '787', '285', '434']","def compare(scores, guesses):
    return [abs(score - guess) if score!= guess else 0 for score, guess in zip(scores, guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['433', '53', '787', '285', '434', '186', '178', '756', '794', '879']","def compare(scores, guesses):
    return [abs(score - guess) if score!= guess else 0 for score, guess in zip(scores, guesses)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,0,normal,[],"def Strongest_Extension(class_name, extensions):
    def strength(extension):
        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())

    strongest = max(extensions, key=strength)
    return f""{class_name}.{strongest}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/6'],"def Strongest_Extension(class_name, extensions):
    def calculate_strength(extension):
        return sum(1 for char in class_name if char.isupper()) - sum(1 for char in extension if char.islower())

    strongest_extension = max(extensions, key=calculate_strength)
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,5,normal,"['HumanEval/6', '232', '254', '911', '648']","def Strongest_Extension(class_name, extensions):
    def calculate_strength(extension):
        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())

    strongest_extension = max(extensions, key=calculate_strength)
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,10,normal,"['HumanEval/6', '232', '254', '911', '648', '523', '832', 'HumanEval/19', '200', '108']","def Strongest_Extension(class_name, extensions):
    def calculate_strength(extension):
        return sum(1 for char in class_name if char.isupper()) - sum(1 for char in extension if char.islower())

    strongest_extension = max(extensions, key=calculate_strength)
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,0,normal,[],"def cycpattern_check(a, b):
    for i in range(len(b)):
        if b in a[i:] + a[:i]:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,1,normal,['823'],"import re

def stump(var_0, var_1):
    if var_1 in var_0:
        var_2 = '\\A' + var_1
        var_3 = re.search(var_2, var_0)
        if var_3:
            return True
        else:
            return False
    else:
        return False",0.0,entry point not found
154,HumanEval/154,5,normal,"['823', '352', 'HumanEval/64', '643', '454']","import re

def cutting_knowledge(word1, word2):
    return re.search(word2, word1) is not None",0.0,entry point not found
154,HumanEval/154,10,normal,"['823', '352', 'HumanEval/64', '643', '454', '794', '879', '917', '285', '485']","import re

def func_0(var_0, var_1):
    if var_1 in var_0:
        var_2 = '\\A' + var_1
        var_3 = re.search(var_2, var_0)
        if var_3:
            return'string starts with the given substring'
        else:
            return'string doesnt start with the given substring'
    else:
        return 'entered string isnt a substring'

def func_1(var_0):
    for var_1 in range(len(var_0)):
        for var_2 in range(var_1 + 1, len(var_0)):
            if var_0[var_1] == var_0[var_2]:
                return False
    return True

def func_2(var_0):
    var_1 = ""aeiouAEIOU""
    var_2 = sum(c in var_1 for c in var_0)
    if var_0[-1] == 'e' or var_0[-1] == 'E':
        var_2 += 1
    return var_2

def func_3(var_0):
    var_1 = ""\\Bz\\B""
    if re.search(var_1, var_0):
        return 'Found a match!'
    else:
        return 'Not matched!'

def func_4(var_0):
    var_1 = ""\\w*z\\w*""
    if re.search(var_1, var_0):
        return 'Found a match!'
    else:
        return 'Not matched!'

def func_5(var_0):
    var_1 = ""a.*?b$""
    if re.search(var_1, var_0):
        return 'Found a match!'
    else:
        return 'Not matched!'

def func_6(var_0):
    var_1 = ""[A-Z]+[a-z]+$""
    if re.search(var_1, var_0):
        return 'Found a match!'
    else:
        return 'Not matched!'

def func_7(var_0):
    var_1 = ""ab{2,3}""
    if re.search(var_1, var_0):
        return 'Found a match!'
    else:
        return 'Not matched!'

def func_8(var_0):
    var_1 = 1
    while var_0 / var_1 >= 10:",0.0,entry point not found
155,HumanEval/155,0,normal,[],"def even_odd_count(num):
    even = 0
    odd = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even += 1
        else:
            odd += 1
    return (even, odd)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,1,normal,['781'],"def even_odd_count(num):
    even = 0
    odd = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even += 1
        else:
            odd += 1
    return (even, odd)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['781', '387', '134', '406', 'HumanEval/113']","def even_odd_count(num):
    even = 0
    odd = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even += 1
        else:
            odd += 1
    return (even, odd)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['781', '387', '134', '406', 'HumanEval/113', '218', '583', '873', 'HumanEval/146', 'HumanEval/83']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,0,normal,[],"def int_to_mini_roman(number):
    if not isinstance(number, int) or not 1 <= number <= 1000:
        raise ValueError(""Input must be an integer between 1 and 1000"")

    roman_numerals = {
        1000:'m',
        900: 'cm',
        500: 'd',
        400: 'cd',
        100: 'c',
        90: 'xc',
        50: 'l',
        40: 'xl',
        10: 'x',
        9: 'ix',
        5: 'v',
        4: 'iv',
        1: 'i'
    }

    result = ''
    for value, numeral in roman_numerals.items():
        while number >= value:
            result += numeral
            number -= value

    return result.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['HumanEval/15'],"import csv

def int_to_mini_roman(num: int) -> str:
    roman_numerals = {
        1000: 'M',
        900: 'CM',
        500: 'D',
        400: 'CD',
        100: 'C',
        90: 'XC',
        50: 'L',
        40: 'XL',
        10: 'X',
        9: 'IX',
        5: 'IV',
        4: 'III',
        1: 'I'
    }

    def int_to_roman(num):
        for value, numeral in roman_numerals.items():
            while num >= value:
                num -= value
                var_1.append(numeral)
        return ''.join(var_1)

    return int_to_roman(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['HumanEval/15', '619', 'HumanEval/39', '411', '583']","import csv

def int_to_mini_roman(number):
    roman_numerals = {
        1000: 'M',
        900: 'CM',
        500: 'D',
        400: 'CD',
        100: 'C',
        90: 'XC',
        50: 'L',
        40: 'XL',
        10: 'X',
        9: 'IX',
        5: 'V',
        4: 'IV',
        1: 'I'
    }

    result = ''
    for value in sorted(roman_numerals.keys(), reverse=True):
        while number >= value:
            result += roman_numerals[value]
            number -= value
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['HumanEval/15', '619', 'HumanEval/39', '411', '583', '566', '693', '892', '621', 'HumanEval/51']","import csv

def int_to_mini_roman(number):
    roman_numerals = {
        1000: 'M',
        900: 'CM',
        500: 'D',
        400: 'CD',
        100: 'C',
        90: 'XC',
        50: 'L',
        40: 'XL',
        10: 'X',
        9: 'IX',
        5: 'V',
        4: 'IV',
        1: 'I'
    }
    result = ''
    for value, numeral in roman_numerals.items():
        while number >= value:
            result += numeral
            number -= value
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,0,normal,[],"import math

def right_angle_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['826'],"import math

def right_angled_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    if sides[0]**2 + sides[1]**2 == sides[2]**2:
        return 'Right-angled Triangle'
    elif sides[0]**2 + sides[1]**2 < sides[2]**2 or sides[1]**2 + sides[2]**2 < sides[0]**2 or sides[2]**2 + sides[0]**2 < sides[1]**2:
        return 'Obtuse-angled Triangle'
    else:
        return 'Acute-angled Triangle'",0.0,entry point not found
157,HumanEval/157,5,normal,"['826', '677', '786', '884', '180']","import math

def right_angled_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return sides[0]**2 + sides[1]**2 == sides[2]**2",0.0,entry point not found
157,HumanEval/157,10,normal,"['826', '677', '786', '884', '180', '228', '887', '323', '650', '308']","import math

def is_right_angled(var_0, var_1, var_2):
    return math.isclose(math.sqrt(var_0**2 + var_1**2), var_2) or math.isclose(math.sqrt(var_0**2 + var_2**2), var_1) or math.isclose(math.sqrt(var_1**2 + var_2**2), var_0)

def is_right_angled_triangle(var_0, var_1, var_2):
    return is_right_angled(var_0, var_1, var_2)

def right_rotate(var_0, var_1, var_2, index):
    var_3 = var_0[index]
    for var_4 in range(index, var_2, -1):
        var_0[var_4] = var_0[var_4 - 1]
    var_0[var_2] = var_3
    return var_0

def is_sorted(var_0, var_1):
    return var_0 == sorted(var_0) == sorted(var_1)

def multiply(var_0, var_1, var_2):
    return [x * y for x in var_0 for y in var_1][:var_2]

def is_right_angled(var_0, var_1, var_2):
    return is_sorted(multiply(var_0, var_1, var_2), multiply(var_1, var_2, var_0))",0.0,entry point not found
158,HumanEval/158,0,normal,[],"from collections import Counter

def find_max(words):
    max_unique = 0
    chr(0)
    for word in words:
        unique_chars = len(Counter(word))
        if unique_chars > max_unique:
            max_unique = unique_chars
            max_word = word
        elif unique_chars == max_unique:
            max_word = min(max_word, word)
    return max_word",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,1,normal,['HumanEval/6'],"def find_max(words):
    max_word = max(words, key=lambda word: (len(set(word)), word))
    return max_word",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['HumanEval/6', '299', '90', '366', '805']","def find_max(words):
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['HumanEval/6', '299', '90', '366', '805', '911', '562', '393', '517', '523']","def find_max(words):
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,0,normal,[],"def eat(number, need, remaining):
    total_eaten = number + need
    remaining_carrots = min(remaining, total_eaten)
    return [total_eaten, remaining_carrots]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['950'],"def eat(carrots_eaten, carrots_needed, remaining_carrots):
    if carrots_eaten + 3 <= remaining_carrots:
        return [carrots_eaten + 3, remaining_carrots - 3]
    else:
        return [carrots_eaten + remaining_carrots, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['950', '873', '31', '39', '843']","def eat(carrots_eaten, carrots_needed):
    if carrots_eaten >= carrots_needed:
        return [carrots_eaten, 0]
    else:
        return [carrots_eaten, carrots_needed - carrots_eaten]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['950', '873', '31', '39', '843', 'HumanEval/113', '211', '365', 'HumanEval/146', '385']","def eat(carrots_eaten, carrots_needed):
    if carrots_eaten >= carrots_needed:
        return [carrots_eaten, 0]
    else:
        return [carrots_eaten, carrots_needed - carrots_eaten]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,0,normal,[],"import operator as op

def do_algebra(operator, operand):
    ops = {
        '+': op.add,
        '-': op.sub,
        '*': op.mul,
        '//': op.floordiv,
        '**': op.pow
    }
    
    result = operand[0]
    for i in range(len(operator)):
        result = op.add(result, op.sub(result, op.mul(operand[i+1], op.pow(1, op.floordiv(op.sub(operand[i+1], 1), 1)))))
        for op_name in operator[i]:
            result = op.add(result, op.sub(result, op.mul(operand[i+1], op.pow(1, op.floordiv(op.sub(operand[i+1], 1), 1))))
        result = op.add(result, op.sub(result, op.mul(operand[i+1], op.pow(1, op.floordiv(op.sub(operand[i+1], 1), 1))))
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax. Perhaps you forgot a comma? (<string>, line 16)', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['HumanEval/32'],"def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i+1]
        elif operator[i] == '-':
            result -= operand[i+1]
        elif operator[i] == '*':
            result *= operand[i+1]
        elif operator[i] == '//':
            result //= operand[i+1]
        elif operator[i] == '**':
            result **= operand[i+1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,5,normal,"['HumanEval/32', 'HumanEval/11', 'HumanEval/115', 'HumanEval/67', 'HumanEval/25']","def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i + 1]
        elif operator[i] == '-':
            result -= operand[i + 1]
        elif operator[i] == '*':
            result *= operand[i + 1]
        elif operator[i] == '//':
            result //= operand[i + 1]
        elif operator[i] == '**':
            result **= operand[i + 1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,10,normal,"['HumanEval/32', 'HumanEval/11', 'HumanEval/115', 'HumanEval/67', 'HumanEval/25', '780', '218', '905', '30', '338']","def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i + 1]
        elif operator[i] == '-':
            result -= operand[i + 1]
        elif operator[i] == '*':
            result *= operand[i + 1]
        elif operator[i] == '//':
            result //= operand[i + 1]
        elif operator[i] == '**':
            result **= operand[i + 1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,0,normal,[],"def solve(s):
    result = []
    for char in s:
        if char.isalpha():
            result.append(char.swapcase())
        else:
            result.append(char)
    return ''.join(result) if any(c.isalpha() for c in s) else s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,1,normal,['823'],"def solve(s):
    result = ''
    reverse = False
    for char in s:
        if char.isalpha():
            if char.islower():
                result += char.upper()
            else:
                result += char.lower()
        else:
            result += char
            reverse = not reverse
    if reverse:
        return result[::-1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,5,normal,"['823', '523', 'HumanEval/64', '53', '364']","def solve(s):
    result = """"
    for char in s:
        if char.isalpha():
            result += char.swapcase()
        else:
            result += char
    return result[::-1] if not any(char.isalpha() for char in s) else result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,10,normal,"['823', '523', 'HumanEval/64', '53', '364', '482', 'HumanEval/51', 'HumanEval/27', '15', '647']","def solve(s):
    result = ''
    for char in s:
        if char.isalpha():
            result += char.swapcase()
        else:
            result += char
    return result[::-1] if not any(char.isalpha() for char in s) else result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,0,normal,[],"import hashlib

def string_to_md5(text):
    if not text:
        return None
    return hashlib.md5(text.encode()).hexdigest()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,5,normal,"['HumanEval/162', '319', '877', '330', '374']","import hashlib
import re

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
