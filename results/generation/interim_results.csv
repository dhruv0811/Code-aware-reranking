query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', '809', '431']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', '809', '431', '938', '695', '433', '508', '790']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(len(numbers) - 1):
        if numbers[i + 1] - numbers[i] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/1'],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string.replace(' ', ''):
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/1', 'HumanEval/6', '640', 'HumanEval/119', 'HumanEval/132']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    for c in paren_string.replace(' ', ''):
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,10,normal,"['HumanEval/1', 'HumanEval/6', '640', 'HumanEval/119', 'HumanEval/132', '175', '73', '693', '892', '678']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_string = []
    current_depth = 0

    paren_string = paren_string.replace(' ', '')

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/2'],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/2', 'HumanEval/99', '99', '194', '467']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/2', 'HumanEval/99', '99', '194', '467', 'HumanEval/137', 'HumanEval/156', '24', 'HumanEval/79', '407']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', 'HumanEval/52', '481', '670', '637']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', 'HumanEval/52', '481', '670', '637', '313', '134', 'HumanEval/40', '121', '340']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['HumanEval/4'],"from typing import List
import statistics

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = statistics.mean(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['HumanEval/4', '717', '509', '144', '656']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['HumanEval/4', '717', '509', '144', '656', '664', '145', '615', '959', '63']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List
from itertools import chain, repeat

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    return list(chain(*zip(numbers, repeat(delimeter))))[:-1] + [numbers[-1]] if numbers else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,5,normal,"['HumanEval/5', '251', '503', '578', '690']","from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    return [n for pair in zip(numbers, [delimeter]*len(numbers)) for n in pair][:-1] if numbers else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', '251', '503', '578', '690', '648', '591', '345', '625', '629']","from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    return [x for pair in zip([delimeter]*len(numbers), numbers) for x in pair][:-1] if numbers else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif c == ')':
                depth -= 1
        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,5,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/119', '175']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif c == ')':
                depth -= 1
        return max_depth if depth == 0 else 0

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,10,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/119', '175', '640', '580', '73', 'HumanEval/61', '247']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1
        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', '91', '570', '823']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', '91', '570', '823', 'HumanEval/22', '210', '18', 'HumanEval/14', '495']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return reduce(add, numbers, 0), prod(numbers, 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', '925', '514', '65', '734']","from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return reduce(add, numbers, 0), prod(numbers, 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', '925', '514', '65', '734', '780', '886', '599', '573', '170']","from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return reduce(add, numbers, 0), prod(numbers, 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    return [max(numbers[:i+1]) for i in range(len(numbers))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,5,normal,"['HumanEval/9', '357', '362', '200', '658']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    return [max(numbers[:i+1]) for i in range(len(numbers))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', '357', '362', '200', '658', '130', 'HumanEval/35', '613', '611', '23']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    result = []
    max_so_far = float('-inf')
    for num in numbers:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = len(string) - 1

    while not string[beginning_of_suffix:] == string[beginning_of_suffix:][::-1]:
        beginning_of_suffix -= 1

    return string + string[:beginning_of_suffix+1][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', 'HumanEval/48', '864', '247', 'HumanEval/112']","def make_palindrome(string: str) -> str:
    if not string:
        return ''

    for i in range(len(string), 0, -1):
        if string[:i] == string[:i][::-1]:
            return string + string[:len(string) - i][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', 'HumanEval/48', '864', '247', 'HumanEval/112', '909', '914', '53', '604', '100']","def make_palindrome(string: str) -> str:
    if not string:
        return ''

    beginning_of_suffix = len(string) - 1

    while not string[beginning_of_suffix:] == string[beginning_of_suffix:][::-1]:
        beginning_of_suffix -= 1

    return string + string[:beginning_of_suffix+1][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('0' if x == y else '1' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', '399', '633', '349', '556']","from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', '399', '633', '349', '556', '456', '699', '838', '595', '166']","def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    return next((s for s in strings if len(s) == max(map(len, strings))), None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', '90', '326', 'HumanEval/14', '181']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', '90', '326', 'HumanEval/14', '181', '207', 'HumanEval/158', '937', '247', '315']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['HumanEval/13'],"import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['HumanEval/13', '687', '126', '498', '501']","def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['HumanEval/13', '687', '126', '498', '501', 'HumanEval/97', 'HumanEval/163', 'HumanEval/24', '45', '47']","def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/14'],"from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/28']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/28', '254', 'HumanEval/7', 'HumanEval/10', '247', '30']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['HumanEval/15'],"def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,5,normal,"['HumanEval/15', 'HumanEval/46', 'HumanEval/63', '220', '628']","def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,10,normal,"['HumanEval/15', 'HumanEval/46', 'HumanEval/63', '220', '628', 'HumanEval/140', 'HumanEval/19', '747', 'HumanEval/23', '125']","def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['HumanEval/16'],"def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['HumanEval/16', '684', '666', '165', '461']","def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['HumanEval/16', '684', '666', '165', '461', 'HumanEval/18', '352', '204', '242', '238']","def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split() if x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,5,normal,"['HumanEval/17', '88', '667', '118', '113']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    result = []
    temp = ''
    for note in notes:
        if note in note_map:
            result.append(note_map[note])
        else:
            temp += note
            if temp in note_map:
                result.append(note_map[temp])
                temp = ''
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,10,normal,"['HumanEval/17', '88', '667', '118', '113', '686', '785', '146', 'HumanEval/64', '813']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_map = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    result = []
    temp = ''
    for note in notes:
        if note in note_map:
            result.append(note_map[note])
        else:
            temp += note
            if temp in note_map:
                result.append(note_map[temp])
                temp = ''
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['HumanEval/18'],"def how_many_times(string: str, substring: str) -> int:
    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['HumanEval/18', '684', '238', '338', 'HumanEval/16']","def how_many_times(string: str, substring: str) -> int:
    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['HumanEval/18', '684', '238', '338', 'HumanEval/16', '666', '172', '773', '30', '204']","def how_many_times(string: str, substring: str) -> int:
    return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted(numbers.split(), key=value_map.get))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', '749', 'HumanEval/70', '37', '516']","from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted(numbers.split(), key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', '749', 'HumanEval/70', '37', '516', 'HumanEval/126', '71', '877', 'HumanEval/145', '141']","from typing import List

def sort_numbers(numbers: str) -> str:
    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
       'six': 6,
       'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return''.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_distance = float('inf')
    closest_pair = None

    for i in range(len(numbers) - 1):
        distance = numbers[i + 1] - numbers[i]
        if distance < min_distance:
            min_distance = distance
            closest_pair = (numbers[i], numbers[i + 1])

    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,5,normal,"['HumanEval/20', 'HumanEval/0', '755', '938', '89']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,10,normal,"['HumanEval/20', 'HumanEval/0', '755', '938', '89', 'HumanEval/99', '579', '951', '809', '62']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number, max_number = min(numbers), max(numbers)
    range_number = max_number - min_number
    return [(x - min_number) / range_number if range_number!= 0 else 0 for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,5,normal,"['HumanEval/21', '117', '98', '919', '439']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number, max_number = min(numbers), max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,10,normal,"['HumanEval/21', '117', '98', '919', '439', 'HumanEval/20', '830', '419', '755', '673']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,5,normal,"['HumanEval/22', '277', '41', 'HumanEval/7', '253']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,10,normal,"['HumanEval/22', '277', '41', 'HumanEval/7', '253', '426', 'HumanEval/29', '113', 'HumanEval/26', '673']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['HumanEval/23'],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['HumanEval/23', '813', 'HumanEval/82', '868', '242']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['HumanEval/23', '813', 'HumanEval/82', '868', '242', 'HumanEval/18', '238', 'HumanEval/16', '146', '79']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['HumanEval/24'],"def largest_divisor(n: int) -> int:
    for i in reversed(range(1, n)):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['HumanEval/24', '96', '681', '620', '339']","def largest_divisor(n: int) -> int:
    for i in range(n - 1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['HumanEval/24', '96', '681', '620', '339', '485', '483', '781', 'HumanEval/59', '388']","def largest_divisor(n: int) -> int:
    for i in range(n - 1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/25'],"import math

def factorize(n: int) -> List[int]:
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        while n % i == 0:
            fact.append(i)
            n //= i
        i += 1

    if n > 1:
        fact.append(n)
    return fact",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
25,HumanEval/25,5,normal,"['HumanEval/25', '32', '714', '511', '901']","import math

def factorize(n: int) -> List[int]:
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        while n % i == 0:
            fact.append(i)
            n //= i
        i += 1

    if n > 1:
        fact.append(n)
    return fact",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
25,HumanEval/25,10,normal,"['HumanEval/25', '32', '714', '511', '901', '681', 'HumanEval/106', '453', 'HumanEval/59', '849']","import math

def factorize(n: int) -> List[int]:
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List
import collections

def remove_duplicates(numbers: List[int]) -> List[int]:
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] == 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,5,normal,"['HumanEval/26', '712', '22', '572', '730']","from typing import List
from collections import OrderedDict

def remove_duplicates(numbers: List[int]) -> List[int]:
    return list(OrderedDict.fromkeys([n for n in numbers if numbers.count(n) == 1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,10,normal,"['HumanEval/26', '712', '22', '572', '730', '193', '376', '932', '674', '819']","from typing import List
from collections import Counter

def remove_duplicates(numbers: List[int]) -> List[int]:
    c = Counter(numbers)
    return [n for n in numbers if c[n] == 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,5,normal,"['HumanEval/27', '557', 'HumanEval/161', '477', '624']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', 'HumanEval/161', '477', '624', '364', '604', '461', '818', '478']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', '500', '213', '390', '874']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,10,normal,"['HumanEval/28', '500', '213', '390', '874', '538', '857', '421', '206', '544']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', '823', '181']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', '823', '181', '254', 'HumanEval/22', '737', '570', '396']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/30'],"def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,5,normal,"['HumanEval/30', '66', '870', '313', '189']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,10,normal,"['HumanEval/30', '66', '870', '313', '189', 'HumanEval/57', 'HumanEval/52', 'HumanEval/42', 'HumanEval/69', '436']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/31'],"import math

def is_prime(n):
    if n < 2:
        return False
    for k in range(2, int(math.sqrt(n)) + 1):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/31', '605', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39']","import math

def is_prime(n):
    if n < 2:
        return False
    for k in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/31', '605', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39', 'HumanEval/96', '151', '256', 'HumanEval/82', 'HumanEval/150']","import math

def is_prime(n):
    if n < 2:
        return False
    for k in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
        if n % k == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def find_zero(xs: list):
    if len(xs) % 2!= 0 or xs[-1] == 0:
        raise ValueError(""The input list must have an even number of coefficients and the largest coefficient must be non-zero."")

    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,5,normal,"['HumanEval/32', 'HumanEval/62', '880', '160', '453']","import math

def find_zero(xs: list):
    if len(xs) % 2!= 0 or xs[-1] == 0:
        raise ValueError(""Input list must have an even number of coefficients and a non-zero leading coefficient"")

    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,10,normal,"['HumanEval/32', 'HumanEval/62', '880', '160', '453', '853', '406', '851', '493', '359']","import math

def find_zero(xs: list):
    if len(xs) % 2!= 0 or xs[-1] == 0:
        raise ValueError(""Input list must have an even number of coefficients and a non-zero leading coefficient"")
    
    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/37', 'HumanEval/34', 'HumanEval/70', '516']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/37', 'HumanEval/34', 'HumanEval/70', '516', '333', 'HumanEval/126', '243', 'HumanEval/42', '71']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', 'HumanEval/104', '281', 'HumanEval/33', 'HumanEval/42']","def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', 'HumanEval/104', '281', 'HumanEval/33', 'HumanEval/42', 'HumanEval/37', 'HumanEval/70', '694', 'HumanEval/35', 'HumanEval/47']","def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['HumanEval/35'],"def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['HumanEval/35', '418', '357', 'HumanEval/34', 'HumanEval/42']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['HumanEval/35', '418', '357', 'HumanEval/34', 'HumanEval/42', '562', 'HumanEval/47', '613', '200', '658']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['HumanEval/36'],"def fizz_buzz(n: int):
    return sum(1 for i in range(n) if ('7' in str(i)) and (i % 11 == 0 or i % 13 == 0))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['HumanEval/36', '211', '78', '283', 'HumanEval/55']","def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['HumanEval/36', '211', '78', '283', 'HumanEval/55', 'HumanEval/146', 'HumanEval/131', 'HumanEval/155', '842', '96']","def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/37'],"def sort_even(l: list):
    evens = sorted(l[::2])
    odds = l[1::2]
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/37', 'HumanEval/33', 'HumanEval/34', '824', 'HumanEval/70']","def sort_even(l: list):
    evens = sorted(l[::2])
    return [x for pair in zip(evens, l[1::2]) for x in pair] + evens[len(l[1::2]):]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/37', 'HumanEval/33', 'HumanEval/34', '824', 'HumanEval/70', '790', '629', '71', '567', 'HumanEval/126']","def sort_even(l: list):
    evens = sorted(l[::2])
    return [val for pair in zip(evens, l[1::2]) for val in pair] + evens[len(l[1::2]):]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def decode_cyclic(s: str):
    return s[1:] + s[0] if len(s) == 3 else s
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', 'HumanEval/50', 'HumanEval/89', 'HumanEval/93', '157']","def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,10,normal,"['HumanEval/38', 'HumanEval/50', 'HumanEval/89', 'HumanEval/93', '157', 'HumanEval/65', '317', '215', '747', '973']","def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['HumanEval/39'],"import math

def is_prime(p):
    if p < 2:
        return False
    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
        if p % k == 0:
            return False
    return True

def prime_fib(n: int):
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['HumanEval/39', 'HumanEval/55', 'HumanEval/46', 'HumanEval/63', 'HumanEval/31']","import math

def is_prime(p):
    if p < 2:
        return False
    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
        if p % k == 0:
            return False
    return True

def prime_fib(n: int):
    f = [0, 1]
    count = 0
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            count += 1
        if count == n:
            return f[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['HumanEval/39', 'HumanEval/55', 'HumanEval/46', 'HumanEval/63', 'HumanEval/31', 'HumanEval/96', 'HumanEval/130', 'HumanEval/59', '605', '873']","import math

def is_prime(p):
    if p < 2:
        return False
    for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
        if p % k == 0:
            return False
    return True

def prime_fib(n: int):
    a, b = 0, 1
    count = 0
    while True:
        if is_prime(a):
            count += 1
            if count == n:
                return a
        a, b = b, a + b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['HumanEval/40'],"def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i-1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,5,normal,"['HumanEval/40', 'HumanEval/43', '121', '916', 'HumanEval/142']","def triples_sum_to_zero(nums):
    nums.sort()
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i - 1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,10,normal,"['HumanEval/40', 'HumanEval/43', '121', '916', 'HumanEval/142', '340', '65', 'HumanEval/92', '661', 'HumanEval/147']","def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i - 1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['HumanEval/41'],"def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,5,normal,"['HumanEval/41', '414', '249', '187', '239']","def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,10,normal,"['HumanEval/41', '414', '249', '187', '239', '473', '183', '564', '971', '298']","def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list):
    return [(e + 1) for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', 'HumanEval/34', '766', 'HumanEval/33', 'HumanEval/35']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', 'HumanEval/34', '766', 'HumanEval/33', 'HumanEval/35', 'HumanEval/85', 'HumanEval/37', 'HumanEval/57', 'HumanEval/58', '472']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['HumanEval/43'],"def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set and num!= 0:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
