query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,0,normal,[],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/52', '433', 'HumanEval/3', 'HumanEval/26']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i - 1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/52', '433', 'HumanEval/3', 'HumanEval/26', 'HumanEval/21', 'HumanEval/25', 'HumanEval/7', '342', 'HumanEval/20']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    numbers.sort()
    for i in range(1, len(numbers)):
        if numbers[i] - numbers[i-1] < threshold:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,0,normal,[],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    paren_string = paren_string.replace(' ', '')
    result = []
    temp = ''
    count = 0
    for char in paren_string:
        temp += char
        if char == '(':
            count += 1
        else:
            count -= 1
        if count == 0:
            result.append(temp)
            temp = ''
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/6'],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    temp = ''
    count = 0
    for char in paren_string.replace(' ', ''):
        temp += char
        if char == '(':
            count += 1
        else:
            count -= 1
        if count == 0:
            result.append(temp)
            temp = ''
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/6', '305', '157', 'HumanEval/17', 'HumanEval/19']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    temp = ''
    count = 0
    for char in paren_string.replace(' ', ''):
        temp += char
        if char == '(':
            count += 1
        else:
            count -= 1
        if count == 0:
            result.append(temp)
            temp = ''
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,10,normal,"['HumanEval/6', '305', '157', 'HumanEval/17', 'HumanEval/19', '374', '778', '73', 'HumanEval/1', 'HumanEval/29']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    temp = ''
    count = 0
    for char in paren_string.replace(' ', ''):
        temp += char
        if char == '(':
            count += 1
        else:
            count -= 1
        if count == 0:
            result.append(temp)
            temp = ''
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,0,normal,[],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/99'],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/99', '99', '739', '566', '518']","import math

def truncate_number(number: float) -> float:
    return number - math.floor(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/99', '99', '739', '566', '518', 'HumanEval/2', '851', '671', '519', 'HumanEval/77']","def truncate_number(number: float) -> float:
    return number % 1.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,0,normal,[],"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', '481', 'HumanEval/0', 'HumanEval/94', 'HumanEval/39']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', '481', 'HumanEval/0', 'HumanEval/94', 'HumanEval/39', '598', '121', 'HumanEval/75', 'HumanEval/134', 'HumanEval/59']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,0,normal,[],"from typing import List
import statistics

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = statistics.mean(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['HumanEval/4'],"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['HumanEval/4', '717', 'HumanEval/21', 'HumanEval/0', 'HumanEval/25']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['HumanEval/4', '717', 'HumanEval/21', 'HumanEval/0', 'HumanEval/25', 'HumanEval/32', 'HumanEval/152', 'HumanEval/97', '63', '875']","from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,0,normal,[],"from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for i, num in enumerate(numbers):
        result.append(num)
        if i < len(numbers) - 1:
            result.append(delimeter)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []
    result = []
    for num in numbers[:-1]:
        result.append(num)
        result.append(delimeter)
    result.append(numbers[-1])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,5,normal,"['HumanEval/5', 'HumanEval/8', 'HumanEval/25', 'HumanEval/32', 'HumanEval/14']","from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for i, num in enumerate(numbers):
        result.append(num)
        if i < len(numbers) - 1:
            result.append(delimeter)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', 'HumanEval/8', 'HumanEval/25', 'HumanEval/32', 'HumanEval/14', 'HumanEval/17', 'HumanEval/1', 'HumanEval/29', 'HumanEval/7', 'HumanEval/6']","from typing import List

def intersperse(numbers: List[int], delimiter: int) -> List[int]:
    result = []
    for i, num in enumerate(numbers):
        result.append(num)
        if i < len(numbers) - 1:
            result.append(delimiter)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,0,normal,[],"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    groups = paren_string.split()
    result = []
    
    for group in groups:
        max_depth = 0
        current_depth = 0
        
        for char in group:
            if char == '(':
                current_depth += 1
                max_depth = max(max_depth, current_depth)
            elif char == ')':
                current_depth -= 1
        
        result.append(max_depth)
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(group: str) -> int:
        depth = 0
        max_depth = 0
        for char in group:
            if char == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif char == ')':
                depth -= 1
        return max_depth

    return [parse_paren_group(group) for group in paren_string.split() if group]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,5,normal,"['HumanEval/6', '305', 'HumanEval/17', 'HumanEval/19', '374']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def max_depth(paren_group: str) -> int:
        depth = 0
        max_depth = 0
        for char in paren_group:
            if char == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif char == ')':
                depth -= 1
        return max_depth

    return [max_depth(group) for group in paren_string.split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,10,normal,"['HumanEval/6', '305', 'HumanEval/17', 'HumanEval/19', '374', 'HumanEval/1', 'HumanEval/105', 'HumanEval/29', 'HumanEval/7', 'HumanEval/21']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(group: str) -> int:
        depth = 0
        max_depth = 0
        for char in group:
            if char == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif char == ')':
                depth -= 1
        return max_depth

    return [parse_paren_group(group) for group in paren_string.split(' ') if group]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,0,normal,[],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/1', '823', 'HumanEval/17']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/1', '823', 'HumanEval/17', 'HumanEval/6', '27', 'HumanEval/22', 'HumanEval/5', 'HumanEval/0']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [string for string in strings if substring in string]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,0,normal,[],"from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return (reduce(add, numbers, 0), prod(numbers, 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return (reduce(add, numbers, 0), prod(numbers, 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', 'HumanEval/60', '796', 'HumanEval/32', 'HumanEval/4']","from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return (reduce(add, numbers, 0), prod(numbers, 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', 'HumanEval/60', '796', 'HumanEval/32', 'HumanEval/4', '514', 'HumanEval/67', '870', '398', '133']","from typing import List, Tuple
from math import prod
from functools import reduce
from operator import add

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    return (reduce(add, numbers, 0), prod(numbers, 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,0,normal,[],"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    max_so_far = float('-inf')
    result = []
    for num in numbers:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    if not numbers:
        return []
    
    max_so_far = numbers[0]
    result = [max_so_far]
    
    for num in numbers[1:]:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,5,normal,"['HumanEval/9', 'HumanEval/21', 'HumanEval/12', 'HumanEval/6', 'HumanEval/25']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    max_so_far = float('-inf')
    result = []
    for num in numbers:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', 'HumanEval/21', 'HumanEval/12', 'HumanEval/6', 'HumanEval/25', '299', '805', 'HumanEval/26', '90', '951']","from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    if not numbers:
        return []
    
    max_so_far = numbers[0]
    result = [max_so_far]
    
    for num in numbers[1:]:
        max_so_far = max(max_so_far, num)
        result.append(max_so_far)
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,0,normal,[],"def make_palindrome(string: str) -> str:
    if not string:
        return string

    rev_string = string[::-1]
    for i in range(len(string), 0, -1):
        if string.startswith(rev_string[i:]):
            return string + rev_string[:i]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def make_palindrome(string: str) -> str:
    if not string:
        return ''
    for i in range(len(string), -1, -1):
        if string[i:] == string[i:][::-1]:
            return string + string[:i][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', '485', 'HumanEval/107', '823', '53']","def make_palindrome(string: str) -> str:
    if not string:
        return ''
    for i in range(len(string), 0, -1):
        if string[i:] == string[i:][::-1]:
            return string + string[:i][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', '485', 'HumanEval/107', '823', '53', '352', '374', '364', 'HumanEval/64', '523']","def make_palindrome(string: str) -> str:
    if not string:
        return ''
    for i in range(len(string), 0, -1):
        if string[:i] == string[:i][::-1]:
            return string + string[:i-1][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,0,normal,[],"from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', 'HumanEval/17', '53', 'HumanEval/7', 'HumanEval/29']","from typing import List

def string_xor(a: str, b: str) -> str:
    return ''.join('0' if x == y else '1' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', 'HumanEval/17', '53', 'HumanEval/7', 'HumanEval/29', '192', '364', 'HumanEval/28', 'HumanEval/22', '523']","def string_xor(a: str, b: str) -> str:
    return ''.join('1' if x!= y else '0' for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,0,normal,[],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', 'HumanEval/6', 'HumanEval/9', 'HumanEval/1', 'HumanEval/19']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', 'HumanEval/6', 'HumanEval/9', 'HumanEval/1', 'HumanEval/19', 'HumanEval/28', 'HumanEval/17', 'HumanEval/7', 'HumanEval/29', 'HumanEval/11']","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,0,normal,[],"def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['151'],"def greatest_common_divisor(a: int, b: int) -> int:
    while b!= 0:
        a, b = (b, a % b)
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['151', '45', '218', '687', '28']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    while b!= 0:
        a, b = (b, a % b)
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['151', '45', '218', '687', '28', '621', '55', '260', '187', '488']","import math

def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = (b, a % b)
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,0,normal,[],"from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/29'],"from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/29', 'HumanEval/1', 'HumanEval/28', 'HumanEval/17', 'HumanEval/19']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/29', 'HumanEval/1', 'HumanEval/28', 'HumanEval/17', 'HumanEval/19', 'HumanEval/7', 'HumanEval/6', '374', 'HumanEval/14', 'HumanEval/5']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,0,normal,[],"def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['552'],"def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,5,normal,"['552', '84', '374', 'HumanEval/19', '877']","def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,10,normal,"['552', '84', '374', 'HumanEval/19', '877', '73', 'HumanEval/105', '18', '330', '523']","def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,0,normal,[],"def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['684'],"def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['684', '523', '374', '565', '238']","def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['684', '523', '374', '565', '238', 'HumanEval/66', 'HumanEval/113', '764', '18', '461']","def count_distinct_characters(string: str) -> int:
    return len(set(string.casefold()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,0,normal,[],"from typing import List

def parse_music(music_string: str) -> List[int]:
    notes = music_string.split()
    beats = {'o': 4, 'o|': 2, '.|': 1}
    return [beats[note] for note in notes]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"from typing import List

def parse_music(music_string: str) -> List[int]:
    note_values = {'o': 4, 'o|': 2, '.|': 1}
    return [note_values[x] for x in music_string.split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,5,normal,"['HumanEval/17', 'HumanEval/6', 'HumanEval/26', 'HumanEval/25', '374']","from typing import List

def parse_music(music_string: str) -> List[int]:
    note_durations = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    return [note_durations[note] for note in notes]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,10,normal,"['HumanEval/17', 'HumanEval/6', 'HumanEval/26', 'HumanEval/25', '374', 'HumanEval/1', '238', 'HumanEval/32', '673', 'HumanEval/64']","from typing import List

def parse_music(music_string: str) -> List[int]:
    notes = {'o': 4, 'o|': 2, '.|': 1}
    return [notes[x] for x in music_string.split()]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,0,normal,[],"def how_many_times(string: str, substring: str) -> int:
    count = 0
    start = 0
    while start < len(string):
        pos = string.find(substring, start)
        if pos!= -1:
            count += 1
            start = pos + 1
        else:
            break
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['684'],"def how_many_times(string: str, substring: str) -> int:
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['684', '823', '523', '374', '238']","import re

def how_many_times(string: str, substring: str) -> int:
    return len(re.findall('(?=' + re.escape(substring) + ')', string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['684', '823', '523', '374', '238', '352', '764', '461', '818', 'HumanEval/64']","def how_many_times(string: str, substring: str) -> int:
    count = 0
    start = 0
    while start < len(string):
        pos = string.find(substring, start)
        if pos!= -1:
            count += 1
            start = pos + 1
        else:
            break
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,0,normal,[],"from typing import List

def sort_numbers(numbers: str) -> str:
    num_map = {
        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
        'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9
    }
    return''.join(sorted(numbers.split(), key=num_map.get))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted(numbers.split(), key=num_dict.get))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', 'HumanEval/105', '472', 'HumanEval/34', 'HumanEval/20']","from typing import List

def sort_numbers(numbers: str) -> str:
    var_1 = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted(numbers.split(' '), key=var_1.get))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', 'HumanEval/105', '472', 'HumanEval/34', 'HumanEval/20', '896', 'HumanEval/6', 'HumanEval/104', '37', 'HumanEval/21']","from typing import List

def sort_numbers(numbers: str) -> str:
    var_1 = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted(numbers.split(' '), key=lambda x: var_1[x]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,0,normal,[],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    closest_pair = ()
    
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,5,normal,"['HumanEval/20', 'HumanEval/21', 'HumanEval/7', 'HumanEval/25', 'HumanEval/29']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,10,normal,"['HumanEval/20', 'HumanEval/21', 'HumanEval/7', 'HumanEval/25', 'HumanEval/29', 'HumanEval/5', 'HumanEval/9', 'HumanEval/0', 'HumanEval/17', 'HumanEval/26']","from typing import List, Tuple
import itertools

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    min_diff = float('inf')
    closest_pair = None
    for num1, num2 in itertools.combinations(numbers, 2):
        diff = abs(num1 - num2)
        if diff < min_diff:
            min_diff = diff
            closest_pair = tuple(sorted((num1, num2)))
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,0,normal,[],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,5,normal,"['HumanEval/21', '629', '27', 'HumanEval/6', 'HumanEval/25']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,10,normal,"['HumanEval/21', '629', '27', 'HumanEval/6', 'HumanEval/25', 'HumanEval/4', 'HumanEval/9', '554', '390', '500']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    return [(x - min_num) / (max_num - min_num) for x in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,0,normal,[],"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,5,normal,"['HumanEval/22', 'HumanEval/26', 'HumanEval/1', 'HumanEval/25', 'HumanEval/0']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,10,normal,"['HumanEval/22', 'HumanEval/26', 'HumanEval/1', 'HumanEval/25', 'HumanEval/0', 'HumanEval/17', 'HumanEval/5', 'HumanEval/3', 'HumanEval/7', 'HumanEval/6']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,0,normal,[],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['764'],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['764', '238', '818', '461', '877']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['764', '238', '818', '461', '877', '523', '374', 'HumanEval/23', '226', '792']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,0,normal,[],"def largest_divisor(n: int) -> int:
    for i in range(n - 1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['218'],"import math

def largest_divisor(n: int) -> int:
    for i in range(n - 1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['218', '687', '45', '832', '911']","import math

def largest_divisor(n: int) -> int:
    for i in range(n - 1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['218', '687', '45', '832', '911', '366', '357', '488', '406', '443']","import math

def largest_divisor(n: int) -> int:
    for i in range(math.floor(math.sqrt(n)), 0, -1):
        if n % i == 0:
            return max(i, n // i)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,0,normal,[],"from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/5'],"from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,5,normal,"['HumanEval/5', 'HumanEval/6', 'HumanEval/17', 'HumanEval/32', 'HumanEval/26']","from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,10,normal,"['HumanEval/5', 'HumanEval/6', 'HumanEval/17', 'HumanEval/32', 'HumanEval/26', 'HumanEval/25', 'HumanEval/11', '905', 'HumanEval/19', 'HumanEval/1']","from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,0,normal,[],"from typing import List
from collections import OrderedDict

def remove_duplicates(numbers: List[int]) -> List[int]:
    return list(OrderedDict.fromkeys([num for num in numbers if numbers.count(num) == 1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List
import collections

def remove_duplicates(numbers: List[int]) -> List[int]:
    var_1 = collections.Counter(numbers)
    return [n for n in numbers if var_1[n] == 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,5,normal,"['HumanEval/26', 'HumanEval/5', 'HumanEval/17', 'HumanEval/1', 'HumanEval/11']","from typing import List
from collections import Counter

def remove_duplicates(numbers: List[int]) -> List[int]:
    count = Counter(numbers)
    return [num for num in numbers if count[num] == 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,10,normal,"['HumanEval/26', 'HumanEval/5', 'HumanEval/17', 'HumanEval/1', 'HumanEval/11', 'HumanEval/6', 'HumanEval/25', 'HumanEval/22', 'HumanEval/7', '27']","from typing import List
from collections import Counter

def remove_duplicates(numbers: List[int]) -> List[int]:
    count = Counter(numbers)
    return [num for num in numbers if count[num] == 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,0,normal,[],"def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '53', '364', '523']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '53', '364', '523', '374', '823', '877', 'HumanEval/51', 'HumanEval/93']","def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,0,normal,[],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', 'HumanEval/1', 'HumanEval/14', 'HumanEval/5', 'HumanEval/17']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,10,normal,"['HumanEval/28', 'HumanEval/1', 'HumanEval/14', 'HumanEval/5', 'HumanEval/17', 'HumanEval/19', 'HumanEval/7', 'HumanEval/11', 'HumanEval/29', 'HumanEval/8']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,0,normal,[],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/1', '823', 'HumanEval/28']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/1', '823', 'HumanEval/28', 'HumanEval/17', 'HumanEval/22', '27', 'HumanEval/5', 'HumanEval/6']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,0,normal,[],"def get_positive(l: list):
    return [num for num in l if num > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/42'],"def get_positive(l: list):
    return [var_1 for var_1 in l if var_1 > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,5,normal,"['HumanEval/42', 'HumanEval/6', '27', '893', '342']","def get_positive(l: list):
    return [num for num in l if num > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,10,normal,"['HumanEval/42', 'HumanEval/6', '27', '893', '342', '329', '66', '554', 'HumanEval/30', 'HumanEval/0']","def get_positive(l: list):
    return [var_1 for var_1 in l if var_1 > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,0,normal,[],"import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/75'],"def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '762', 'HumanEval/127']","import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '762', 'HumanEval/127', '260', 'HumanEval/94', 'HumanEval/134', 'HumanEval/0', '433']","import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,0,normal,[],"import numpy as np

def find_zero(xs: list):
    if len(xs) % 2!= 0:
        raise ValueError(""The number of coefficients must be even."")
    if xs[-1] == 0:
        raise ValueError(""The largest coefficient must be non-zero."")
    return np.roots(xs)[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def find_zero(xs: list):
    a, b = (-1.0, 1.0)
    while poly(xs, a) * poly(xs, b) > 0:
        a *= 2.0
        b *= 2.0
    while b - a > 1e-10:
        c = (a + b) / 2.0
        if poly(xs, c) * poly(xs, a) > 0:
            a = c
        else:
            b = c
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,5,normal,"['HumanEval/32', 'HumanEval/25', 'HumanEval/11', 'HumanEval/39', 'HumanEval/4']","import math

def find_zero(xs: list):
    a, b = (-1.0, 1.0)
    while poly(xs, a) * poly(xs, b) > 0:
        a *= 2.0
        b *= 2.0
    while b - a > 1e-10:
        c = (a + b) / 2.0
        if poly(xs, c) * poly(xs, a) > 0:
            a = c
        else:
            b = c
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,10,normal,"['HumanEval/32', 'HumanEval/25', 'HumanEval/11', 'HumanEval/39', 'HumanEval/4', 'HumanEval/6', 'HumanEval/21', '859', 'HumanEval/7', 'HumanEval/128']","import math

def find_zero(xs: list):
    a, b = (-1.0, 1.0)
    while poly(xs, a) * poly(xs, b) > 0:
        a *= 2.0
        b *= 2.0
    while b - a > 1e-10:
        c = (a + b) / 2.0
        if poly(xs, c) * poly(xs, a) > 0:
            a = c
        else:
            b = c
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,0,normal,[],"def sort_third(l: list):
    third_elements = sorted([l[i] for i in range(len(l)) if i % 3 == 0])
    result = []
    third_index = 0
    for i in range(len(l)):
        if i % 3 == 0:
            result.append(third_elements[third_index])
            third_index += 1
        else:
            result.append(l[i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/34', 'HumanEval/104', 'HumanEval/105', 'HumanEval/58']","def sort_third(l: list):
    third_elements = sorted([l[i] for i in range(len(l)) if i % 3 == 0])
    result = []
    third_index = 0
    for i in range(len(l)):
        if i % 3 == 0:
            result.append(third_elements[third_index])
            third_index += 1
        else:
            result.append(l[i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/34', 'HumanEval/104', 'HumanEval/105', 'HumanEval/58', 'HumanEval/87', '37', '108', '308', 'HumanEval/116']","def sort_third(l: list):
    third_elements = sorted([l[i] for i in range(len(l)) if i % 3 == 0])
    result = []
    third_index = 0
    for i in range(len(l)):
        if i % 3 == 0:
            result.append(third_elements[third_index])
            third_index += 1
        else:
            result.append(l[i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,0,normal,[],"def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', 'HumanEval/33', 'HumanEval/116', '472', '27']","import re

def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', 'HumanEval/33', 'HumanEval/116', '472', '27', 'HumanEval/158', '712', '569', 'HumanEval/58', 'HumanEval/104']","def unique(l: list):
    return sorted(set(l))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,0,normal,[],"def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['HumanEval/9'],"def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['HumanEval/9', '613', 'HumanEval/6', '366', 'HumanEval/21']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['HumanEval/9', '613', 'HumanEval/6', '366', 'HumanEval/21', '90', '299', '393', '805', 'HumanEval/12']","def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,0,normal,[],"def fizz_buzz(n: int) -> int:
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['781'],"import math

def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['781', '687', '406', '641', 'HumanEval/113']","def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['781', '687', '406', '641', 'HumanEval/113', '211', '566', 'HumanEval/146', 'HumanEval/55', '873']","def fizz_buzz(n: int):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,0,normal,[],"def sort_even(l: list):
    even_values = sorted([l[i] for i in range(0, len(l), 2)])
    return [even_values[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/34'],"def sort_even(l: list):
    even_values = sorted([l[i] for i in range(0, len(l), 2)])
    result = []
    even_index = 0
    for i in range(len(l)):
        if i % 2 == 0:
            result.append(even_values[even_index])
            even_index += 1
        else:
            result.append(l[i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/34', 'HumanEval/104', '896', 'HumanEval/58', '472']","def sort_even(l: list):
    even_elements = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    result = []
    even_index = 0
    for i in range(len(l)):
        if i % 2 == 0:
            result.append(even_elements[even_index])
            even_index += 1
        else:
            result.append(l[i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/34', 'HumanEval/104', '896', 'HumanEval/58', '472', 'HumanEval/158', 'HumanEval/116', 'HumanEval/105', 'HumanEval/87', 'HumanEval/33']","def sort_even(l: list):
    even_values = sorted([l[i] for i in range(0, len(l), 2)])
    result = []
    even_index = 0
    for i in range(len(l)):
        if i % 2 == 0:
            result.append(even_values[even_index])
            even_index += 1
        else:
            result.append(l[i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,0,normal,[],"def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def decode_cyclic(s: str):
    return encode_cyclic(encode_cyclic(s))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', '374', 'HumanEval/50', '18', 'HumanEval/64']","def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[2:] + group[:2]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,10,normal,"['HumanEval/38', '374', 'HumanEval/50', '18', 'HumanEval/64', '330', '565', '315', '421', 'HumanEval/118']","def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,0,normal,[],"import math

def is_prime(num: int) -> bool:
    """"""Check if a number is prime.""""""
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int) -> int:
    """"""Return the n-th number that is a Fibonacci number and it's also prime.""""""
    a, b = 0, 1
    count = 0
    while True:
        a, b = b, a + b
        if is_prime(a):
            count += 1
            if count == n:
                return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['873'],"import sympy

def prime_fib(n: int):
    a, b = 0, 1
    count = 0
    while True:
        a, b = b, a + b
        if sympy.isprime(b):
            count += 1
            if count == n:
                return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['873', 'HumanEval/55', 'HumanEval/59', '260', 'HumanEval/75']","import sympy

def prime_fib(n: int):
    a, b = 0, 1
    count = 0
    while True:
        a, b = b, a + b
        if sympy.isprime(b):
            count += 1
            if count == n:
                return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['873', 'HumanEval/55', 'HumanEval/59', '260', 'HumanEval/75', 'HumanEval/39', 'HumanEval/63', '905', 'HumanEval/127', 'HumanEval/94']","import math

def prime_fib(n: int):
    def is_prime(num: int) -> bool:
        if num < 2:
            return False
        for i in range(2, min(int(math.sqrt(num)) + 1, num - 1)):
            if num % i == 0:
                return False
        return True

    fib_sequence = [0, 1]
    count = 0
    while True:
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
        if is_prime(fib_sequence[-1]):
            count += 1
        if count == n:
            return fib_sequence[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,0,normal,[],"def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i - 1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['121'],"def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i - 1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,5,normal,"['121', '916', '767', '481', '340']","def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        if i > 0 and l[i] == l[i-1]:
            continue
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,10,normal,"['121', '916', '767', '481', '340', '527', '685', '65', '598', '798']","def triples_sum_to_zero(nums):
    nums.sort()
    for i in range(len(nums) - 2):
        if i > 0 and nums[i] == nums[i-1]:
            continue
        left, right = i + 1, len(nums) - 1
        while left < right:
            total = nums[i] + nums[left] + nums[right]
            if total < 0:
                left += 1
            elif total > 0:
                right -= 1
            else:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,0,normal,[],"def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['111'],"def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,5,normal,"['111', '187', '552', 'HumanEval/26', '250']","def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,10,normal,"['111', '187', '552', 'HumanEval/26', '250', '168', '70', '433', '736', '843']","def car_race_collision(n: int):
    return n * n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,0,normal,[],"def incr_list(l: list):
    return [x + 1 for x in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', 'HumanEval/26', 'HumanEval/14', 'HumanEval/17', '27']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', 'HumanEval/26', 'HumanEval/14', 'HumanEval/17', '27', 'HumanEval/5', '810', 'HumanEval/6', '769', '255']","def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,0,normal,[],"def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set and num!= 0:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['481'],"def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set and num!= 0:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['481', '415', '65', '271', '634']","def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['481', '415', '65', '271', '634', '798', '121', '270', '420', '656']","def pairs_sum_to_zero(l):
    num_set = set()
    for num in l:
        if -num in num_set:
            return True
        num_set.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,0,normal,[],"def change_base(x: int, base: int) -> str:
    if x == 0:
        return '0'
    digits = []
    while x:
        digits.append(str(x % base))
        x //= base
    return ''.join(reversed(digits))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['99'],"def change_base(x: int, base: int):
    if x == 0:
        return '0'
    digits = []
    while x:
        digits.append(str(x % base))
        x //= base
    return ''.join(reversed(digits))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,5,normal,"['99', 'HumanEval/11', 'HumanEval/15', '735', '218']","def change_base(x: int, base: int) -> str:
    if x == 0:
        return '0'
    digits = []
    while x:
        digits.append(str(x % base))
        x //= base
    return ''.join(reversed(digits))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,10,normal,"['99', 'HumanEval/11', 'HumanEval/15', '735', '218', 'HumanEval/25', '518', '123', 'HumanEval/39', '619']","def change_base(x: int, base: int) -> str:
    convertString = ""0123456789""
    result = """"
    while x > 0:
        result = convertString[x % base] + result
        x = x // base
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,0,normal,[],"def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,1,normal,['826'],"def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,5,normal,"['826', '738', '927', '180', '120']","import math

def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,10,normal,"['826', '738', '927', '180', '120', '488', 'HumanEval/152', '63', '951', '761']","import math

def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,0,normal,[],"def fib4(n: int) -> int:
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")
    elif n <= 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    
    fib4_values = [0, 0, 2, 0]
    for i in range(4, n + 1):
        fib4_values.append(sum(fib4_values[-4:]))
    
    return fib4_values[n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,1,normal,['873'],"def fib4(n: int):
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")
    elif n == 0 or n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    
    fib4_values = [0, 0, 2, 0]
    for i in range(4, n + 1):
        fib4_values.append(sum(fib4_values[-4:]))
    
    return fib4_values[n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,5,normal,"['873', 'HumanEval/55', '84', '552', '905']","def fib4(n: int):
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")
    elif n == 0 or n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    
    fib4_values = [0, 0, 2, 0]
    for i in range(4, n + 1):
        fib4_values.append(sum(fib4_values[-4:]))
    
    return fib4_values[n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,10,normal,"['873', 'HumanEval/55', '84', '552', '905', 'HumanEval/63', 'HumanEval/26', 'HumanEval/113', 'HumanEval/105', '583']","def fib4(n: int):
    if n < 0:
        raise ValueError(""n must be a non-negative integer"")
    elif n == 0 or n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    
    fib4_values = [0, 0, 2, 0]
    for i in range(4, n + 1):
        fib4_values.append(sum(fib4_values[-4:]))
    
    return fib4_values[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,0,normal,[],"import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,1,normal,['HumanEval/21'],"import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,5,normal,"['HumanEval/21', '472', 'HumanEval/6', '342', '27']","import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,10,normal,"['HumanEval/21', '472', 'HumanEval/6', '342', '27', '629', 'HumanEval/34', 'HumanEval/19', '554', 'HumanEval/4']","import statistics

def median(l: list):
    return statistics.median(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,0,normal,[],"def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['352'],"def is_palindrome(text: str):
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['352', 'HumanEval/10', '485', 'HumanEval/107', '53']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['352', 'HumanEval/10', '485', 'HumanEval/107', '53', '192', '823', '403', '822', '756']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,0,normal,[],"def modp(n: int, p: int) -> int:
    return pow(2, n, p)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,1,normal,['260'],"def modp(n: int, p: int):
    result = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        base = (base * base) % p
        n = n // 2
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,5,normal,"['260', '671', '406', '45', '735']","def modp(n: int, p: int):
    result = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        base = (base * base) % p
        n = n // 2
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,10,normal,"['260', '671', '406', '45', '735', 'HumanEval/113', '218', '687', 'HumanEval/39', '151']","def modp(n: int, p: int):
    return pow(2, n, p)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,0,normal,[],"def decode_shift(s: str):
    return """".join([chr(((ord(ch) - ord(""a"") - 5) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,1,normal,['HumanEval/50'],"def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,5,normal,"['HumanEval/50', 'HumanEval/38', '319', 'HumanEval/51', 'HumanEval/64']","def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,10,normal,"['HumanEval/50', 'HumanEval/38', '319', 'HumanEval/51', 'HumanEval/64', 'HumanEval/162', '330', '374', '565', '933']","def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,0,normal,[],"def remove_vowels(text):
    vowels = 'aeiouAEIOU'
    return ''.join([char for char in text if char not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,1,normal,['HumanEval/51'],"def remove_vowels(text):
    return ''.join([char for char in text if char.lower() not in 'aeiou'])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,5,normal,"['HumanEval/51', 'HumanEval/64', '478', '459', '319']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['HumanEval/51', 'HumanEval/64', '478', '459', '319', '495', '330', '254', '523', '748']","import re

def remove_vowels(text):
    return re.sub('[aeiouAEIOU]', '', text)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,0,normal,[],"def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['433'],"def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['433', 'HumanEval/0', 'HumanEval/3', 'HumanEval/39', 'HumanEval/134']","def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['433', 'HumanEval/0', 'HumanEval/3', 'HumanEval/39', 'HumanEval/134', 'HumanEval/124', 'HumanEval/52', 'HumanEval/31', 'HumanEval/57', '762']","def below_threshold(l: list, t: int):
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,0,normal,[],"def add(x: int, y: int) -> int:
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/115'],"def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/115', '398', 'HumanEval/53', 'HumanEval/32', 'HumanEval/25']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/115', '398', 'HumanEval/53', 'HumanEval/32', 'HumanEval/25', 'HumanEval/4', 'HumanEval/133', '873', 'HumanEval/67', '696']","def add(x: int, y: int):
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,0,normal,[],"from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['53'],"from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,5,normal,"['53', '352', '823', '565', '70']","from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,10,normal,"['53', '352', '823', '565', '70', 'HumanEval/64', '523', '461', '818', '192']","def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,0,normal,[],"def fib(n: int) -> int:
    if n <= 0:
        raise ValueError(""n must be a positive integer"")
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        a, b = 1, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,1,normal,['873'],"def fib(n: int) -> int:
    if n <= 0:
        raise ValueError(""n must be a positive integer"")
    elif n == 1:
        return 1
    elif n == 2:
        return 1
    else:
        a, b = 1, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', '905', 'HumanEval/26']","def fib(n: int):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', '905', 'HumanEval/26', '479', '583', '745', 'HumanEval/113', '389']","def fib(n: int):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,0,normal,[],"def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['771'],"from collections import deque

def correct_bracketing(brackets: str):
    if len(brackets) & 1:
        return False
    stack = deque()
    for bracket in brackets:
        if bracket == '<':
            stack.append(bracket)
        if bracket == '>':
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['771', '352', '823', '913', '670']","from collections import deque

def correct_bracketing(brackets: str):
    stack = deque()
    for bracket in brackets:
        if bracket == '<':
            stack.append(bracket)
        elif bracket == '>':
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['771', '352', '823', '913', '670', '680', '433', '396', '737', 'HumanEval/57']","from collections import deque

def correct_bracketing(brackets: str):
    stack = deque()
    for bracket in brackets:
        if bracket == '<':
            stack.append(bracket)
        elif bracket == '>':
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,0,normal,[],"def monotonic(l: list) -> bool:
    increasing = decreasing = True

    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False

    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['HumanEval/57'],"def monotonic(l: list):
    increasing = decreasing = True
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['HumanEval/57', '472', 'HumanEval/3', 'HumanEval/21', 'HumanEval/0']","def monotonic(l: list):
    increasing = decreasing = True
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,10,normal,"['HumanEval/57', '472', 'HumanEval/3', 'HumanEval/21', 'HumanEval/0', '433', '329', 'HumanEval/52', '342', '66']","def monotonic(l: list):
    increasing = decreasing = True
    for i in range(len(l) - 1):
        if l[i] > l[i + 1]:
            increasing = False
        if l[i] < l[i + 1]:
            decreasing = False
    return increasing or decreasing",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,0,normal,[],"def common(l1: list, l2: list):
    return sorted(set(l1) & set(l2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,5,normal,"['HumanEval/58', '108', '70', 'HumanEval/26', 'HumanEval/7']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,10,normal,"['HumanEval/58', '108', '70', 'HumanEval/26', 'HumanEval/7', '342', '943', 'HumanEval/87', '862', 'HumanEval/20']","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,0,normal,[],"import math

def largest_prime_factor(n: int):
    def is_prime(num: int) -> bool:
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(math.floor(math.sqrt(n)), 1, -1):
        if n % i == 0 and is_prime(i):
            return i
    return n",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"import math

def largest_prime_factor(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    max_prime_factor = 1
    for i in range(2, int(math.sqrt(n)) + 1):
        while n % i == 0:
            if is_prime(i):
                max_prime_factor = max(max_prime_factor, i)
            n //= i
    if n > 1 and is_prime(n):
        max_prime_factor = max(max_prime_factor, n)
    return max_prime_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '260', 'HumanEval/75', '357', '805']","import math

def largest_prime_factor(n: int):
    def is_prime(num: int) -> bool:
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    max_prime_factor = 1
    for i in range(2, int(math.sqrt(n)) + 1):
        while n % i == 0:
            if is_prime(i):
                max_prime_factor = max(max_prime_factor, i)
            n //= i
    if n > 1 and is_prime(n):
        max_prime_factor = max(max_prime_factor, n)
    return max_prime_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '260', 'HumanEval/75', '357', '805', '294', 'HumanEval/39', '366', '905', 'HumanEval/127']","import math

def largest_prime_factor(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, min(int(math.sqrt(num)) + 1, num - 1)):
            if num % i == 0:
                return False
        return True

    max_prime = 1
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            max_prime = max(max_prime, i)
    return max_prime",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,0,normal,[],"def sum_to_n(n: int):
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['HumanEval/60'],"def sum_to_n(n: int):
    return sum(range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['HumanEval/60', '962', '398', '340', '105']","def sum_to_n(n: int):
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,10,normal,"['HumanEval/60', '962', '398', '340', '105', '514', '142', '870', '133', '212']","def sum_to_n(n: int):
    return sum(range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,0,normal,[],"def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['771'],"from collections import deque

def correct_bracketing(brackets: str):
    if len(brackets) & 1:
        return False
    stack = deque()
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,5,normal,"['771', '352', '823', '670', '680']","from collections import deque

def correct_bracketing(brackets: str):
    if len(brackets) & 1:
        return False
    stack = deque()
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,10,normal,"['771', '352', '823', '670', '680', 'HumanEval/57', '433', '396', '737', '913']","from collections import deque

def correct_bracketing(brackets: str):
    if len(brackets) & 1:
        return False
    stack = deque()
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack:
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,0,normal,[],"def derivative(xs: list):
    return [i * x for i, x in enumerate(reversed(xs)) if i!= 0][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['456'],"def derivative(xs: list):
    return [i * x for i, x in enumerate(reversed(xs)) if i!= 0][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['456', 'HumanEval/21', 'HumanEval/11', '413', 'HumanEval/4']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs[1:], start=1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['456', 'HumanEval/21', 'HumanEval/11', '413', 'HumanEval/4', 'HumanEval/152', '391', '859', 'HumanEval/7', '447']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs[1:], 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,0,normal,[],"from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['873'],"from functools import lru_cache

def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,5,normal,"['873', 'HumanEval/63', '84', 'HumanEval/55', '905']","from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['873', 'HumanEval/63', '84', 'HumanEval/55', '905', '552', 'HumanEval/113', 'HumanEval/26', 'HumanEval/105', '926']","from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,0,normal,[],"def vowels_count(s):
    s = s.lower()
    count = sum(1 for char in s if char in 'aeiou')
    if s.endswith('y'):
        count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s and (s[-1] == 'y' or s[-1] == 'Y'):
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', 'HumanEval/98', '684', '523', '172']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1].lower() == 'y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,10,normal,"['HumanEval/64', 'HumanEval/98', '684', '523', '172', 'HumanEval/113', '461', '818', '374', '861']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1].lower() == 'y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,0,normal,[],"def circular_shift(x, shift):
    num_str = str(x)
    num_digits = len(num_str)
    effective_shift = shift % num_digits
    if effective_shift == 0:
        return num_str[::-1]
    else:
        return num_str[-effective_shift:] + num_str[:-effective_shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,1,normal,['HumanEval/38'],"def circular_shift(x, shift):
    num_str = str(x)
    num_digits = len(num_str)
    shift = shift % num_digits
    if shift == 0:
        return num_str
    return num_str[-shift:] + num_str[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/38', '781', 'HumanEval/15', '739', '218']","def circular_shift(x, shift):
    num_str = str(x)
    shift = shift % len(num_str)
    if shift == 0:
        return num_str[::-1]
    else:
        return num_str[-shift:] + num_str[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/38', '781', 'HumanEval/15', '739', '218', 'HumanEval/11', '604', '323', '456', '671']","def circular_shift(x, shift):
    x_str = str(x)
    shift = shift % len(x_str)
    if shift == 0:
        return x_str[::-1]
    return x_str[-shift:] + x_str[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,0,normal,[],"def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['HumanEval/66'],"def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,5,normal,"['HumanEval/66', '398', 'HumanEval/84', '148', '566']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,10,normal,"['HumanEval/66', '398', 'HumanEval/84', '148', '566', 'HumanEval/108', '724', 'HumanEval/151', '949', '959']","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,0,normal,[],"import re

def fruit_distribution(s, n):
    numbers = list(map(int, re.findall(r'\d+', s)))
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['HumanEval/113'],"import re

def fruit_distribution(s, n):
    numbers = re.findall('\d+', s)
    return n - sum(map(int, numbers))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['HumanEval/113', '926', 'HumanEval/84', 'HumanEval/105', '949']","import re

def fruit_distribution(s, n):
    numbers = list(map(int, re.findall(r'\d+', s)))
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['HumanEval/113', '926', 'HumanEval/84', 'HumanEval/105', '949', 'HumanEval/145', '684', 'HumanEval/32', '207', '142']","import re

def fruit_distribution(s, n):
    numbers = re.findall('\d+', s)
    return n - sum(map(int, numbers))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,0,normal,[],"def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    return min(even_nodes, default=[]) if even_nodes else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['367'],"def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    if not even_nodes:
        return []
    return min(even_nodes, key=lambda x: (x[0], x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,5,normal,"['367', '342', '893', 'HumanEval/105', 'HumanEval/113']","def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    return min(even_nodes, default=[]) if even_nodes else []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['367', '342', '893', 'HumanEval/105', 'HumanEval/113', '94', '322', '472', '896', '843']","def pluck(arr):
    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    if not even_nodes:
        return []
    return min(even_nodes, key=lambda x: (x[0], x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,0,normal,[],"from collections import Counter

def search(lst):
    count = Counter(lst)
    for num in sorted(count, reverse=True):
        if count[num] >= num:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,1,normal,['613'],"from collections import Counter

def search(lst):
    count = Counter(lst)
    return max((num for num, freq in count.items() if freq >= num), default=-1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['613', 'HumanEval/59', '329', '342', '285']","from collections import Counter

def search(lst):
    count = Counter(lst)
    for num in sorted(count, reverse=True):
        if count[num] >= num and num > 0:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['613', 'HumanEval/59', '329', '342', '285', '66', 'HumanEval/39', '27', 'HumanEval/26', '787']","from collections import Counter

def search(lst):
    count = Counter(lst)
    return max((num for num in count if count[num] >= num), default=-1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,0,normal,[],"import heapq

def strange_sort_list(lst):
    if not lst:
        return []
    
    min_heap = []
    max_heap = []
    result = []
    
    for num in lst:
        heapq.heappush(min_heap, num)
        heapq.heappush(max_heap, -num)
    
    while min_heap:
        result.append(heapq.heappop(min_heap))
        if min_heap:
            result.append(-heapq.heappop(max_heap))
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['HumanEval/34'],"def strange_sort_list(lst):
    result = []
    while lst:
        result.append(min(lst))
        lst.remove(min(lst))
        if lst:
            result.append(max(lst))
            lst.remove(max(lst))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,5,normal,"['HumanEval/34', 'HumanEval/33', '472', 'HumanEval/57', 'HumanEval/58']","def strange_sort_list(lst):
    result = []
    sorted_lst = sorted(lst)
    while sorted_lst:
        result.append(sorted_lst.pop(0))
        if sorted_lst:
            result.append(sorted_lst.pop(-1))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,10,normal,"['HumanEval/34', 'HumanEval/33', '472', 'HumanEval/57', 'HumanEval/58', '896', 'HumanEval/116', 'HumanEval/158', 'HumanEval/105', 'HumanEval/104']","def strange_sort_list(lst):
    result = []
    while lst:
        result.append(min(lst))
        lst.remove(min(lst))
        if lst:
            result.append(max(lst))
            lst.remove(max(lst))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,0,normal,[],"import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,1,normal,['826'],"import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,5,normal,"['826', '519', '738', '180', '835']","import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['826', '519', '738', '180', '835', '742', 'HumanEval/77', '830', 'HumanEval/71', '497']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,0,normal,[],"def will_it_fly(q, w):
    return q == q[::-1] and sum(q) <= w",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['121'],"def will_it_fly(q, w):
    return q == q[::-1] and sum(q) <= w",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['121', '433', 'HumanEval/0', 'HumanEval/32', '123']","def will_it_fly(q, w):
    return q == q[::-1] and sum(q) <= w",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,10,normal,"['121', '433', 'HumanEval/0', 'HumanEval/32', '123', '485', '650', 'HumanEval/57', '367', '916']","def will_it_fly(q, w):
    return q == q[::-1] and sum(q) <= w",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,0,normal,[],"def smallest_change(arr):
    left, right = 0, len(arr) - 1
    count = 0
    while left < right:
        if arr[left]!= arr[right]:
            count += 1
        left += 1
        right -= 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,1,normal,['364'],"def smallest_change(arr):
    left, right = 0, len(arr) - 1
    changes = 0
    while left < right:
        if arr[left]!= arr[right]:
            changes += 1
        left += 1
        right -= 1
    return changes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,5,normal,"['364', '410', '322', '875', 'HumanEval/105']","def smallest_change(arr):
    left, right = 0, len(arr) - 1
    changes = 0
    while left < right:
        if arr[left]!= arr[right]:
            changes += 1
        left += 1
        right -= 1
    return changes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,10,normal,"['364', '410', '322', '875', 'HumanEval/105', '433', '947', '371', '94', '95']","def smallest_change(arr):
    left, right = 0, len(arr) - 1
    count = 0
    while left < right:
        if arr[left]!= arr[right]:
            count += 1
        left += 1
        right -= 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,0,normal,[],"def total_match(lst1, lst2):
    sum1 = sum(len(s) for s in lst1)
    sum2 = sum(len(s) for s in lst2)
    return lst1 if sum1 <= sum2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['186'],"def total_match(lst1, lst2):
    sum1 = sum(len(s) for s in lst1)
    sum2 = sum(len(s) for s in lst2)
    return lst1 if sum1 <= sum2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,5,normal,"['186', '178', 'HumanEval/7', '18', '285']","def total_match(lst1, lst2):
    sum1 = sum(len(s) for s in lst1)
    sum2 = sum(len(s) for s in lst2)
    return lst1 if sum1 <= sum2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,10,normal,"['186', '178', 'HumanEval/7', '18', '285', '352', 'HumanEval/29', '298', 'HumanEval/26', '917']","def total_match(lst1, lst2):
    sum1 = sum(len(s) for s in lst1)
    sum2 = sum(len(s) for s in lst2)
    return lst1 if sum1 <= sum2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,0,normal,[],"import itertools

def is_prime(n):
    """"""Check if number is prime.""""""
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_multiply_prime(a):
    primes = [i for i in range(2, a) if is_prime(i)]
    for p1, p2, p3 in itertools.combinations(primes, 3):
        if p1 * p2 * p3 == a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    primes = [i for i in range(2, 101) if is_prime(i)]
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/127', 'HumanEval/39', '260']","import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    primes = [i for i in range(2, 100) if is_prime(i)]
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/127', 'HumanEval/39', '260', '121', 'HumanEval/94', '884', '677', '228']","import math

def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(2, 101):
            if not is_prime(j):
                continue
            for k in range(2, 101):
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,0,normal,[],"import math

def is_simple_power(x, n):
    if x <= 0 or n <= 0:
        return False
    log_result = math.log(x, n)
    return math.isclose(log_result, round(log_result))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,1,normal,['HumanEval/59'],"import math

def is_simple_power(x, n):
    if x < 1 or n < 2:
        return x == 1
    root = round(math.log(x, n))
    return n ** root == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,5,normal,"['HumanEval/59', 'HumanEval/75', '600', 'HumanEval/39', '93']","import math

def is_simple_power(x, n):
    if x < 1 or n < 2:
        return x == 1
    root = round(math.log(x, n))
    return n ** root == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,10,normal,"['HumanEval/59', 'HumanEval/75', '600', 'HumanEval/39', '93', '887', 'HumanEval/127', '900', '121', '762']","import math

def is_simple_power(x, n):
    if x < 1 or n < 2:
        return x == 1
    root = round(math.log(x, n))
    return n ** root == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,0,normal,[],"import math

def iscube(a):
    root = round(math.pow(abs(a), 1/3))
    return root ** 3 == abs(a)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['762'],"import math

def iscube(a):
    root = round(abs(a) ** (1. / 3))
    return root ** 3 == abs(a)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,5,normal,"['762', '121', 'HumanEval/39', '123', '900']","import math

def iscube(a):
    root = round(math.pow(abs(a), 1/3))
    return root ** 3 == abs(a)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,10,normal,"['762', '121', 'HumanEval/39', '123', '900', 'HumanEval/59', '887', 'HumanEval/75', '600', 'HumanEval/127']","import math

def iscube(a):
    root = round(math.pow(abs(a), 1/3))
    return root ** 3 == abs(a)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,0,normal,[],"def hex_key(num):
    prime_hex_digits = set('2357BD')
    return sum(1 for digit in num if digit.upper() in prime_hex_digits)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,1,normal,['HumanEval/162'],"def hex_key(num):
    prime_hex_digits = set('2357BD')
    return sum(1 for digit in num if digit.upper() in prime_hex_digits)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['HumanEval/162', '260', 'HumanEval/39', '406', 'HumanEval/19']","def hex_key(num):
    primes = set('2357BD')
    return sum(1 for digit in num if digit.upper() in primes)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,10,normal,"['HumanEval/162', '260', 'HumanEval/39', '406', 'HumanEval/19', '387', 'HumanEval/11', 'HumanEval/59', 'HumanEval/75', '39']","def hex_key(num):
    prime_hex_digits = set('2357BD')
    return sum(1 for digit in num if digit.upper() in prime_hex_digits)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,0,normal,[],"def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,1,normal,['99'],"def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['99', 'HumanEval/84', 'HumanEval/79', '406', '53']","def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['99', 'HumanEval/84', 'HumanEval/79', '406', '53', '218', '735', 'HumanEval/99', '928', '877']","def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,0,normal,[],"def is_happy(s):
    return len(s) >= 3 and len(set(s[i:i+3])) == 3 for i in range(len(s)-2)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': 'failed: invalid syntax (<string>, line 2)', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['523'],"def is_happy(s):
    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s)-2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,5,normal,"['523', '53', '823', '482', 'HumanEval/64']","def is_happy(s):
    return len(s) >= 3 and all(s[i]!= s[i+1] and s[i]!= s[i+2] and s[i+1]!= s[i+2] for i in range(len(s)-2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['523', '53', '823', '482', 'HumanEval/64', '352', '192', '917', '285', '822']","def is_happy(s):
    return len(s) >= 3 and all(s[i]!= s[i+1] and s[i]!= s[i+2] and s[i+1]!= s[i+2] for i in range(len(s)-2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,0,normal,[],"def numerical_letter_grade(grades):
    return ['A+' if g == 4.0 else 
            'A' if g > 3.7 else 
            'A-' if g > 3.3 else 
            'B+' if g > 3.0 else 
            'B' if g > 2.7 else 
            'B-' if g > 2.3 else 
            'C+' if g > 2.0 else 
            'C' if g > 1.7 else 
            'C-' if g > 1.3 else 
            'D+' if g > 1.0 else 
            'D' if g > 0.7 else 
            'D-' if g > 0.0 else 'E' 
            for g in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def numerical_letter_grade(grades):
    grade_map = {
        (4.0, 'A+'), (3.7, 'A'), (3.3, 'A-'), (3.0, 'B+'), (2.7, 'B'), 
        (2.3, 'B-'), (2.0, 'C+'), (1.7, 'C'), (1.3, 'C-'), (1.0, 'D+'), 
        (0.7, 'D'), (0.0, 'D-')
    }
    return [next((grade for gpa, grade in grade_map if gpa <= x), 'E') for x in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,5,normal,"['HumanEval/81', 'HumanEval/21', 'HumanEval/105', '433', 'HumanEval/0']","def numerical_letter_grade(grades):
    return ['A+' if grade == 4.0 else 
            'A' if grade > 3.7 else 
            'A-' if grade > 3.3 else 
            'B+' if grade > 3.0 else 
            'B' if grade > 2.7 else 
            'B-' if grade > 2.3 else 
            'C+' if grade > 2.0 else 
            'C' if grade > 1.7 else 
            'C-' if grade > 1.3 else 
            'D+' if grade > 1.0 else 
            'D' if grade > 0.7 else 
            'D-' if grade > 0.0 else 'E' 
            for grade in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,10,normal,"['HumanEval/81', 'HumanEval/21', 'HumanEval/105', '433', 'HumanEval/0', 'HumanEval/32', 'HumanEval/25', 'HumanEval/19', 'HumanEval/20', 'HumanEval/87']","def numerical_letter_grade(grades):
    return ['A+' if grade == 4.0 else 
            'A' if grade > 3.7 else 
            'A-' if grade > 3.3 else 
            'B+' if grade > 3.0 else 
            'B' if grade > 2.7 else 
            'B-' if grade > 2.3 else 
            'C+' if grade > 2.0 else 
            'C' if grade > 1.7 else 
            'C-' if grade > 1.3 else 
            'D+' if grade > 1.0 else 
            'D' if grade > 0.7 else 
            'D-' if grade > 0.0 else 'E' 
            for grade in grades]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,0,normal,[],"import math

def prime_length(string):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    return is_prime(len(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,1,normal,['523'],"import math

def prime_length(string):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    return is_prime(len(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['523', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39', 'HumanEval/127']","import math

def prime_length(string):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True
    return is_prime(len(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,10,normal,"['523', 'HumanEval/75', 'HumanEval/59', 'HumanEval/39', 'HumanEval/127', '192', '352', '70', 'HumanEval/94', 'HumanEval/134']","import math

def prime_length(string):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    return is_prime(len(string))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,0,normal,[],"import math

def starts_one_ends(n):
    total_numbers = 9 * (10 ** (n - 1))
    starts_with_one = 10 ** (n - 1)
    ends_with_one = 9 * (10 ** (n - 2)) * 9
    return total_numbers - (starts_with_one + ends_with_one - (10 ** (n - 2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,1,normal,['211'],"def starts_one_ends(n):
    if n == 1:
        return 1
    count = 9 * (10 ** (n - 2)) + 9 * (10 ** (n - 2))
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,5,normal,"['211', '109', 'HumanEval/26', '278', '671']","def starts_one_ends(n):
    if n == 1:
        return 1
    count = 9 * (10 ** (n - 2)) + 9 * (10 ** (n - 1))
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,10,normal,"['211', '109', 'HumanEval/26', '278', '671', '572', '929', 'HumanEval/113', '813', '781']","def starts_one_ends(n):
    if n == 1:
        return 1
    count = 2 * (9 * (10 ** (n - 2))) + 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,0,normal,[],"def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,1,normal,['148'],"def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,5,normal,"['148', '566', '398', 'HumanEval/84', 'HumanEval/32']","def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,10,normal,"['148', '566', '398', 'HumanEval/84', 'HumanEval/32', 'HumanEval/108', 'HumanEval/60', '959', '23', 'HumanEval/94']","def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,0,normal,[],"def add(lst):
    return sum(num for idx, num in enumerate(lst) if idx % 2!= 0 and num % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['HumanEval/113'],"def add(lst):
    return sum(num for idx, num in enumerate(lst) if idx % 2!= 0 and num % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,5,normal,"['HumanEval/113', '781', 'HumanEval/26', 'HumanEval/25', '342']","def add(lst):
    return sum(num for i, num in enumerate(lst) if i % 2!= 0 and num % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,10,normal,"['HumanEval/113', '781', 'HumanEval/26', 'HumanEval/25', '342', '134', '500', '329', '696', '66']","def add(lst):
    return sum(num for idx, num in enumerate(lst) if idx % 2!= 0 and num % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,0,normal,[],"def anti_shuffle(s):
    return''.join(''.join(sorted(word)) if word.isalpha() else word for word in s.split())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['374'],"def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split(' '))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['374', '877', '53', 'HumanEval/105', 'HumanEval/64']","def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['374', '877', '53', 'HumanEval/105', 'HumanEval/64', 'HumanEval/27', 'HumanEval/51', '823', '364', '896']","def anti_shuffle(s):
    return''.join(''.join(sorted(word)) for word in s.split())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,0,normal,[],"def get_row(lst, x):
    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['215'],"def get_row(lst, x):
    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(coordinates, key=lambda x: (x[0], -x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,5,normal,"['215', '282', 'HumanEval/17', 'HumanEval/21', 'HumanEval/7']","def get_row(lst, x):
    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(coordinates, key=lambda x: (x[0], -x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,10,normal,"['215', '282', 'HumanEval/17', 'HumanEval/21', 'HumanEval/7', 'HumanEval/5', 'HumanEval/29', '749', '682', '308']","def get_row(lst, x):
    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(coordinates, key=lambda x: (x[0], -x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,0,normal,[],"def sort_array(array):
    if not array:
        return array
    first_last_sum = array[0] + array[-1]
    return sorted(array) if first_last_sum % 2!= 0 else sorted(array, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,1,normal,['12'],"def sort_array(array):
    if not array:
        return array
    sum_first_last = array[0] + array[-1]
    return sorted(array, reverse=(sum_first_last % 2 == 0))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['12', '433', 'HumanEval/145', 'HumanEval/34', '896']","def sort_array(array):
    if not array:
        return array
    first_last_sum = array[0] + array[-1]
    return sorted(array) if first_last_sum % 2!= 0 else sorted(array, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['12', '433', 'HumanEval/145', 'HumanEval/34', '896', 'HumanEval/105', '340', 'HumanEval/104', '472', 'HumanEval/123']","def sort_array(array):
    if not array:
        return array
    sum_of_first_last = array[0] + array[-1]
    return sorted(array) if sum_of_first_last % 2!= 0 else sorted(array, reverse=True)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,0,normal,[],"def encrypt(s):
    result = """"
    for char in s:
        if char.isalpha():
            ascii_offset = 65 if char.isupper() else 97
            result += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)
        else:
            result += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,1,normal,['HumanEval/162'],"def encrypt(s):
    result = """"
    for char in s:
        if char.isalpha():
            ascii_offset = 65 if char.isupper() else 97
            result += chr((ord(char) - ascii_offset + 4) % 26 + ascii_offset)
        else:
            result += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/162', '374', 'HumanEval/64', '523', '933']","def encrypt(s):
    result = """"
    for char in s:
        if char.isalpha():
            ascii_offset = 97 if char.islower() else 65
            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)
        else:
            result += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/162', '374', 'HumanEval/64', '523', '933', 'HumanEval/38', '192', '965', 'HumanEval/50', '364']","def encrypt(s):
    result = """"
    for char in s:
        if char.isalpha():
            ascii_offset = 97 if char.islower() else 65
            result += chr((ord(char) - ascii_offset + 2*2) % 26 + ascii_offset)
        else:
            result += char
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,0,normal,[],"def next_smallest(lst):
    if len(lst) < 2:
        return None
    return sorted(set(lst))[1] if len(set(lst)) > 1 else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['410'],"def next_smallest(lst):
    if len(lst) < 2:
        return None
    return sorted(set(lst))[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['410', '322', '947', '62', '94']","import heapq

def next_smallest(lst):
    if len(lst) < 2:
        return None
    return heapq.nsmallest(2, lst)[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['410', '322', '947', '62', '94', '95', '342', '329', '457', '66']","def next_smallest(lst):
    if len(lst) < 2:
        return None
    return sorted(set(lst))[1] if len(set(lst)) > 1 else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,0,normal,[],"import re

def is_bored(S):
    sentences = re.split('[.!?]', S)
    return sum(1 for sentence in sentences if sentence.strip() and sentence.strip().lower().startswith('i'))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"import re

def is_bored(S):
    sentences = re.split('[.?!]\\s*', S)
    return sum(1 for sentence in sentences if sentence and sentence[0].lower() == 'i')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '172', '684', '570', '823']","import re

def is_bored(S):
    var_1 = re.split('[.?!]\\s*', S)
    return sum((sentence.strip() and sentence.strip()[0:2] == 'I'for sentence in var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '172', '684', '570', '823', '159', 'HumanEval/98', '365', 'HumanEval/113', '572']","import re

def is_bored(S):
    sentences = re.split('[.?!]', S)
    return sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0] == 'I')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,0,normal,[],"def any_int(x, y, z):
    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and 
            (x == y + z or y == x + z or z == x + y))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['121'],"def any_int(x, y, z):
    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and ((x == y + z) or (y == x + z) or (z == x + y))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['121', '916', '541', 'HumanEval/94', 'HumanEval/39']","def any_int(x, y, z):
    return (x + y == z or x + z == y or y + z == x) and all(isinstance(i, int) for i in (x, y, z))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['121', '916', '541', 'HumanEval/94', 'HumanEval/39', '398', 'HumanEval/72', '598', '481', 'HumanEval/92']","def any_int(x, y, z):
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,0,normal,[],"def encode(message):
    vowels = 'aeiouAEIOU'
    result = ''
    for char in message:
        if char in vowels:
            if char.islower():
                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))
            else:
                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))
        else:
            result += char.swapcase()
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/38'],"def encode(message):
    vowels = 'aeiouAEIOU'
    result = ''
    for char in message:
        if char in vowels:
            if char.islower():
                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))
            else:
                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))
        else:
            result += char.swapcase()
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,5,normal,"['HumanEval/38', 'HumanEval/64', 'HumanEval/51', 'HumanEval/93', '523']","def encode(message):
    vowels = 'aeiouAEIOU'
    shifted_vowels = 'cdeoCDEO'
    translation_table = str.maketrans(vowels, shifted_vowels)
    return message.swapcase().translate(translation_table)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,10,normal,"['HumanEval/38', 'HumanEval/64', 'HumanEval/51', 'HumanEval/93', '523', 'HumanEval/118', '748', '459', '478', '495']","def encode(message):
    vowels = 'aeiouAEIOU'
    shifted_vowels = 'cdeoCDEO'
    table = str.maketrans(vowels, shifted_vowels)
    return message.swapcase().translate(table)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,0,normal,[],"import math

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max((x for x in lst if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,1,normal,['HumanEval/94'],"def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max((x for x in lst if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,5,normal,"['HumanEval/94', 'HumanEval/59', '260', '805', '342']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def skjkasdkd(lst):
    max_prime = max((x for x in lst if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,10,normal,"['HumanEval/94', 'HumanEval/59', '260', '805', '342', 'HumanEval/39', '566', 'HumanEval/4', '148', 'HumanEval/32']","def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = max((x for x in lst if is_prime(x)), default=0)
    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,0,normal,[],"def check_dict_case(dict):
    if not dict:
        return False
    key_types = set(type(key) for key in dict)
    if len(key_types) > 1 or list(key_types)[0]!= str:
        return False
    case_types = set(key.islower() for key in dict)
    return len(case_types) == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_dict_case(dict):
    if not dict:
        return False
    key_types = set(type(key) for key in dict.keys())
    if len(key_types) > 1 or list(key_types)[0]!= str:
        return False
    case_types = set(key.isupper() for key in dict.keys() if key.isupper() or key.islower())
    return len(case_types) == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,5,normal,"['HumanEval/95', '523', '277', '771', '352']","def check_dict_case(dict):
    if not dict:
        return False
    all_lower = all(key.islower() for key in dict if isinstance(key, str))
    all_upper = all(key.isupper() for key in dict if isinstance(key, str))
    all_string = all(isinstance(key, str) for key in dict)
    return (all_lower or all_upper) and all_string",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,10,normal,"['HumanEval/95', '523', '277', '771', '352', '53', '464', '833', 'HumanEval/0', 'HumanEval/27']","def check_dict_case(dict):
    if not dict:
        return False
    all_lower = all(key.islower() for key in dict.keys() if isinstance(key, str))
    all_upper = all(key.isupper() for key in dict.keys() if isinstance(key, str))
    all_string = all(isinstance(key, str) for key in dict.keys())
    return (all_lower or all_upper) and all_string",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,0,normal,[],"import math

def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,1,normal,['260'],"def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['260', 'HumanEval/39', 'HumanEval/59', 'HumanEval/26', 'HumanEval/75']","def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['260', 'HumanEval/39', 'HumanEval/59', 'HumanEval/26', 'HumanEval/75', '433', '810', '342', '211', 'HumanEval/146']","import math

def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, min(int(math.sqrt(num)) + 1, num - 1)):
            if num % i == 0:
                return False
        return True

    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,0,normal,[],"def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['566'],"def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['566', '905', '621', 'HumanEval/67', '127']","def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['566', '905', '621', 'HumanEval/67', '127', '148', '293', '581', '55', '260']","def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,0,normal,[],"def count_upper(s):
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper() and c in 'AEIOU')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['HumanEval/64'],"def count_upper(s):
    vowels = ""AEIOU""
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['HumanEval/64', 'HumanEval/98', 'HumanEval/66', '523', '172']","def count_upper(s):
    vowels = ""AEIOU""
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['HumanEval/64', 'HumanEval/98', 'HumanEval/66', '523', '172', '624', 'HumanEval/113', '684', '781', '387']","def count_upper(s):
    vowels = ""AEIOU""
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,0,normal,[],"import math

def closest_integer(value):
    num = float(value)
    if num - math.floor(num) == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"from math import copysign, floor

def closest_integer(value):
    num = float(value)
    decimal_part = num - floor(num)
    if decimal_part == 0.5:
        return floor(num) + copysign(1, num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '739', '830', '519', 'HumanEval/103']","import math

def closest_integer(value):
    num = float(value)
    decimal_part = num - math.floor(num)
    if decimal_part == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '739', '830', '519', 'HumanEval/103', '148', '531', 'HumanEval/39', '851', '671']","import math

def closest_integer(value):
    num = float(value)
    if num - math.floor(num) == 0.5:
        return math.ceil(num) if num > 0 else math.floor(num)
    else:
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,0,normal,[],"def make_a_pile(n):
    pile = [n]
    for _ in range(n - 1):
        n += 2 if n % 2 else 2
        pile.append(n)
    return pile",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/113'],"def make_a_pile(n):
    pile = [n]
    while len(pile) < n:
        if n % 2 == 0:
            pile.append(pile[-1] + 2)
        else:
            pile.append(pile[-1] + 2)
    return pile[:-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/113', '843', 'HumanEval/26', '108', '342']","def make_a_pile(n):
    result = [n]
    for _ in range(n - 1):
        if n % 2 == 0:
            n += 2
        else:
            n += 2
        result.append(n)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/113', '843', 'HumanEval/26', '108', '342', 'HumanEval/32', '31', 'HumanEval/105', '949', '810']","def make_a_pile(n):
    result = [n]
    for _ in range(n - 1):
        if n % 2 == 0:
            n += 1
        else:
            n += 2
        result.append(n)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,0,normal,[],"import re

def words_string(s):
    return re.findall(r'\w+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/19'],"import re
from typing import List

def words_string(s: str) -> List[str]:
    return re.split(r'[,\s]+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/19', 'HumanEval/17', '374', '523', '570']","import re

def words_string(s):
    return re.split(r'[,\s]+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/19', 'HumanEval/17', '374', '523', '570', '18', '823', 'HumanEval/6', 'HumanEval/105', '247']","import re

def words_string(s):
    return re.split(r'[,\s]+', s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,0,normal,[],"def choose_num(x, y):
    if x > y:
        return -1
    return max((i for i in range(x, y+1) if i % 2 == 0), default=-1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['781'],"import math

def choose_num(x, y):
    if x > y:
        return -1
    for i in range(y, x - 1, -1):
        if i % 2 == 0:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['781', '433', '218', '873', '158']","def choose_num(x, y):
    if x > y:
        return -1
    else:
        return y - (y % 2) if y % 2!= 0 and y - (y % 2) >= x else -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['781', '433', '218', '873', '158', '583', '621', '671', '134', '359']","def choose_num(x, y):
    if x > y:
        return -1
    for i in range(y, x - 1, -1):
        if i % 2 == 0:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,0,normal,[],"def rounded_avg(n, m):
    if n > m:
        return -1
    return bin(round((n + m) / 2))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['717'],"import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = (n + m) / 2
    return bin(round(avg))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['717', '851', '830', 'HumanEval/103', '739']","import math

def rounded_avg(n, m):
    if n > m:
        return -1
    total = sum(range(n, m + 1))
    avg = total / (m - n + 1)
    return bin(round(avg))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['717', '851', '830', 'HumanEval/103', '739', '519', '638', '422', 'HumanEval/77', 'HumanEval/71']","import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = (n + m) / 2
    return bin(round(avg))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,0,normal,[],"def unique_digits(x):
    def has_even_digit(n):
        return any(int(digit) % 2 == 0 for digit in str(n))

    return sorted([num for num in x if not has_even_digit(num)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['406'],"def unique_digits(x):
    def has_even_digit(n):
        return any(int(digit) % 2 == 0 for digit in str(n))

    return sorted([num for num in x if not has_even_digit(num)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,5,normal,"['406', '781', 'HumanEval/116', '749', 'HumanEval/113']","def unique_digits(x):
    def has_even_digit(n):
        return any(int(digit) % 2 == 0 for digit in str(n))

    return sorted([num for num in x if not has_even_digit(num)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,10,normal,"['406', '781', 'HumanEval/116', '749', 'HumanEval/113', '27', 'HumanEval/105', 'HumanEval/158', 'HumanEval/34', '15']","def unique_digits(x):
    def has_even_digit(n):
        return any(int(digit) % 2 == 0 for digit in str(n))

    return sorted([num for num in x if not has_even_digit(num)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,0,normal,[],"def by_length(arr):
    digit_names = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 
                   6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    return [digit_names[i] for i in sorted([x for x in arr if 1 <= x <= 9])[::-1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,1,normal,['HumanEval/105'],"def by_length(arr):
    digit_names = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    return [digit_names[i] for i in sorted([x for x in arr if 1 <= x <= 9], reverse=True)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,5,normal,"['HumanEval/105', 'HumanEval/88', '433', 'HumanEval/19', '27']","def by_length(arr):
    numbers = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    return [numbers[i] for i in sorted([x for x in arr if 1 <= x <= 9], reverse=True)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,10,normal,"['HumanEval/105', 'HumanEval/88', '433', 'HumanEval/19', '27', 'HumanEval/116', 'HumanEval/113', 'HumanEval/158', 'HumanEval/34', '749']","def by_length(arr):
    var_1 = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    var_2 = sorted([var_3 for var_3 in arr if 1 <= var_3 <= 9], reverse=True)
    return [var_1[var_4] for var_4 in var_2]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,0,normal,[],"import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,1,normal,['905'],"import math

def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(math.factorial(i))
        else:
            result.append(sum(range(1, i + 1)))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['905', '873', 'HumanEval/32', 'HumanEval/115', 'HumanEval/26']","import math

def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(math.factorial(i))
        else:
            result.append(sum(range(1, i + 1)))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['905', '873', 'HumanEval/32', 'HumanEval/115', 'HumanEval/26', 'HumanEval/67', 'HumanEval/84', 'HumanEval/113', 'HumanEval/108', '133']","import math

def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(math.factorial(i))
        else:
            result.append(sum(range(1, i + 1)))
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,0,normal,[],"def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['HumanEval/107'],"def is_palindrome(n):
    return str(n) == str(n)[::-1]

def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n + 1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,5,normal,"['HumanEval/107', '485', 'HumanEval/10', '781', '406']","def is_palindrome(n):
    return str(n) == str(n)[::-1]

def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n + 1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,10,normal,"['HumanEval/107', '485', 'HumanEval/10', '781', '406', '134', 'HumanEval/113', '387', 'HumanEval/64', 'HumanEval/105']","def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    even_count = 0
    odd_count = 0
    for num in range(1, n + 1):
        if is_palindrome(num):
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,0,normal,[],"def count_nums(arr):
    return sum(sum(map(abs, map(int, str(abs(x))))) > 0 for x in arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,1,normal,['566'],"def count_nums(arr):
    def sum_digits(n):
        return sum(int(digit) for digit in str(n).replace('-', ''))

    return sum(1 for num in arr if sum_digits(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,5,normal,"['566', 'HumanEval/146', '398', '433', 'HumanEval/113']","def count_nums(arr):
    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,10,normal,"['566', 'HumanEval/146', '398', '433', 'HumanEval/113', '767', '527', 'HumanEval/115', 'HumanEval/108', '148']","def count_nums(arr):
    def sum_digits(num):
        return sum(int(digit) for digit in str(abs(num)))
    
    return sum(1 for num in arr if sum_digits(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,0,normal,[],"def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['433'],"def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,5,normal,"['433', 'HumanEval/57', 'HumanEval/105', '896', '370']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,10,normal,"['433', 'HumanEval/57', 'HumanEval/105', '896', '370', '889', 'HumanEval/158', '472', '670', '680']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,0,normal,[],"def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if odd_count <= even_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['HumanEval/52'],"def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count >= odd_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,5,normal,"['HumanEval/52', 'HumanEval/0', 'HumanEval/3', 'HumanEval/7', 'HumanEval/25']","def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count >= odd_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,10,normal,"['HumanEval/52', 'HumanEval/0', 'HumanEval/3', 'HumanEval/7', 'HumanEval/25', 'HumanEval/26', '70', '342', 'HumanEval/11', 'HumanEval/22']","def exchange(lst1, lst2):
    odd_count = sum(1 for num in lst1 if num % 2!= 0)
    even_count = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count >= odd_count else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,0,normal,[],"from collections import Counter

def histogram(test):
    test = test.split()
    if not test:
        return {}
    counter = Counter(test)
    max_count = max(counter.values())
    return {letter: count for letter, count in counter.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['862'],"from collections import Counter

def histogram(test):
    test = test.split()
    if not test:
        return {}
    counter = Counter(test)
    max_count = max(counter.values())
    return {letter: count for letter, count in counter.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,5,normal,"['862', '684', 'HumanEval/116', 'HumanEval/105', '523']","from collections import Counter

def histogram(test):
    test = test.split()
    if not test:
        return {}
    
    counter = Counter(test)
    max_count = max(counter.values())
    return {letter: count for letter, count in counter.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['862', '684', 'HumanEval/116', 'HumanEval/105', '523', '374', '278', 'HumanEval/19', 'HumanEval/113', '172']","from collections import Counter

def histogram(test):
    test = test.split()
    count = Counter(test)
    max_count = max(count.values(), default=0)
    return {key: value for key, value in count.items() if value == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,0,normal,[],"def reverse_delete(s, c):
    result = ''.join([char for char in s if char not in c])
    return result, result == result[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['HumanEval/10'],"def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,5,normal,"['HumanEval/10', 'HumanEval/107', '53', '604', '823']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,10,normal,"['HumanEval/10', 'HumanEval/107', '53', '604', '823', '860', 'HumanEval/64', '364', '889', '319']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,0,normal,[],"def odd_count(lst):
    return [f""the number of odd elements {sum(digit in '13579' for digit in s)}n the str{sum(digit in '13579' for digit in s)}ng {sum(digit in '13579' for digit in s)} of the {sum(digit in '13579' for digit in s)}nput."" for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['HumanEval/113'],"def odd_count(lst):
    return [f""the number of odd elements {sum(int(d) % 2 == 1 for d in s)}n the str{sum(int(d) % 2 == 1 for d in s)}ng {sum(int(d) % 2 == 1 for d in s)} of the {sum(int(d) % 2 == 1 for d in s)}nput."" for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,5,normal,"['HumanEval/113', '18', 'HumanEval/17', '374', '781']","def odd_count(lst):
    return [f""the number of odd elements {sum(int(d) % 2 == 1 for d in s)}n the str{sum(int(d) % 2 == 1 for d in s)}ng {sum(int(d) % 2 == 1 for d in s)} of the {sum(int(d) % 2 == 1 for d in s)}nput."" for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,10,normal,"['HumanEval/113', '18', 'HumanEval/17', '374', '781', '387', '684', 'HumanEval/26', '406', '134']","def odd_count(lst):
    return [f""the number of odd elements {sum(int(d) % 2 == 1 for d in s)}n the str{sum(int(d) % 2 == 1 for d in s)}ng {sum(int(d) % 2 == 1 for d in s)} of the {sum(int(d) % 2 == 1 for d in s)}nput."" for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,0,normal,[],"def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['476'],"def minSubArraySum(nums):
    if not nums:
        return 0

    min_sum = float('inf')
    current_sum = 0

    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)

    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,5,normal,"['476', '870', '212', '133', '271']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,10,normal,"['476', '870', '212', '133', '271', '634', '481', '504', '798', 'HumanEval/115']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,0,normal,[],"def max_fill(grid, capacity):
    import math
    total_water = sum(sum(row) for row in grid)
    return math.ceil(total_water / capacity)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,1,normal,['911'],"def max_fill(grid, capacity):
    import math
    total_water = sum(sum(row) for row in grid)
    return math.ceil(total_water / capacity)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,5,normal,"['911', '951', '366', '393', '805']","def max_fill(grid, capacity):
    import math
    total_water = sum(sum(row) for row in grid)
    return math.ceil(total_water / capacity)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,10,normal,"['911', '951', '366', '393', '805', '938', '299', '303', '663', '517']","def max_fill(grid, capacity):
    import math
    total_water = sum(sum(row) for row in grid)
    return math.ceil(total_water / capacity)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,0,normal,[],"def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,1,normal,['433'],"def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,5,normal,"['433', 'HumanEval/105', 'HumanEval/116', '896', 'HumanEval/34']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x))[2:].count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,10,normal,"['433', 'HumanEval/105', 'HumanEval/116', '896', 'HumanEval/34', 'HumanEval/104', '472', 'HumanEval/158', 'HumanEval/149', '12']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(abs(x))[2:].count('1'), abs(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,0,normal,[],"import re

def select_words(s, n):
    vowels = 'aeiouAEIOU'
    words = s.split()
    return [word for word in words if sum(1 for char in word if char not in vowels) == n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['HumanEval/64'],"def select_words(s, n):
    vowels = ""aeiouAEIOU""
    words = s.split()
    result = []
    for word in words:
        consonants = sum(c not in vowels for c in word)
        if consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,5,normal,"['HumanEval/64', '374', '523', 'HumanEval/17', '570']","def select_words(s, n):
    vowels = ""aeiouAEIOU""
    words = s.split()
    result = []
    for word in words:
        consonants = sum(1 for c in word if c not in vowels)
        if consonants == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['HumanEval/64', '374', '523', 'HumanEval/17', '570', 'HumanEval/26', 'HumanEval/19', '860', '950', 'HumanEval/105']","def select_words(s, n):
    vowels = ""aeiouAEIOU""
    return [word for word in s.split() if sum(c not in vowels for c in word) == n]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,0,normal,[],"def get_closest_vowel(word):
    vowels = 'AEIOUaeiou'
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/64'],"def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 1, 1, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,5,normal,"['HumanEval/64', 'HumanEval/51', '523', '823', '461']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,10,normal,"['HumanEval/64', 'HumanEval/51', '523', '823', '461', '818', '364', '53', '482', 'HumanEval/117']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,0,normal,[],"def match_parens(lst):
    def is_balanced(s):
        return s.count('(') == s.count(')')

    def can_balance(s1, s2):
        return is_balanced(s1 + s2) or is_balanced(s2 + s1)

    return 'Yes' if can_balance(lst[0], lst[1]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,1,normal,['53'],"def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,5,normal,"['53', '186', '178', '352', '823']","def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,10,normal,"['53', '186', '178', '352', '823', '917', 'HumanEval/6', '16', '43', '771']","def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,0,normal,[],"import heapq

def maximum(arr, k):
    return sorted(heapq.nlargest(k, arr))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['911'],"import heapq

def maximum(arr, k):
    return sorted(heapq.nlargest(k, arr))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,5,normal,"['911', 'HumanEval/9', '433', '342', '805']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,10,normal,"['911', 'HumanEval/9', '433', '342', '805', '299', '366', 'HumanEval/21', '517', '90']","import heapq

def maximum(arr, k):
    return heapq.nlargest(k, arr)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,0,normal,[],"def solution(lst):
    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['HumanEval/113'],"def solution(lst):
    return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['HumanEval/113', '797', '781', 'HumanEval/4', 'HumanEval/32']","def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['HumanEval/113', '797', '781', 'HumanEval/4', 'HumanEval/32', '340', '398', '134', 'HumanEval/121', 'HumanEval/64']","def solution(lst):
    return sum([x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,0,normal,[],"def add_elements(arr, k):
    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['398'],"def add_elements(arr, k):
    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,5,normal,"['398', 'HumanEval/115', 'HumanEval/113', 'HumanEval/32', 'HumanEval/4']","def add_elements(arr, k):
    return sum(num for num in arr[:k] if len(str(abs(num))) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,10,normal,"['398', 'HumanEval/115', 'HumanEval/113', 'HumanEval/32', 'HumanEval/4', 'HumanEval/122', '148', 'HumanEval/121', 'HumanEval/67', '949']","def add_elements(arr, k):
    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,0,normal,[],"def get_odd_collatz(n):
    odd_numbers = set()
    while n!= 1:
        if n % 2 == 1:
            odd_numbers.add(n)
        n = n // 2 if n % 2 == 0 else 3 * n + 1
    odd_numbers.add(1)
    return sorted(list(odd_numbers))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,1,normal,['781'],"import math

def get_odd_collatz(n):
    odd_nums = set()
    while n!= 1:
        if n % 2 == 0:
            n = n // 2
        else:
            odd_nums.add(n)
            n = 3 * n + 1
    odd_nums.add(1)
    return sorted(list(odd_nums))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,5,normal,"['781', 'HumanEval/113', '406', 'HumanEval/26', 'HumanEval/32']","def get_odd_collatz(n):
    odd_nums = set()
    while n!= 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        if n % 2!= 0:
            odd_nums.add(n)
    odd_nums.add(1)
    return sorted(list(odd_nums))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,10,normal,"['781', 'HumanEval/113', '406', 'HumanEval/26', 'HumanEval/32', '873', 'HumanEval/105', '84', '15', '647']","def get_odd_collatz(n):
    odd_numbers = set()
    while n!= 1:
        if n % 2 == 0:
            n = n // 2
        else:
            odd_numbers.add(n)
            n = 3 * n + 1
    odd_numbers.add(1)
    return sorted(list(odd_numbers))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,0,normal,[],"from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,1,normal,['910'],"from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['910', '866', '191', '336', '159']","from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['910', '866', '191', '336', '159', '396', '737', '928', '774', '352']","import re
from datetime import datetime

def valid_date(date):
    if not re.match(r'^\d{2}-\d{2}-\d{4}$', date):
        return False
    month, day, year = map(int, date.split('-'))
    if month < 1 or month > 12:
        return False
    if month in [1, 3, 5, 7, 8, 10, 12]:
        if day < 1 or day > 31:
            return False
    elif month in [4, 6, 9, 11]:
        if day < 1 or day > 30:
            return False
    else:
        if day < 1 or day > 29:
            return False
    try:
        datetime(year, month, day)
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,0,normal,[],"def split_words(txt):
    if'' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        return sum(1 for c in txt.lower() if ord(c) % 2!= 0 and c.isalpha())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['73'],"import re

def split_words(txt):
    if'' in txt:
        return re.split(' ', txt)
    elif ',' in txt:
        return re.split(',', txt)
    else:
        return sum(1 for c in txt.lower() if c.isalpha() and ord(c) % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,5,normal,"['73', 'HumanEval/17', '523', '374', '570']","import re

def split_words(txt):
    if'' in txt:
        return re.split('\s+', txt)
    elif ',' in txt:
        return re.split(',', txt)
    else:
        return sum(1 for i, c in enumerate(txt) if c.islower() and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,10,normal,"['73', 'HumanEval/17', '523', '374', '570', 'HumanEval/91', '459', '478', '495', 'HumanEval/19']","def split_words(txt):
    if'' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        return sum(1 for i, c in enumerate(txt.lower()) if c.isalpha() and (ord(c) - ord('a')) % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,0,normal,[],"from collections import Counter

def is_sorted(lst):
    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(count <= 2 for count in Counter(lst).values())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['HumanEval/57'],"def is_sorted(lst):
    return lst == sorted(lst) and len(lst) == len(set(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,5,normal,"['HumanEval/57', '670', '680', 'HumanEval/34', '472']","def is_sorted(lst):
    return lst == sorted(lst) and len(lst) == len(set(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['HumanEval/57', '670', '680', 'HumanEval/34', '472', '433', 'HumanEval/58', 'HumanEval/116', 'HumanEval/158', 'HumanEval/105']","def is_sorted(lst):
    return lst == sorted(lst) and all(lst.count(i) <= 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,0,normal,[],"import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    if intersection_start <= intersection_end:
        intersection_length = intersection_end - intersection_start + 1
        return ""YES"" if is_prime(intersection_length) else ""NO""
    else:
        return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"import math

def intersection(interval1, interval2):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start + 1
    if length > 0 and is_prime(length):
        return 'YES'
    return 'NO'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', 'HumanEval/59', 'HumanEval/75', 'HumanEval/39', '70']","import math

def intersection(interval1, interval2):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
            if n % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start + 1
    if length <= 0:
        return ""NO""
    return ""YES"" if is_prime(length) else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', 'HumanEval/59', 'HumanEval/75', 'HumanEval/39', '70', 'HumanEval/52', '260', '111', '218', '637']","import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start + 1
    if length <= 0:
        return ""NO""
    return ""YES"" if is_prime(length) else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,0,normal,[],"import math

def prod_signs(arr):
    if not arr:
        return None
    sign = 1
    magnitude_sum = 0
    for num in arr:
        if num < 0:
            sign *= -1
        elif num == 0:
            sign *= 0
        magnitude_sum += abs(num)
    return sign * magnitude_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['566'],"def prod_signs(arr):
    if not arr:
        return None
    sign = 1
    magnitude_sum = 0
    for num in arr:
        if num < 0:
            sign *= -1
        elif num == 0:
            sign *= 0
        magnitude_sum += abs(num)
    return sign * magnitude_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['566', '398', 'HumanEval/115', 'HumanEval/66', '433']","def prod_signs(arr):
    if not arr:
        return None
    sign = 1
    sum_magnitudes = 0
    for num in arr:
        if num < 0:
            sign *= -1
        elif num == 0:
            sign *= 0
        sum_magnitudes += abs(num)
    return sign * sum_magnitudes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['566', '398', 'HumanEval/115', 'HumanEval/66', '433', '645', 'HumanEval/113', '798', '504', 'HumanEval/67']","def prod_signs(arr):
    if not arr:
        return None
    product_of_signs = 1
    sum_of_magnitudes = 0
    for num in arr:
        product_of_signs *= 1 if num >= 0 else -1
        sum_of_magnitudes += abs(num)
    return product_of_signs * sum_of_magnitudes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,0,normal,[],"from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    min_path = [float('inf')] * k
    queue = deque([(grid[i][j], [grid[i][j]], i, j) for i in range(n) for j in range(n)])
    
    while queue:
        val, path, x, y = queue.popleft()
        if len(path) == k:
            if path < min_path:
                min_path = path
        else:
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n:
                    queue.append((grid[nx][ny], path + [grid[nx][ny]], nx, ny))
                    
    return min_path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['322'],"from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    min_val = float('inf')
    min_path = None

    def bfs(start, path):
        nonlocal min_val, min_path
        queue = deque([(start, path)])
        while queue:
            (x, y), path = queue.popleft()
            if len(path) == k:
                val = sum(grid[x][y] << (8 * (k - 1 - i)) for i, (x, y) in enumerate(path))
                if val < min_val:
                    min_val = val
                    min_path = path
                continue
            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n:
                    queue.append(((nx, ny), path + [(nx, ny)]))

    for i in range(n):
        for j in range(n):
            bfs((i, j), [(i, j)])

    return [grid[x][y] for x, y in min_path]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,5,normal,"['322', '947', '50', '95', '457']","from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    min_path = [float('inf')] * k
    queue = deque([(grid[i][j], [grid[i][j]]) for i in range(n) for j in range(n)])
    
    while queue:
        val, path = queue.popleft()
        if len(path) == k:
            if path < min_path:
                min_path = path
        elif len(path) < k:
            for dx, dy in directions:
                nx, ny = len(path) % n, (len(path) // n + dx) % n
                if 0 <= ny < n:
                    queue.append((grid[ny][nx], path + [grid[ny][nx]]))
                    
    return min_path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,10,normal,"['322', '947', '50', '95', '457', '62', '410', '94', '528', '325']","from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    min_val = float('inf')
    min_path = None

    def bfs(start):
        queue = deque([(start, [grid[start[0]][start[1]]])])
        visited = {start}

        while queue:
            (x, y), path = queue.popleft()

            if len(path) == k:
                val = sum(path)
                if val < min_val:
                    min_val = val
                    min_path = path
                continue

            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:
                    queue.append(((nx, ny), path + [grid[nx][ny]]))
                    visited.add((nx, ny))

    for i in range(n):
        for j in range(n):
            bfs((i, j))

    return min_path",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,0,normal,[],"def tri(n):
    sequence = [0, 1, 3]
    for i in range(3, n + 1):
        if i % 2 == 0:
            sequence.append(1 + i / 2)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])
    return sequence[:n + 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,1,normal,['873'],"def tri(n):
    sequence = [0, 1, 3]
    for i in range(3, n + 1):
        if i % 2 == 0:
            sequence.append(1 + i / 2)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])
    return sequence[:n + 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['873', '84', '583', '926', '552']","def tri(n):
    sequence = [0, 1, 3, 2]
    for i in range(4, n + 1):
        if i % 2 == 0:
            sequence.append(1 + i / 2)
        else:
            sequence.append(sequence[i - 2] + sequence[i - 3] + sequence[i - 1])
    return sequence[:n + 1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['873', '84', '583', '926', '552', '905', '687', 'HumanEval/55', '493', 'HumanEval/113']","def tri(n):
    sequence = [0] * (n + 2)
    sequence[1] = 3
    for i in range(2, n + 2):
        if i % 2 == 0:
            sequence[i] = 1 + i / 2
        else:
            sequence[i] = sequence[i - 1] + sequence[i - 2] + sequence[i + 1]
    return [int(x) for x in sequence[:n + 1]]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,0,normal,[],"def digits(n):
    product = 1
    for digit in str(n):
        digit = int(digit)
        if digit % 2!= 0:
            product *= digit
        if product == 0:
            break
    return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['566'],"def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['566', '781', '406', '134', 'HumanEval/113']","def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
    return product if product!= 1 else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['566', '781', '406', '134', 'HumanEval/113', '148', '387', '260', '619', '583']","def digits(n):
    product = 1
    for digit in str(n):
        if int(digit) % 2!= 0:
            product *= int(digit)
        if product == 0:
            break
    return product",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,0,normal,[],"def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if len(stack) > 1:
                return True
            stack.pop()
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['771'],"from collections import deque

def is_nested(string):
    stack = deque()
    max_depth = 0
    current_depth = 0
    for char in string:
        if char == '[':
            current_depth += 1
            max_depth = max(max_depth, current_depth)
            stack.append(char)
        elif char == ']':
            if not stack:
                return False
            stack.pop()
            current_depth -= 1
    return max_depth > 1 and not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['771', '823', '352', '523', '396']","def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if len(stack) > 1:
                return True
            stack.pop()
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['771', '823', '352', '523', '396', '737', '374', '913', '53', 'HumanEval/0']","def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if len(stack) > 1:
                return True
            stack.pop()
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,0,normal,[],"import math

def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['419'],"import math

def sum_squares(lst):
    return sum([math.ceil(i) ** 2 for i in lst])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['419', '422', '398', 'HumanEval/32', 'HumanEval/4']","import math

def sum_squares(lst):
    return sum(math.ceil(i) ** 2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,10,normal,"['419', '422', '398', 'HumanEval/32', 'HumanEval/4', 'HumanEval/121', '724', 'HumanEval/115', 'HumanEval/60', 'HumanEval/67']","import math

def sum_squares(lst):
    return sum([math.ceil(var_0) ** 2 for var_0 in lst])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,0,normal,[],"def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    if txt[-1] =='':
        return False
    words = txt.split()
    last_word = words[-1]
    return len(last_word) == 1 and last_word.isalpha()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['822'],"def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    if txt[-1] =='':
        return False
    words = txt.split()
    if len(words) > 1 and words[-1] == txt[-1]:
        return False
    return txt[-1].isalpha()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,5,normal,"['822', '523', '461', '823', 'HumanEval/141']","import re

def check_if_last_char_is_a_letter(txt):
    if not txt or txt[-1] =='':
        return False
    return bool(re.match('[a-zA-Z]$', txt.split()[-1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,10,normal,"['822', '523', '461', '823', 'HumanEval/141', '818', '482', '774', '53', '192']","import re

def check_if_last_char_is_a_letter(txt):
    if not txt or txt[-1] =='':
        return False
    words = re.findall(r'\b\w+\b', txt)
    last_word = words[-1]
    return txt[-1] == last_word and len(last_word) == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,0,normal,[],"def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,1,normal,['433'],"def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,5,normal,"['433', 'HumanEval/57', '472', 'HumanEval/58', 'HumanEval/105']","def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,10,normal,"['433', 'HumanEval/57', '472', 'HumanEval/58', 'HumanEval/105', '670', '680', '896', 'HumanEval/34', 'HumanEval/87']","def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,0,normal,[],"def largest_smallest_integers(lst):
    negative = [x for x in lst if x < 0]
    positive = [x for x in lst if x > 0]
    return (max(negative) if negative else None, min(positive) if positive else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,1,normal,['HumanEval/9'],"def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,5,normal,"['HumanEval/9', 'HumanEval/12', '472', 'HumanEval/21', '342']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,10,normal,"['HumanEval/9', 'HumanEval/12', '472', 'HumanEval/21', '342', '613', '648', '911', 'HumanEval/39', '322']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,0,normal,[],"import locale

def compare_one(a, b):
    locale.setlocale(locale.LC_ALL, 'de_DE')  # Set locale to handle comma as decimal point
    a = locale.atof(str(a))
    b = locale.atof(str(b))
    
    if a > b:
        if isinstance(a, int):
            return int(a)
        else:
            return str(a).replace('.', ',')
    elif a < b:
        if isinstance(b, int):
            return int(b)
        else:
            return str(b).replace('.', ',')
    else:
        return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,1,normal,['309'],"import locale

def compare_one(a, b):
    locale.setlocale(locale.LC_ALL, 'de_DE')  # Set locale to handle comma as decimal separator
    a = locale.atof(str(a))
    b = locale.atof(str(b))

    if a > b:
        if isinstance(a, int):
            return int(a)
        else:
            return locale.format_string('%.1f', a, grouping=True).replace('.', ',')
    elif b > a:
        if isinstance(b, int):
            return int(b)
        else:
            return locale.format_string('%.1f', b, grouping=True).replace('.', ',')
    else:
        return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,5,normal,"['309', '954', '404', '970', '433']","import locale

def compare_one(a, b):
    locale.setlocale(locale.LC_ALL, 'de_DE')  # Set locale to handle comma as decimal point
    a = locale.atof(str(a).replace(',', '.')) if isinstance(a, str) else a
    b = locale.atof(str(b).replace(',', '.')) if isinstance(b, str) else b
    
    if a > b:
        return a if isinstance(a, str) else type(a)(a)
    elif a < b:
        return b if isinstance(b, str) else type(b)(b)
    else:
        return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,10,normal,"['309', '954', '404', '970', '433', '452', '637', '924', '802', '177']","import locale

def compare_one(a, b):
    locale.setlocale(locale.LC_ALL, 'de_DE')  # Set locale to handle comma as decimal point
    a = locale.atof(str(a))
    b = locale.atof(str(b))

    if a > b:
        if isinstance(a, int):
            return int(a)
        elif isinstance(a, float):
            return a
        else:
            return str(a).replace('.', ',')
    elif a < b:
        if isinstance(b, int):
            return int(b)
        elif isinstance(b, float):
            return b
        else:
            return str(b).replace('.', ',')
    else:
        return None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,0,normal,[],"def is_equal_to_sum_even(n):
    for a in range(2, n, 2):
        for b in range(a, n, 2):
            for c in range(b, n, 2):
                d = n - a - b - c
                if d >= c and d % 2 == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,1,normal,['121'],"def is_equal_to_sum_even(n):
    def helper(n, count):
        if count == 4:
            return n == 0
        for i in range(2, n + 1, 2):
            if helper(n - i, count + 1):
                return True
        return False

    return helper(n, 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,5,normal,"['121', '541', '916', '481', '598']","def is_equal_to_sum_even(n):
    if n < 8:
        return False
    for a in range(2, n // 2 + 1, 2):
        for b in range(a, (n - a) // 2 + 1, 2):
            for c in range(b, (n - a - b) // 2 + 1, 2):
                d = n - a - b - c
                if d >= c and d % 2 == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,10,normal,"['121', '541', '916', '481', '598', 'HumanEval/94', '685', '398', '797', 'HumanEval/32']","def is_equal_to_sum_even(n):
    for a in range(2, n // 4 + 1, 2):
        for b in range(a, (n - a) // 3 + 1, 2):
            for c in range(b, (n - a - b) // 2 + 1, 2):
                d = n - a - b - c
                if d >= c and d % 2 == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,0,normal,[],"import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,1,normal,['905'],"import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,5,normal,"['905', '873', '583', '260', '406']","import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,10,normal,"['905', '873', '583', '260', '406', '926', '488', 'HumanEval/39', '218', '781']","import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,0,normal,[],"import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '_' if len(m.group()) == 1 else '-', text)
    return text.replace(' ', '_')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,1,normal,['523'],"import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '_' if len(m.group()) == 1 else '-', text)
    return text.replace(' ', '_')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,5,normal,"['523', '459', '823', '374', 'HumanEval/64']","import re

def fix_spaces(text):
    text = re.sub(' +', lambda m: '_' if len(m.group()) == 1 else '-', text)
    return text.replace(' ', '_')",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,10,normal,"['523', '459', '823', '374', 'HumanEval/64', '478', '495', 'HumanEval/51', '315', '451']","import re

def fix_spaces(text):
    text = re.sub(' +', lambda x: '_' if len(x.group()) == 1 else '-', text)
    return text",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,0,normal,[],"import re

def file_name_check(file_name):
    if len(re.findall('\d', file_name)) > 3:
        return 'No'
    if file_name.count('.')!= 1:
        return 'No'
    name, extension = file_name.split('.')
    if not name or not name[0].isalpha():
        return 'No'
    if extension not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    valid_extensions = ['txt', 'exe', 'dll']
    parts = file_name.split('.')
    if len(parts)!= 2:
        return 'No'
    if parts[1] not in valid_extensions:
        return 'No'
    if not parts[0] or not parts[0][0].isalpha():
        return 'No'
    if sum(c.isdigit() for c in parts[0]) > 3:
        return 'No'
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '396', '737', '823']","import re

def file_name_check(file_name):
    if re.search(r'^[a-zA-Z][^.]*\.[txt|exe|dll]$', file_name) and sum(c.isdigit() for c in file_name) <= 3:
        return 'Yes'
    else:
        return 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '396', '737', '823', '669', '774', '913', '454', '822']","import re

def file_name_check(file_name):
    if re.search('^[a-zA-Z][^\.]*\.(txt|exe|dll)$', file_name) and len([x for x in file_name if x.isdigit()]) <= 3:
        return 'Yes'
    else:
        return 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,0,normal,[],"def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,1,normal,['142'],"def sum_squares(lst):
    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,5,normal,"['142', '340', 'HumanEval/32', 'HumanEval/67', 'HumanEval/4']","def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,10,normal,"['142', '340', 'HumanEval/32', 'HumanEval/67', 'HumanEval/4', '398', 'HumanEval/121', 'HumanEval/60', 'HumanEval/84', '271']","def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 and i % 4!= 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,0,normal,[],"import sympy

def words_in_sentence(sentence):
    def is_prime(n):
        return sympy.isprime(n)

    return''.join(word for word in sentence.split() if is_prime(len(word)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,1,normal,['HumanEval/91'],"import re

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    words = re.split('\s+', sentence)
    return''.join(word for word in words if is_prime(len(word)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,5,normal,"['HumanEval/91', '570', '374', '523', '459']","import re

def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = re.findall(r'\b\w+\b', sentence)
    prime_words = [word for word in words if is_prime(len(word))]
    return''.join(prime_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,10,normal,"['HumanEval/91', '570', '374', '523', '459', '478', '495', 'HumanEval/17', 'HumanEval/19', 'HumanEval/107']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    return''.join([word for word in sentence.split() if is_prime(len(word))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,0,normal,[],"from fractions import Fraction

def simplify(x, n):
    result = Fraction(x) * Fraction(n)
    return result.denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,1,normal,['905'],"from fractions import Fraction

def simplify(x, n):
    result = Fraction(x) * Fraction(n)
    return result.denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['905', '148', 'HumanEval/39', 'HumanEval/32', 'HumanEval/94']","from fractions import Fraction

def simplify(x, n):
    result = Fraction(x) * Fraction(n)
    return result.denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,10,normal,"['905', '148', 'HumanEval/39', 'HumanEval/32', 'HumanEval/94', '541', '900', '218', '619', '121']","from fractions import Fraction

def simplify(x, n):
    result = Fraction(x) * Fraction(n)
    return result.denominator == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,0,normal,[],"from functools import cmp_to_key

def order_by_points(nums):
    def sum_of_digits(num):
        return sum(int(digit) for digit in str(abs(num)))

    def compare(a, b):
        sum_a = sum_of_digits(a)
        sum_b = sum_of_digits(b)
        if sum_a == sum_b:
            return nums.index(a) - nums.index(b)
        else:
            return sum_a - sum_b

    return sorted(nums, key=cmp_to_key(compare))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,1,normal,['HumanEval/145'],"def order_by_points(nums):
    def sum_of_digits(num):
        return sum(int(digit) for digit in str(abs(num)))
    return sorted(enumerate(nums), key=lambda x: (sum_of_digits(x[1]), x[0]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,5,normal,"['HumanEval/145', '12', 'HumanEval/34', '472', '342']","def order_by_points(nums):
    return sorted(enumerate(nums), key=lambda x: (sum(int(digit) for digit in str(abs(x[1]))), x[0]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,10,normal,"['HumanEval/145', '12', 'HumanEval/34', '472', '342', 'HumanEval/116', '896', 'HumanEval/158', 'HumanEval/105', '340']","def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,0,normal,[],"def specialFilter(nums):
    count = 0
    for num in nums:
        if abs(num) > 10 and num % 10 % 2!= 0 and int(str(abs(num))[0]) % 2!= 0:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,1,normal,['433'],"def specialFilter(nums):
    count = 0
    for num in nums:
        if abs(num) > 10 and (num % 10) % 2!= 0 and (abs(num) // 10 ** (len(str(abs(num))) - 1)) % 2!= 0:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,5,normal,"['433', '387', '781', 'HumanEval/105', 'HumanEval/113']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and str(abs(num))[0] in '13579' and str(abs(num))[-1] in '13579':
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,10,normal,"['433', '387', '781', 'HumanEval/105', 'HumanEval/113', '134', '148', 'HumanEval/108', 'HumanEval/146', '406']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            var_2 = (1, 3, 5, 7, 9)
            var_3 = str(abs(num))
            if int(var_3[0]) in var_2 and int(var_3[-1]) in var_2:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,0,normal,[],"def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,1,normal,['911'],"def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,5,normal,"['911', '121', '357', 'HumanEval/9', '187']","def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,10,normal,"['911', '121', '357', 'HumanEval/9', '187', 'HumanEval/26', 'HumanEval/59', '550', 'HumanEval/32', '366']","def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,0,normal,[],"def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    idx1, idx2 = planets.index(planet1), planets.index(planet2)
    if idx1 > idx2:
        idx1, idx2 = idx2, idx1
    return tuple(planets[idx1+1:idx2])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,1,normal,['HumanEval/148'],"def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    idx1 = planets.index(planet1)
    idx2 = planets.index(planet2)
    if idx1 < idx2:
        return planets[idx1 + 1:idx2]
    else:
        return planets[idx2 + 1:idx1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,5,normal,"['HumanEval/148', '873', '358', '282', '943']","def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    idx1, idx2 = planets.index(planet1), planets.index(planet2)
    if idx1 < idx2:
        return planets[idx1 + 1:idx2]
    else:
        return planets[idx2 + 1:idx1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,10,normal,"['HumanEval/148', '873', '358', '282', '943', '729', '682', '103', 'HumanEval/159', '249']","def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    idx1 = planets.index(planet1)
    idx2 = planets.index(planet2)
    if idx1 < idx2:
        return planets[idx1 + 1:idx2]
    else:
        return planets[idx2 + 1:idx1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,0,normal,[],"def sorted_list_sum(lst):
    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,1,normal,['949'],"def sorted_list_sum(lst):
    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,5,normal,"['949', '12', 'HumanEval/145', 'HumanEval/34', '340']","def sorted_list_sum(lst):
    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,10,normal,"['949', '12', 'HumanEval/145', 'HumanEval/34', '340', 'HumanEval/4', 'HumanEval/58', 'HumanEval/19', '108', '472']","def sorted_list_sum(lst):
    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,0,normal,[],"import math

def x_or_y(n, x, y):
    if n < 2:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,1,normal,['260'],"import math

def x_or_y(n, x, y):
    if n <= 1:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['260', 'HumanEval/127', 'HumanEval/75', 'HumanEval/39', 'HumanEval/59']","import math

def x_or_y(n, x, y):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, min(int(math.sqrt(num)) + 1, num - 1)):
            if num % i == 0:
                return False
        return True

    return x if is_prime(n) else y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,10,normal,"['260', 'HumanEval/127', 'HumanEval/75', 'HumanEval/39', 'HumanEval/59', 'HumanEval/11', '269', '30', '338', '905']","import math

def x_or_y(n, x, y):
    if n < 2:
        return y
    for i in range(2, min(int(math.sqrt(n)) + 1, n - 1)):
        if n % i == 0:
            return y
    return x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,0,normal,[],"def double_the_difference(lst):
    return sum(i**2 for i in lst if isinstance(i, int) and i >= 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,1,normal,['HumanEval/4'],"def double_the_difference(lst):
    return sum([x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2!= 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,5,normal,"['HumanEval/4', '781', 'HumanEval/113', 'HumanEval/32', 'HumanEval/25']","def double_the_difference(lst):
    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,10,normal,"['HumanEval/4', '781', 'HumanEval/113', 'HumanEval/32', 'HumanEval/25', '797', 'HumanEval/67', '398', '656', '293']","def double_the_difference(lst):
    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,0,normal,[],"def compare(game, guess):
    return [abs(a - b) for a, b in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['433'],"def compare(game, guess):
    return [abs(a - b) for a, b in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['433', '53', '787', '285', '434']","def compare(game, guess):
    return [abs(a - b) for a, b in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['433', '53', '787', '285', '434', '186', '178', '756', '794', '879']","def compare(game, guess):
    return [abs(a - b) for a, b in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,0,normal,[],"def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/6'],"def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,5,normal,"['HumanEval/6', '232', '254', '911', '648']","def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())

    strongest_extension = max(extensions, key=extension_strength)
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,10,normal,"['HumanEval/6', '232', '254', '911', '648', '523', '832', 'HumanEval/19', '200', '108']","def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        return sum(1 if c.isupper() else -1 if c.islower() else 0 for c in extension)

    strongest_extension = max(extensions, key=extension_strength)
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,0,normal,[],"def cycpattern_check(a, b):
    return b in a + a or any(b in a + a[i:] + a[:i] for i in range(len(a)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,1,normal,['823'],"import re

def cycpattern_check(a, b):
    for i in range(len(b)):
        if re.search(b[i:] + b[:i], a):
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,5,normal,"['823', '352', 'HumanEval/64', '643', '454']","def cycpattern_check(a, b):
    b_rotations = [b[i:] + b[:i] for i in range(len(b))]
    return any(rotation in a for rotation in b_rotations)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,10,normal,"['823', '352', 'HumanEval/64', '643', '454', '794', '879', '917', '285', '485']","def cycpattern_check(a, b):
    b_rotations = [b[i:] + b[:i] for i in range(len(b))]
    for rotation in b_rotations:
        if rotation in a:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,0,normal,[],"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,1,normal,['781'],"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['781', '387', '134', '406', 'HumanEval/113']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['781', '387', '134', '406', 'HumanEval/113', '218', '583', '873', 'HumanEval/146', 'HumanEval/83']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,0,normal,[],"def int_to_mini_roman(number):
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ]
    syb = [
        ""m"", ""cm"", ""d"", ""cd"",
        ""c"", ""xc"", ""l"", ""xl"",
        ""x"", ""ix"", ""v"", ""iv"",
        ""i""
        ]
    roman_num = ''
    i = 0
    while  number > 0:
        for _ in range(number // val[i]):
            roman_num += syb[i]
            number -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['HumanEval/15'],"def int_to_mini_roman(number):
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ]
    syb = [
        ""m"", ""cm"", ""d"", ""cd"",
        ""c"", ""xc"", ""l"", ""xl"",
        ""x"", ""ix"", ""v"", ""iv"",
        ""i""
        ]
    roman_num = ''
    i = 0
    while  number > 0:
        for _ in range(number // val[i]):
            roman_num += syb[i]
            number -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['HumanEval/15', '619', 'HumanEval/39', '411', '583']","def int_to_mini_roman(number):
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ]
    syb = [
        ""m"", ""cm"", ""d"", ""cd"",
        ""c"", ""xc"", ""l"", ""xl"",
        ""x"", ""ix"", ""v"", ""iv"",
        ""i""
        ]
    roman_num = ''
    i = 0
    while  number > 0:
        for _ in range(number // val[i]):
            roman_num += syb[i]
            number -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['HumanEval/15', '619', 'HumanEval/39', '411', '583', '566', '693', '892', '621', 'HumanEval/51']","def int_to_mini_roman(number):
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
        ]
    syb = [
        ""m"", ""cm"", ""d"", ""cd"",
        ""c"", ""xc"", ""l"", ""xl"",
        ""x"", ""ix"", ""v"", ""iv"",
        ""i""
        ]
    roman_num = ''
    i = 0
    while  number > 0:
        for _ in range(number // val[i]):
            roman_num += syb[i]
            number -= val[i]
        i += 1
    return roman_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,0,normal,[],"def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return sides[0]**2 + sides[1]**2 == sides[2]**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['826'],"def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return sides[0]**2 + sides[1]**2 == sides[2]**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,5,normal,"['826', '677', '786', '884', '180']","import math

def right_angle_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,10,normal,"['826', '677', '786', '884', '180', '228', '887', '323', '650', '308']","import math

def right_angle_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,0,normal,[],"def find_max(words):
    return max(words, key=lambda word: (len(set(word)), word))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,1,normal,['HumanEval/6'],"from typing import List

def find_max(words: List[str]) -> str:
    return max(words, key=lambda word: (len(set(word)), word))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['HumanEval/6', '299', '90', '366', '805']","def find_max(words):
    return max(words, key=lambda word: (len(set(word)), word))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['HumanEval/6', '299', '90', '366', '805', '911', '562', '393', '517', '523']","def find_max(words):
    return max(words, key=lambda x: (len(set(x)), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,0,normal,[],"def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = remaining - min(need, remaining)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['950'],"def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = remaining - min(need, remaining)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['950', '873', '31', '39', '843']","def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['950', '873', '31', '39', '843', 'HumanEval/113', '211', '365', 'HumanEval/146', '385']","def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,0,normal,[],"def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i + 1]
        elif operator[i] == '-':
            result -= operand[i + 1]
        elif operator[i] == '*':
            result *= operand[i + 1]
        elif operator[i] == '//':
            result //= operand[i + 1]
        elif operator[i] == '**':
            result **= operand[i + 1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['HumanEval/32'],"def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i+1]
        elif operator[i] == '-':
            result -= operand[i+1]
        elif operator[i] == '*':
            result *= operand[i+1]
        elif operator[i] == '//':
            result //= operand[i+1]
        elif operator[i] == '**':
            result **= operand[i+1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,5,normal,"['HumanEval/32', 'HumanEval/11', 'HumanEval/115', 'HumanEval/67', 'HumanEval/25']","def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i + 1]
        elif operator[i] == '-':
            result -= operand[i + 1]
        elif operator[i] == '*':
            result *= operand[i + 1]
        elif operator[i] == '//':
            result //= operand[i + 1]
        elif operator[i] == '**':
            result **= operand[i + 1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,10,normal,"['HumanEval/32', 'HumanEval/11', 'HumanEval/115', 'HumanEval/67', 'HumanEval/25', '780', '218', '905', '30', '338']","def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i + 1]
        elif operator[i] == '-':
            result -= operand[i + 1]
        elif operator[i] == '*':
            result *= operand[i + 1]
        elif operator[i] == '//':
            result //= operand[i + 1]
        elif operator[i] == '**':
            result **= operand[i + 1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,0,normal,[],"def solve(s):
    if any(c.isalpha() for c in s):
        return ''.join(c.swapcase() if c.isalpha() else c for c in s)
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,1,normal,['823'],"def solve(s):
    if any(c.isalpha() for c in s):
        return ''.join(c.swapcase() if c.isalpha() else c for c in s)
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,5,normal,"['823', '523', 'HumanEval/64', '53', '364']","def solve(s):
    if any(c.isalpha() for c in s):
        return ''.join(c.swapcase() if c.isalpha() else c for c in s)
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,10,normal,"['823', '523', 'HumanEval/64', '53', '364', '482', 'HumanEval/51', 'HumanEval/27', '15', '647']","def solve(s):
    if any(c.isalpha() for c in s):
        return s.swapcase()
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,0,normal,[],"import hashlib

def string_to_md5(text):
    if not text:
        return None
    return hashlib.md5(text.encode()).hexdigest()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('utf-8')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
