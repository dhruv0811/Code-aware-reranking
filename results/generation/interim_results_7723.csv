query_id,true_id,k,order_type,retrieved_docs,generated_code,pass@1,result_details
0,HumanEval/0,1,normal,['HumanEval/0'],"from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,5,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', 'HumanEval/3', '26']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
0,HumanEval/0,10,normal,"['HumanEval/0', 'HumanEval/20', 'HumanEval/52', 'HumanEval/3', '26', '89', '942', 'HumanEval/127', '284', '433']","from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,1,normal,['HumanEval/1'],"from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_group = []
    depth = 0

    for char in paren_string.replace("" "", """"):
        if char == '(':
            depth += 1
            current_group.append(char)
        elif char == ')':
            depth -= 1
            current_group.append(char)
            if depth == 0:
                result.append(''.join(current_group))
                current_group = []

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,5,normal,"['HumanEval/1', 'HumanEval/6', '640', '15', '956']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_group = []
    depth = 0

    for char in paren_string.replace("" "", """"):
        if char == ""("":
            depth += 1
            current_group.append(char)
        elif char == "")"":
            depth -= 1
            current_group.append(char)
            if depth == 0:
                result.append("""".join(current_group))
                current_group = []

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
1,HumanEval/1,10,normal,"['HumanEval/1', 'HumanEval/6', '640', '15', '956', '538', '374', 'HumanEval/17', '877', '693']","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current_group = []
    depth = 0

    for char in paren_string.replace("" "", """"):
        if char == ""("":
            depth += 1
            current_group.append(char)
        elif char == "")"":
            depth -= 1
            current_group.append(char)
            if depth == 0:
                result.append("""".join(current_group))
                current_group = []

    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,1,normal,['HumanEval/2'],"def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,5,normal,"['HumanEval/2', 'HumanEval/99', '435', '99', '89']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
2,HumanEval/2,10,normal,"['HumanEval/2', 'HumanEval/99', '435', '99', '89', '479', '692', '33', '24', 'HumanEval/79']","def truncate_number(number: float) -> float:
    return number - int(number)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,1,normal,['HumanEval/3'],"from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,5,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/0', '113', 'HumanEval/32']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
3,HumanEval/3,10,normal,"['HumanEval/3', 'HumanEval/52', 'HumanEval/0', '113', 'HumanEval/32', '477', 'HumanEval/40', 'HumanEval/43', '69', 'HumanEval/94']","from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,1,normal,['HumanEval/4'],"from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
4,HumanEval/4,5,normal,"['HumanEval/4', '717', '145', 'HumanEval/21', 'HumanEval/20']","def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
4,HumanEval/4,10,normal,"['HumanEval/4', '717', '145', 'HumanEval/21', 'HumanEval/20', 'HumanEval/47', '63', 'HumanEval/103', '622', '664']","def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
5,HumanEval/5,1,normal,['HumanEval/5'],"from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []
    return [delimeter if i % 2 else numbers[i // 2] for i in range(2 * len(numbers) - 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,5,normal,"['HumanEval/5', '578', '251', '503', 'HumanEval/25']","from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []
    result = [numbers[0]]
    for num in numbers[1:]:
        result.extend([delimeter, num])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
5,HumanEval/5,10,normal,"['HumanEval/5', '578', '251', '503', 'HumanEval/25', '500', 'HumanEval/32', 'HumanEval/28', '621', 'HumanEval/20']","def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    if not numbers:
        return []
    result = []
    for number in numbers[:-1]:
        result.extend([number, delimeter])
    result.append(numbers[-1])
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
6,HumanEval/6,1,normal,['HumanEval/6'],"from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
    return [max(map(lambda x: x.count('('), group.split(')'))) for group in paren_string.split(' ') if group]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,5,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/119', 'HumanEval/17']","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    groups = paren_string.split(' ')
    return [max(map(lambda x: x.count('('), group)) for group in groups]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
6,HumanEval/6,10,normal,"['HumanEval/6', 'HumanEval/1', 'HumanEval/132', 'HumanEval/119', 'HumanEval/17', '877', '538', 'HumanEval/61', '640', 'HumanEval/56']","def parse_nested_parens(paren_string: str) -> List[int]:
    def parse_paren_group(paren_string):
        depth = 0
        max_depth = 0
        for char in paren_string:
            if char == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            elif char == ')':
                depth -= 1
        return max_depth

    return [parse_paren_group(group) for group in paren_string.split(' ') if group]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
7,HumanEval/7,1,normal,['HumanEval/7'],"from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,5,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/22', '823', '456']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
7,HumanEval/7,10,normal,"['HumanEval/7', 'HumanEval/29', 'HumanEval/22', '823', '456', '91', '27', 'HumanEval/11', '18', '118']","from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [x for x in strings if substring in x]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,1,normal,['HumanEval/8'],"from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
    return sum(numbers), prod(numbers)

def prod(numbers: List[int]) -> int:
    result = 1
    for number in numbers:
        result *= number
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,5,normal,"['HumanEval/8', '514', '65', '796', '728']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
    sum_of_numbers = 0
    product_of_numbers = 1
    for number in numbers:
        sum_of_numbers += number
        product_of_numbers *= number
    return (sum_of_numbers, product_of_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
8,HumanEval/8,10,normal,"['HumanEval/8', '514', '65', '796', '728', 'HumanEval/60', '170', '649', '798', 'HumanEval/22']","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    var_1 = 0
    var_2 = 1
    for var_3 in numbers:
        var_1 += var_3
        var_2 *= var_3
    return (var_1, var_2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,1,normal,['HumanEval/9'],"from typing import List, Tuple

def rolling_max(numbers: List[int]) -> List[int]:
    max_so_far = None
    rolling_max_list = []
    for num in numbers:
        if max_so_far is None or num > max_so_far:
            max_so_far = num
        rolling_max_list.append(max_so_far)
    return rolling_max_list",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
9,HumanEval/9,5,normal,"['HumanEval/9', 'HumanEval/35', '259', 'HumanEval/163', 'HumanEval/147']","def rolling_max(numbers: List[int]) -> List[int]:
    max_so_far = None
    rolling_maxes = []
    for number in numbers:
        if max_so_far is None or number > max_so_far:
            max_so_far = number
        rolling_maxes.append(max_so_far)
    return rolling_maxes",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
9,HumanEval/9,10,normal,"['HumanEval/9', 'HumanEval/35', '259', 'HumanEval/163', 'HumanEval/147', '805', '393', '130', 'HumanEval/12', '971']","def rolling_max(numbers: List[int]) -> List[int]:
    max_so_far = None
    rolling_maxes = []
    for num in numbers:
        if max_so_far is None or num > max_so_far:
            max_so_far = num
        rolling_maxes.append(max_so_far)
    return rolling_maxes",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
10,HumanEval/10,1,normal,['HumanEval/10'],"def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
    if not string:
        return ''
    for i in range(len(string), -1, -1):
        if is_palindrome(string[:i]):
            return string + string[i:][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,5,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', '909']","def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
    if not string:
        return ''
    for i in range(len(string)):
        if is_palindrome(string[i:]):
            return string + string[:i][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
10,HumanEval/10,10,normal,"['HumanEval/10', 'HumanEval/48', '864', '485', '909', 'HumanEval/107', '100', '364', '823', '53']","def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
    if not string:
        return ''
    for i in range(len(string)):
        if is_palindrome(string[i:]):
            return string + string[:i][::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,1,normal,['HumanEval/11'],"def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,5,normal,"['HumanEval/11', '399', '456', '364', '226']","def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
11,HumanEval/11,10,normal,"['HumanEval/11', '399', '456', '364', '226', '192', 'HumanEval/78', '310', '538', 'HumanEval/7']","def string_xor(a: str, b: str) -> str:
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,1,normal,['HumanEval/12'],"from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
12,HumanEval/12,5,normal,"['HumanEval/12', '393', '207', 'HumanEval/153', 'HumanEval/9']","def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
12,HumanEval/12,10,normal,"['HumanEval/12', '393', '207', 'HumanEval/153', 'HumanEval/9', '128', 'HumanEval/6', 'HumanEval/7', 'HumanEval/136', 'HumanEval/11']","def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
13,HumanEval/13,1,normal,['HumanEval/13'],"def greatest_common_divisor(a: int, b: int) -> int:
    while b!= 0:
        a, b = b, a % b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,5,normal,"['HumanEval/13', '498', '45', '339', '151']","def greatest_common_divisor(var_0: int, var_1: int) -> int:
    while var_1:
        var_0, var_1 = (var_1, var_0 % var_1)
    return var_0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
13,HumanEval/13,10,normal,"['HumanEval/13', '498', '45', '339', '151', '781', '681', 'HumanEval/24', '687', '96']","def greatest_common_divisor(var_0: int, var_1: int) -> int:
    while var_1:
        var_0, var_1 = (var_1, var_0 % var_1)
    return var_0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,1,normal,['HumanEval/14'],"from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,5,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/7']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i] for i in range(1, len(string) + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
14,HumanEval/14,10,normal,"['HumanEval/14', 'HumanEval/29', '181', 'HumanEval/12', 'HumanEval/7', '456', '374', 'HumanEval/28', 'HumanEval/6', '207']","from typing import List

def all_prefixes(string: str) -> List[str]:
    return [string[:i] for i in range(1, len(string) + 1)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,1,normal,['HumanEval/15'],"def string_sequence(n: int) -> str:
    return''.join(map(str, range(n + 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,5,normal,"['HumanEval/15', '785', '132', '552', '39']","def string_sequence(n: int) -> str:
    return''.join([str(x) for x in range(n + 1)])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
15,HumanEval/15,10,normal,"['HumanEval/15', '785', '132', '552', '39', '84', '542', '310', '749', '538']","def string_sequence(n: int) -> str:
    return''.join(str(i) for i in range(n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,1,normal,['HumanEval/16'],"def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,5,normal,"['HumanEval/16', '684', '352', '666', '165']","def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
16,HumanEval/16,10,normal,"['HumanEval/16', '684', '352', '666', '165', '238', '813', '523', '242', '61']","def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,1,normal,['HumanEval/17'],"from typing import List

def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o|.| o| o|.|.|.|.| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""

    # Create a dictionary to map note symbols to their beat values
    note_to_beats = {'o': 4, 'o|': 2, '.|': 1}

    # Split the input string into individual notes and convert them to their beat values
    beats = [note_to_beats[note] for note in music_string.split() if note]

    return beats",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
17,HumanEval/17,5,normal,"['HumanEval/17', '686', 'HumanEval/6', '785', '226']","def parse_music(music_string: str) -> List[int]:
    var_1 = {'o': 4, 'o|': 2, '.|': 1}
    return [var_1[x] for x in music_string.split(' ') if x]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
17,HumanEval/17,10,normal,"['HumanEval/17', '686', 'HumanEval/6', '785', '226', '40', '192', '18', 'HumanEval/1', '238']","def parse_music(music_string: str) -> List[int]:
    var_1 = {'o': 4, 'o|': 2, '.|': 1}
    return [var_1[x] for x in music_string.split(' ') if x]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
18,HumanEval/18,1,normal,['HumanEval/18'],"def how_many_times(string: str, substring: str) -> int:
    count = 0
    start = 0
    while start < len(string):
        pos = string.find(substring, start)
        if pos!= -1:
            count += 1
            start = pos + 1
        else:
            break
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,5,normal,"['HumanEval/18', '238', '61', '773', '684']","def how_many_times(string: str, substring: str) -> int:
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
18,HumanEval/18,10,normal,"['HumanEval/18', '238', '61', '773', '684', '207', '91', '192', '30', '338']","def how_many_times(string: str, substring: str) -> int:
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,1,normal,['HumanEval/19'],"from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])
    return''.join(sorted_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,5,normal,"['HumanEval/19', '749', '37', '877', 'HumanEval/105']","from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    return''.join(sorted([num_dict[num] for num in numbers.split()]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
19,HumanEval/19,10,normal,"['HumanEval/19', '749', '37', '877', 'HumanEval/105', '705', '516', 'HumanEval/70', 'HumanEval/145', '104']","from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,'six': 6,'seven': 7, 'eight': 8, 'nine': 9}
    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])
    return''.join(sorted_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,1,normal,['HumanEval/20'],"from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = (numbers[0], numbers[1])
    smallest_diff = abs(numbers[0] - numbers[1])
    
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            current_diff = abs(numbers[i] - numbers[j])
            if current_diff < smallest_diff:
                smallest_diff = current_diff
                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))
                
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,5,normal,"['HumanEval/20', '89', 'HumanEval/99', 'HumanEval/0', 'HumanEval/19']","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = (numbers[0], numbers[1])
    min_diff = abs(numbers[0] - numbers[1])
    
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            current_diff = abs(numbers[i] - numbers[j])
            if current_diff < min_diff:
                min_diff = current_diff
                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))
                
    return closest_pair",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
20,HumanEval/20,10,normal,"['HumanEval/20', '89', 'HumanEval/99', 'HumanEval/0', 'HumanEval/19', '304', 'HumanEval/136', '259', '408', '898']","def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = (numbers[0], numbers[1])
    min_diff = abs(numbers[0] - numbers[1])
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < min_diff:
                min_diff = abs(numbers[i] - numbers[j])
                closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))
    return closest_pair",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
21,HumanEval/21,1,normal,['HumanEval/21'],"from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,5,normal,"['HumanEval/21', '919', '726', '673', 'HumanEval/25']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
21,HumanEval/21,10,normal,"['HumanEval/21', '919', '726', '673', 'HumanEval/25', '117', 'HumanEval/156', '708', '205', '98']","from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
22,HumanEval/22,1,normal,['HumanEval/22'],"def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
22,HumanEval/22,5,normal,"['HumanEval/22', '41', 'HumanEval/7', '277', 'HumanEval/29']","def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
22,HumanEval/22,10,normal,"['HumanEval/22', '41', 'HumanEval/7', '277', 'HumanEval/29', '722', 'HumanEval/3', 'HumanEval/26', 'HumanEval/136', '426']","from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,1,normal,['HumanEval/23'],"def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,5,normal,"['HumanEval/23', '238', '764', '813', 'HumanEval/15']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
23,HumanEval/23,10,normal,"['HumanEval/23', '238', '764', '813', 'HumanEval/15', '868', '684', '192', 'HumanEval/105', '83']","def strlen(string: str) -> int:
    return len(string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,1,normal,['HumanEval/24'],"def largest_divisor(n: int) -> int:
    for i in range(n-1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,5,normal,"['HumanEval/24', '96', '681', '339', 'HumanEval/13']","def largest_divisor(n: int) -> int:
    for i in range(n-1, 0, -1):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
24,HumanEval/24,10,normal,"['HumanEval/24', '96', '681', '339', 'HumanEval/13', '781', '483', '745', 'HumanEval/136', 'HumanEval/59']","def largest_divisor(n: int) -> int:
    for i in reversed(range(n)):
        if n % i == 0:
            return i",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,1,normal,['HumanEval/25'],"from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while divisor * divisor <= n:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,5,normal,"['HumanEval/25', '32', 'HumanEval/59', 'HumanEval/5', 'HumanEval/39']","from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while divisor * divisor <= n:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
25,HumanEval/25,10,normal,"['HumanEval/25', '32', 'HumanEval/59', 'HumanEval/5', 'HumanEval/39', 'HumanEval/75', '483', 'HumanEval/26', '726', '919']","from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while divisor * divisor <= n:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    if n > 1:
        factors.append(n)
    return factors",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,1,normal,['HumanEval/26'],"from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    result = []
    for num in numbers:
        if num not in seen:
            seen.add(num)
            result.append(num)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
26,HumanEval/26,5,normal,"['HumanEval/26', '932', '712', '674', '27']","def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    result = []
    for num in numbers:
        if num not in seen:
            seen.add(num)
            result.append(num)
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
26,HumanEval/26,10,normal,"['HumanEval/26', '932', '712', '674', '27', 'HumanEval/22', '161', '196', '22', 'HumanEval/34']","from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    result = []
    for num in numbers:
        if num not in seen:
            seen.add(num)
            result.append(num)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,1,normal,['HumanEval/27'],"def flip_case(string: str) -> str:
    return string.swapcase()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,5,normal,"['HumanEval/27', '557', '364', '877', '917']","def flip_case(string: str) -> str:
    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
27,HumanEval/27,10,normal,"['HumanEval/27', '557', '364', '877', '917', '478', '495', '459', '374', '604']","def flip_case(string: str) -> str:
    return ''.join(c.upper() if c.islower() else c.lower() for c in string)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,1,normal,['HumanEval/28'],"from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,5,normal,"['HumanEval/28', '213', '500', '206', '390']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
28,HumanEval/28,10,normal,"['HumanEval/28', '213', '500', '206', '390', '538', '421', 'HumanEval/14', '943', 'HumanEval/11']","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,1,normal,['HumanEval/29'],"from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,5,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/22', '277']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
29,HumanEval/29,10,normal,"['HumanEval/29', 'HumanEval/7', 'HumanEval/14', 'HumanEval/22', '277', '861', '456', 'HumanEval/26', '27', '181']","from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [x for x in strings if x.startswith(prefix)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,1,normal,['HumanEval/30'],"def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,5,normal,"['HumanEval/30', '870', '329', '442', '189']","def get_positive(l: list):
    return [num for num in l if num > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
30,HumanEval/30,10,normal,"['HumanEval/30', '870', '329', '442', '189', '41', '184', 'HumanEval/42', 'HumanEval/80', 'HumanEval/6']","def get_positive(l: list):
    return [e for e in l if e > 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,1,normal,['HumanEval/75'],"def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,5,normal,"['HumanEval/75', '605', 'HumanEval/82', 'HumanEval/39', 'HumanEval/31']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
31,HumanEval/31,10,normal,"['HumanEval/75', '605', 'HumanEval/82', 'HumanEval/39', 'HumanEval/31', 'HumanEval/59', '256', 'HumanEval/127', '685', '32']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,1,normal,['HumanEval/32'],"import math

def poly(xs: list, x: float) -> float:
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list) -> float:
    left, right = -1.0, 1.0
    while poly(xs, left) * poly(xs, right) > 0:
        left *= 2.0
        right *= 2.0
    while right - left > 1e-10:
        mid = (left + right) / 2.0
        if poly(xs, mid) * poly(xs, left) > 0:
            left = mid
        else:
            right = mid
    return left",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,5,normal,"['HumanEval/32', 'HumanEval/25', '589', 'HumanEval/11', 'HumanEval/161']","import math

def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
    assert len(xs) % 2 == 0 and max(xs)!= 0, ""Invalid input""
    low, high = -1.0, 1.0
    while poly(xs, low) * poly(xs, high) > 0:
        low *= 2.0
        high *= 2.0
    while high - low > 1e-10:
        mid = (low + high) / 2.0
        if poly(xs, mid) * poly(xs, low) > 0:
            low = mid
        else:
            high = mid
    return low",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
32,HumanEval/32,10,normal,"['HumanEval/32', 'HumanEval/25', '589', 'HumanEval/11', 'HumanEval/161', 'HumanEval/40', 'HumanEval/123', 'HumanEval/121', 'HumanEval/3', 'HumanEval/84']","import math

def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
    if len(xs) % 2!= 0:
        raise ValueError(""List must have even number of coefficients"")
    if xs[-1] == 0:
        raise ValueError(""Largest non-zero coefficient must be non-zero"")
    
    low = -1000
    high = 1000
    while high - low > 1e-10:
        mid = (low + high) / 2
        if poly(xs, mid) * poly(xs, low) > 0:
            low = mid
        else:
            high = mid
    return low",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,1,normal,['HumanEval/33'],"def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
    # Create a copy of the list to avoid modifying the original list
    l_prime = l[:]
    # Sort the elements at indices divisible by three
    l_prime[::3] = sorted(l[::3])
    return l_prime",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,5,normal,"['HumanEval/33', 'HumanEval/37', '104', '37', '569']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
33,HumanEval/33,10,normal,"['HumanEval/33', 'HumanEval/37', '104', '37', '569', '487', '839', '705', 'HumanEval/19', '516']","def sort_third(l: list):
    l = list(l)
    l[::3] = sorted(l[::3])
    return l",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,1,normal,['HumanEval/34'],"def unique(l: list):
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,5,normal,"['HumanEval/34', '694', 'HumanEval/104', '758', '779']","def unique(l: list):
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
34,HumanEval/34,10,normal,"['HumanEval/34', '694', 'HumanEval/104', '758', '779', '536', '281', '573', '104', '760']","def unique(l: list):
    return sorted(list(set(l)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,1,normal,['HumanEval/35'],"def max_element(l: list):
    return max(l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,5,normal,"['HumanEval/35', '259', '613', 'HumanEval/9', '393']","def max_element(var_0: list):
    var_1 = var_0[0]
    for var_2 in var_0:
        if var_2 > var_1:
            var_1 = var_2
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
35,HumanEval/35,10,normal,"['HumanEval/35', '259', '613', 'HumanEval/9', '393', 'HumanEval/158', 'HumanEval/147', '200', '101', 'HumanEval/136']","def max_element(var_0: list):
    var_1 = var_0[0]
    for var_2 in var_0:
        if var_2 > var_1:
            var_1 = var_2
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,1,normal,['HumanEval/36'],"def fizz_buzz(n: int) -> int:
    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,5,normal,"['HumanEval/36', '781', '365', '745', '577']","def fizz_buzz(n: int) -> int:
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
36,HumanEval/36,10,normal,"['HumanEval/36', '781', '365', '745', '577', '483', '107', '78', '426', 'HumanEval/113']","def fizz_buzz(n: int) -> int:
    count = 0
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            count += str(i).count('7')
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,1,normal,['HumanEval/37'],"def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
    return [l[i] if i % 2!= 0 else sorted(l[::2])[i // 2] for i in range(len(l))]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,5,normal,"['HumanEval/37', '790', '104', '569', '705']","def sort_even(l: list):
    even_indices = [l[i] for i in range(0, len(l), 2)]
    even_indices.sort()
    result = []
    even_index = 0
    for i in range(len(l)):
        if i % 2 == 0:
            result.append(even_indices[even_index])
            even_index += 1
        else:
            result.append(l[i])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
37,HumanEval/37,10,normal,"['HumanEval/37', '790', '104', '569', '705', '37', '41', 'HumanEval/19', '567', '889']","def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
    even_indices = sorted(l[::2])
    odd_indices = l[1::2]
    result = []
    for even, odd in zip(even_indices, odd_indices):
        result.extend([even, odd])
    if len(even_indices) > len(odd_indices):
        result.append(even_indices[-1])
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,1,normal,['HumanEval/38'],"def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,5,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '317', '157']","def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
38,HumanEval/38,10,normal,"['HumanEval/38', 'HumanEval/93', 'HumanEval/50', '317', '157', '217', '374', 'HumanEval/65', 'HumanEval/15', '39']","def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[-1:] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,1,normal,['HumanEval/39'],"def prime_fib(n: int) -> int:
    def is_prime(num: int) -> bool:
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    fib_sequence = [0, 1]
    count = 0

    while True:
        next_fib = fib_sequence[-1] + fib_sequence[-2]
        fib_sequence.append(next_fib)

        if is_prime(next_fib):
            count += 1
            if count == n:
                return next_fib",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,5,normal,"['HumanEval/39', 'HumanEval/55', '873', '605', '256']","def prime_fib(n: int) -> int:
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])

    prime_fibs = [num for num in fib_sequence if is_prime(num)]
    return prime_fibs[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
39,HumanEval/39,10,normal,"['HumanEval/39', 'HumanEval/55', '873', '605', '256', 'HumanEval/63', 'HumanEval/46', '32', 'HumanEval/59', 'HumanEval/31']","def prime_fib(n: int) -> int:
    def is_prime(num: int) -> bool:
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    fib_sequence = [0, 1]
    while len(fib_sequence) < n:
        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])
        if is_prime(fib_sequence[-1]):
            n -= 1

    return fib_sequence[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,1,normal,['HumanEval/40'],"def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total == 0:
                return True
            elif total < 0:
                left += 1
            else:
                right -= 1
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,5,normal,"['HumanEval/40', '340', 'HumanEval/43', '121', '916']","def triples_sum_to_zero(l: list):
    l.sort()
    for i in range(len(l) - 2):
        left, right = i + 1, len(l) - 1
        while left < right:
            total = l[i] + l[left] + l[right]
            if total == 0:
                return True
            elif total < 0:
                left += 1
            else:
                right -= 1
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
40,HumanEval/40,10,normal,"['HumanEval/40', '340', 'HumanEval/43', '121', '916', '837', '420', 'HumanEval/32', '514', '685']","def triples_sum_to_zero(l: list):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,1,normal,['HumanEval/41'],"def car_race_collision(n: int) -> int:
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
    return n ** 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,5,normal,"['HumanEval/41', '473', '249', '298', 'HumanEval/127']","def car_race_collision(n: int):
    return n * (n - 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
41,HumanEval/41,10,normal,"['HumanEval/41', '473', '249', '298', 'HumanEval/127', '525', '414', '239', 'HumanEval/74', '111']","def car_race_collision(n: int) -> int:
    return n * (n - 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,1,normal,['HumanEval/42'],"def incr_list(l: list):
    return [e + 1 for e in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,5,normal,"['HumanEval/42', '859', '729', '857', '536']","def incr_list(l: list):
    return [x + 1 for x in l]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
42,HumanEval/42,10,normal,"['HumanEval/42', '859', '729', '857', '536', '143', '282', '106', '758', '779']","def incr_list(var_0: list):
    return [e + 1 for e in var_0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,1,normal,['767'],"def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,5,normal,"['767', 'HumanEval/43', '144', 'HumanEval/40', '633']","def pairs_sum_to_zero(l: list) -> bool:
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
43,HumanEval/43,10,normal,"['767', 'HumanEval/43', '144', 'HumanEval/40', '633', '527', '138', '514', '723', '408']","def pairs_sum_to_zero(l):
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,1,normal,['HumanEval/44'],"def change_base(x: int, base: int) -> str:
    if base < 2 or base > 9:
        raise ValueError(""Base must be between 2 and 9"")
    result = """"
    while x > 0:
        result = str(x % base) + result
        x //= base
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,5,normal,"['HumanEval/44', '958', '619', '33', '24']","def change_base(x: int, base: int) -> str:
    if base < 2 or base > 9:
        raise ValueError(""Base must be between 2 and 9"")
    result = ''
    while x > 0:
        result = str(x % base) + result
        x //= base
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
44,HumanEval/44,10,normal,"['HumanEval/44', '958', '619', '33', '24', '539', 'HumanEval/79', '194', '99', '621']","def change_base(x: int, base: int) -> str:
    if base < 2 or base > 9:
        raise ValueError(""Base must be between 2 and 9"")
    result = """"
    while x > 0:
        result = str(x % base) + result
        x //= base
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,1,normal,['HumanEval/45'],"def triangle_area(a, h):
    return a * h / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,5,normal,"['HumanEval/45', '626', 'HumanEval/71', '488', '742']","def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
45,HumanEval/45,10,normal,"['HumanEval/45', '626', 'HumanEval/71', '488', '742', '848', '176', '163', '458', '52']","def triangle_area(a, h):
    return 0.5 * a * h",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,1,normal,['873'],"def fib4(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1 or n == 3:
        return 0
    elif n == 2:
        return 2
    else:
        a, b, c, d = 0, 0, 2, 0
        for _ in range(4, n + 1):
            a, b, c, d = b, c, d, a + b + c + d
        return d",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46']","def fib4(n: int) -> int:
    if n < 4:
        return [0, 0, 2, 0][n]
    fib4_sequence = [0, 0, 2, 0]
    for _ in range(4, n + 1):
        fib4_sequence.append(sum(fib4_sequence[-4:]))
        fib4_sequence.pop(0)
    return fib4_sequence[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
46,HumanEval/46,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46', '239', '843', '84', '552', '745']","def fib4(n: int) -> int:
    if n < 4:
        return [0, 0, 2, 0][n]
    fib4_values = [0, 0, 2, 0]
    for i in range(4, n + 1):
        fib4_values.append(sum(fib4_values[-4:]))
        fib4_values.pop(0)
    return fib4_values[-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,1,normal,['HumanEval/47'],"def median(l: list):
    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,5,normal,"['HumanEval/47', '342', '397', '622', '432']","def median(l: list):
    l.sort()
    n = len(l)
    if n % 2 == 1:
        return l[n // 2]
    else:
        return (l[n // 2 - 1] + l[n // 2]) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
47,HumanEval/47,10,normal,"['HumanEval/47', '342', '397', '622', '432', '381', '536', '790', '50', 'HumanEval/21']","def median(l: list):
    l = sorted(l)
    n = len(l)
    if n % 2 == 1:
        return l[n // 2]
    else:
        return (l[n // 2 - 1] + l[n // 2]) / 2.0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,1,normal,['HumanEval/48'],"def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,5,normal,"['HumanEval/48', 'HumanEval/10', '485', '864', 'HumanEval/107']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
48,HumanEval/48,10,normal,"['HumanEval/48', 'HumanEval/10', '485', '864', 'HumanEval/107', '192', '909', '53', 'HumanEval/134', '352']","def is_palindrome(text: str) -> bool:
    return text == text[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,1,normal,['952'],"def modp(n: int, p: int) -> int:
    result = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        base = (base ** 2) % p
        n = n // 2
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,5,normal,"['952', '745', 'HumanEval/49', '616', '402']","def modp(n: int, p: int) -> int:
    result = 1
    base = 2
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        base = (base * base) % p
        n = n // 2
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
49,HumanEval/49,10,normal,"['952', '745', 'HumanEval/49', '616', '402', '288', '471', '260', '36', '55']","def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    result = 1
    for _ in range(n):
        result = (2 * result) % p
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,1,normal,['HumanEval/50'],"def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])

def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,5,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/65', 'HumanEval/162']","def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
50,HumanEval/50,10,normal,"['HumanEval/50', 'HumanEval/93', 'HumanEval/38', 'HumanEval/65', 'HumanEval/162', '83', '317', '330', '732', '182']","def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,1,normal,['HumanEval/64'],"def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return ''.join(c for c in text if c not in vowels)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,5,normal,"['HumanEval/64', 'HumanEval/51', '131', 'HumanEval/118', '776']","def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return ''.join([c for c in text if c not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
51,HumanEval/51,10,normal,"['HumanEval/64', 'HumanEval/51', '131', 'HumanEval/118', '776', '727', '676', '377', '478', '495']","def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return ''.join([c for c in text if c not in vowels])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,1,normal,['HumanEval/52'],"def below_threshold(l: list, t: int) -> bool:
    return all(x < t for x in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,5,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '433', '477']","def below_threshold(l: list, t: int) -> bool:
    return all(x < t for x in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
52,HumanEval/52,10,normal,"['HumanEval/52', 'HumanEval/3', 'HumanEval/0', '433', '477', '69', 'HumanEval/57', '68', '567', '700']","def below_threshold(l: list, t: int) -> bool:
    return all(i < t for i in l)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,1,normal,['HumanEval/53'],"def add(x: int, y: int) -> int:
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,5,normal,"['HumanEval/53', '363', '750', '621', 'HumanEval/122']","def add(x: int, y: int) -> int:
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
53,HumanEval/53,10,normal,"['HumanEval/53', '363', '750', '621', 'HumanEval/122', 'HumanEval/85', '503', '729', '470', '106']","def add(x: int, y: int) -> int:
    return x + y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,1,normal,['352'],"def same_chars(s0: str, s1: str) -> bool:
    return set(s0) == set(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,5,normal,"['352', 'HumanEval/54', '53', '741', 'HumanEval/134']","def same_chars(s0: str, s1: str) -> bool:
    return sorted(s0) == sorted(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
54,HumanEval/54,10,normal,"['352', 'HumanEval/54', '53', '741', 'HumanEval/134', '217', '91', '30', '338', '74']","def same_chars(s0: str, s1: str) -> bool:
    return set(s0) == set(s1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,1,normal,['873'],"def fib(n: int) -> int:
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,5,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46']","def fib(n: int) -> int:
    a, b = 0, 1
    for _ in range(n):
        a, b = b, a + b
    return a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
55,HumanEval/55,10,normal,"['873', 'HumanEval/55', 'HumanEval/63', 'HumanEval/39', 'HumanEval/46', '483', '577', '623', '479', '745']","def fib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n + 1):
            a, b = b, a + b
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,1,normal,['HumanEval/119'],"def correct_bracketing(brackets: str) -> bool:
    balance = 0
    for bracket in brackets:
        if bracket == '<':
            balance += 1
        elif bracket == '>':
            balance -= 1
        if balance < 0:
            return False
    return balance == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,5,normal,"['HumanEval/119', 'HumanEval/56', 'HumanEval/61', '175', '30']","def correct_bracketing(brackets: str) -> bool:
    balance = 0
    for bracket in brackets:
        if bracket == '<':
            balance += 1
        elif bracket == '>':
            balance -= 1
        if balance < 0:
            return False
    return balance == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
56,HumanEval/56,10,normal,"['HumanEval/119', 'HumanEval/56', 'HumanEval/61', '175', '30', '338', '771', '178', 'HumanEval/0', '640']","def correct_bracketing(brackets: str) -> bool:
    balance = 0
    for bracket in brackets:
        if bracket == '<':
            balance += 1
        elif bracket == '>':
            balance -= 1
        if balance < 0:
            return False
    return balance == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,1,normal,['HumanEval/57'],"def monotonic(l: list) -> bool:
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,5,normal,"['HumanEval/57', 'HumanEval/3', '680', '68', '670']","def monotonic(l: list):
    return all((l[i] <= l[i + 1] for i in range(len(l) - 1))) or all((l[i] >= l[i + 1] for i in range(len(l) - 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
57,HumanEval/57,10,normal,"['HumanEval/57', 'HumanEval/3', '680', '68', '670', '889', '567', 'HumanEval/0', '69', 'HumanEval/52']","def monotonic(var_0: list):
    return all((var_0[i] <= var_0[i + 1] for i in range(len(var_0) - 1))) or all((var_0[i] >= var_0[i + 1] for i in range(len(var_0) - 1)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,1,normal,['HumanEval/58'],"def common(l1: list, l2: list):
    return sorted(set(l1).intersection(set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,5,normal,"['HumanEval/58', '111', '298', '431', '648']","def common(l1: list, l2: list):
    return sorted(set(l1).intersection(set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
58,HumanEval/58,10,normal,"['HumanEval/58', '111', '298', '431', '648', '578', '943', '108', '249', '104']","def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.""""""
    return sorted(list(set(l1) & set(l2)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,1,normal,['HumanEval/59'],"def largest_prime_factor(n: int) -> int:
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num: int) -> bool:
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    largest_factor = 1
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            largest_factor = max(largest_factor, i)
    return largest_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,5,normal,"['HumanEval/59', '32', 'HumanEval/24', '605', '260']","def largest_prime_factor(n: int) -> int:
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    largest_factor = 1
    for i in range(2, n + 1):
        if n % i == 0 and is_prime(i):
            largest_factor = max(largest_factor, i)
    return largest_factor",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
59,HumanEval/59,10,normal,"['HumanEval/59', '32', 'HumanEval/24', '605', '260', 'HumanEval/39', '256', '483', '443', '366']","def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(var_1):
        if var_1 < 2:
            return False
        for var_2 in range(2, var_1 - 1):
            if var_1 % var_2 == 0:
                return False
        return True
    var_3 = 1
    for var_4 in range(2, var_0 + 1):
        if var_0 % var_4 == 0 and is_prime(var_4):
            var_3 = max(var_3, var_4)
    return var_3",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,1,normal,['HumanEval/60'],"def sum_to_n(n: int) -> int:
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,5,normal,"['HumanEval/60', '870', '398', '675', '123']","def sum_to_n(n: int):
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
60,HumanEval/60,10,normal,"['HumanEval/60', '870', '398', '675', '123', '514', '133', '566', '162', '504']","def sum_to_n(n: int):
    return n * (n + 1) // 2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,1,normal,['HumanEval/119'],"def correct_bracketing(brackets: str) -> bool:
    balance = 0
    for bracket in brackets:
        if bracket == '(':
            balance += 1
        elif bracket == ')':
            balance -= 1
        if balance < 0:
            return False
    return balance == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,5,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', '175', '771']","def correct_bracketing(brackets: str) -> bool:
    stack = []
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack or stack[-1]!= '(':
                return False
            stack.pop()
    return not stack",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
61,HumanEval/61,10,normal,"['HumanEval/119', 'HumanEval/61', 'HumanEval/56', '175', '771', 'HumanEval/0', '640', '30', '338', '178']","def correct_bracketing(brackets: str) -> bool:
    balance = 0
    for bracket in brackets:
        if bracket == '(':
            balance += 1
        elif bracket == ')':
            balance -= 1
        if balance < 0:
            return False
    return balance == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,1,normal,['HumanEval/62'],"def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,5,normal,"['HumanEval/62', '399', 'HumanEval/11', 'HumanEval/160', '430']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
62,HumanEval/62,10,normal,"['HumanEval/62', '399', 'HumanEval/11', 'HumanEval/160', '430', '205', 'HumanEval/32', '456', '288', '623']","def derivative(xs: list):
    return [i * x for i, x in enumerate(xs)][1:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,1,normal,['HumanEval/63'],"def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c
        return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,5,normal,"['HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39', 'HumanEval/46']","def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    
    a, b, c = 0, 0, 1
    for _ in range(3, n + 1):
        a, b, c = b, c, a + b + c
    return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
63,HumanEval/63,10,normal,"['HumanEval/63', 'HumanEval/55', '873', 'HumanEval/39', 'HumanEval/46', '300', '84', '552', 'HumanEval/15', '345']","def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n + 1):
            a, b, c = b, c, a + b + c
        return c",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,1,normal,['HumanEval/64'],"def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""

    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,5,normal,"['HumanEval/64', 'HumanEval/51', 'HumanEval/118', '776', '131']","def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
64,HumanEval/64,10,normal,"['HumanEval/64', 'HumanEval/51', 'HumanEval/118', '776', '131', '684', '238', '813', '30', '338']","def vowels_count(s):
    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,1,normal,['HumanEval/50'],"def circular_shift(x: int, shift: int) -> str:
    x_str = str(x)
    shift %= len(x_str)  # Ensure shift is within the length of the number
    return x_str[-shift:] + x_str[:-shift]  # Perform the circular shift",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,5,normal,"['HumanEval/50', 'HumanEval/65', '364', 'HumanEval/38', '619']","def circular_shift(x, shift):
    x = str(x)
    shift = shift % len(x)
    return x[-shift:] + x[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
65,HumanEval/65,10,normal,"['HumanEval/50', 'HumanEval/65', '364', 'HumanEval/38', '619', '799', '435', '467', 'HumanEval/11', '775']","def circular_shift(x, shift):
    x = str(x)
    shift %= len(x)  # Ensure shift is within the length of the number
    if shift == 0:
        return x
    else:
        return x[-shift:] + x[:-shift]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,1,normal,['148'],"def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,5,normal,"['148', '146', 'HumanEval/66', '566', '398']","def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
66,HumanEval/66,10,normal,"['148', '146', 'HumanEval/66', '566', '398', '558', '269', 'HumanEval/108', 'HumanEval/131', '238']","def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,1,normal,['HumanEval/67'],"def fruit_distribution(s, n):
    numbers = [int(num) for num in s.split() if num.isdigit()]
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,5,normal,"['HumanEval/67', '61', '238', 'HumanEval/105', '749']","def fruit_distribution(s, n):
    numbers = [int(num) for num in s.split() if num.isdigit()]
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
67,HumanEval/67,10,normal,"['HumanEval/67', '61', '238', 'HumanEval/105', '749', '453', 'HumanEval/113', '926', '911', '360']","def fruit_distribution(s, n):
    numbers = [int(num) for num in s.split() if num.isdigit()]
    return n - sum(numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,1,normal,['342'],"def pluck(arr):
    if not arr:
        return []
    min_even = float('inf')
    min_index = -1
    for i, num in enumerate(arr):
        if num % 2 == 0 and num < min_even:
            min_even = num
            min_index = i
    if min_index == -1:
        return []
    return [min_even, min_index]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,5,normal,"['342', 'HumanEval/68', '893', '460', '413']","def pluck(arr):
    if not arr:
        return []
    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    if not evens:
        return []
    return list(min(evens, key=lambda x: (x[0], -x[1])))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
68,HumanEval/68,10,normal,"['342', 'HumanEval/68', '893', '460', '413', 'HumanEval/90', 'HumanEval/136', '94', '304', '408']","def pluck(arr):
    if not arr:
        return []
    even_values = [(value, index) for index, value in enumerate(arr) if value % 2 == 0]
    if not even_values:
        return []
    return list(min(even_values, key=lambda x: (x[0], x[1])))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,1,normal,['HumanEval/136'],"def search(lst):
    freq = {}
    for num in lst:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    for num in sorted(freq, reverse=True):
        if num <= freq[num]:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,5,normal,"['HumanEval/136', '143', '492', 'HumanEval/69', '184']","def search(lst):
    freq = {}
    for num in lst:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    max_val = -1
    for num, count in freq.items():
        if num > 0 and count >= num and num > max_val:
            max_val = num
    return max_val",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
69,HumanEval/69,10,normal,"['HumanEval/136', '143', '492', 'HumanEval/69', '184', '613', '119', 'HumanEval/22', '97', '605']","def search(lst):
    freq = {}
    for num in lst:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    max_num = -1
    for num, count in freq.items():
        if num <= count and num > max_num:
            max_num = num
    return max_num",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,1,normal,['HumanEval/70'],"def strange_sort_list(lst):
    lst.sort()
    result = []
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,5,normal,"['HumanEval/70', '37', '889', '705', '569']","def strange_sort_list(lst):
    lst.sort()
    result = []
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
70,HumanEval/70,10,normal,"['HumanEval/70', '37', '889', '705', '569', '104', '896', 'HumanEval/88', 'HumanEval/19', '749']","def strange_sort_list(lst):
    lst.sort()
    result = []
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,1,normal,['HumanEval/45'],"import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,5,normal,"['HumanEval/45', '176', 'HumanEval/71', '626', '742']","def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c) / 2
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
71,HumanEval/71,10,normal,"['HumanEval/45', '176', 'HumanEval/71', '626', '742', '488', '848', '163', 'HumanEval/157', '677']","import math

def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c) / 2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return round(area, 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,1,normal,['HumanEval/72'],"def will_it_fly(q, w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,5,normal,"['HumanEval/72', '129', '485', '121', '433']","def will_it_fly(q, w):
    if sum(q) > w:
        return False
    return q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
72,HumanEval/72,10,normal,"['HumanEval/72', '129', '485', '121', '433', '123', 'HumanEval/3', 'HumanEval/80', 'HumanEval/32', '69']","def will_it_fly(q, w):
    return sum(q) <= w and q == q[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,1,normal,['100'],"def smallest_change(arr):
    changes = 0
    i, j = 0, len(arr) - 1
    while i < j:
        if arr[i]!= arr[j]:
            changes += 1
        i += 1
        j -= 1
    return changes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,5,normal,"['100', '699', '595', '838', 'HumanEval/73']","def smallest_change(arr):
    changes = 0
    i, j = 0, len(arr) - 1
    while i < j:
        if arr[i]!= arr[j]:
            changes += 1
        i += 1
        j -= 1
    return changes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
73,HumanEval/73,10,normal,"['100', '699', '595', '838', 'HumanEval/73', '644', '856', '755', '408', 'HumanEval/88']","def smallest_change(arr):
    changes = 0
    for i in range(len(arr) // 2):
        if arr[i]!= arr[-i - 1]:
            changes += 1
    return changes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,1,normal,['HumanEval/74'],"def total_match(lst1, lst2):
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)
    
    if total_chars_lst1 <= total_chars_lst2:
        return lst1
    else:
        return lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,5,normal,"['HumanEval/74', '61', '285', '178', '298']","def total_match(lst1, lst2):
    total1 = sum(len(s) for s in lst1)
    total2 = sum(len(s) for s in lst2)
    return lst1 if total1 <= total2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
74,HumanEval/74,10,normal,"['HumanEval/74', '61', '285', '178', '298', '666', '238', '186', 'HumanEval/7', '684']","def total_match(lst1, lst2):
    total1 = sum(len(s) for s in lst1)
    total2 = sum(len(s) for s in lst2)
    return lst1 if total1 <= total2 else lst2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,1,normal,['HumanEval/75'],"def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(i, 101):  # Start from i to avoid duplicate checks
            if not is_prime(j):
                continue
            for k in range(j, 101):  # Start from j to avoid duplicate checks
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,5,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '605', 'HumanEval/31']","def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(i, 101):
            if not is_prime(j):
                continue
            for k in range(j, 101):
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
75,HumanEval/75,10,normal,"['HumanEval/75', 'HumanEval/59', 'HumanEval/39', '605', 'HumanEval/31', '685', 'HumanEval/82', '256', '32', 'HumanEval/127']","def is_multiply_prime(a):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    for i in range(2, 101):
        if not is_prime(i):
            continue
        for j in range(i, 101):
            if not is_prime(j):
                continue
            for k in range(j, 101):
                if not is_prime(k):
                    continue
                if i * j * k == a:
                    return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,1,normal,['HumanEval/76'],"def is_simple_power(x, n):
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power *= n
    return power == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,5,normal,"['HumanEval/76', '167', '138', '93', '199']","def is_simple_power(x, n):
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power *= n
    return power == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
76,HumanEval/76,10,normal,"['HumanEval/76', '167', '138', '93', '199', '388', 'HumanEval/75', '900', '724', '605']","def is_simple_power(x, n):
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power *= n
    return power == x",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,1,normal,['HumanEval/77'],"def iscube(a):
    return round(a ** (1/3)) ** 3 == a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,5,normal,"['HumanEval/77', '646', '447', '129', 'HumanEval/94']","def iscube(a):
    return round(a ** (1.0 / 3)) ** 3 == a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
77,HumanEval/77,10,normal,"['HumanEval/77', '646', '447', '129', 'HumanEval/94', '59', '422', '72', '279', '234']","def iscube(a):
    return round(a ** (1.0 / 3)) ** 3 == a",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,1,normal,['135'],"def hex_key(num):
    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}
    return sum(1 for digit in num if digit in prime_hex_digits)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,5,normal,"['135', 'HumanEval/78', 'HumanEval/94', '256', '107']","def hex_key(num):
    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}
    return sum(1 for digit in num if digit in prime_hex_digits)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
78,HumanEval/78,10,normal,"['135', 'HumanEval/78', 'HumanEval/94', '256', '107', '605', 'HumanEval/66', '745', 'HumanEval/82', '86']","def hex_key(num):
    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}
    return sum(1 for digit in num if digit in prime_hex_digits)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,1,normal,['HumanEval/79'],"def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,5,normal,"['HumanEval/79', '99', '494', '33', '24']","def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
79,HumanEval/79,10,normal,"['HumanEval/79', '99', '494', '33', '24', '467', '194', '208', '759', 'HumanEval/162']","def decimal_to_binary(decimal):
    return 'db' + bin(decimal)[2:] + 'db'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,1,normal,['HumanEval/80'],"def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if len(set(s[i:i+3])) < 3:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,5,normal,"['HumanEval/80', '523', '192', '53', 'HumanEval/134']","def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if len(set(s[i:i+3])) < 3:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
80,HumanEval/80,10,normal,"['HumanEval/80', '523', '192', '53', 'HumanEval/134', '352', '30', '338', '737', '91']","def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,1,normal,['HumanEval/81'],"def numerical_letter_grade(grades):
    letter_grades = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grades.append('A+')
        elif gpa > 3.7:
            letter_grades.append('A')
        elif gpa > 3.3:
            letter_grades.append('A-')
        elif gpa > 3.0:
            letter_grades.append('B+')
        elif gpa > 2.7:
            letter_grades.append('B')
        elif gpa > 2.3:
            letter_grades.append('B-')
        elif gpa > 2.0:
            letter_grades.append('C+')
        elif gpa > 1.7:
            letter_grades.append('C')
        elif gpa > 1.3:
            letter_grades.append('C-')
        elif gpa > 1.0:
            letter_grades.append('D+')
        elif gpa > 0.7:
            letter_grades.append('D')
        elif gpa > 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,5,normal,"['HumanEval/81', 'HumanEval/19', '749', '397', 'HumanEval/134']","def numerical_letter_grade(grades):
    letter_grades = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grades.append('A+')
        elif gpa > 3.7:
            letter_grades.append('A')
        elif gpa > 3.3:
            letter_grades.append('A-')
        elif gpa > 3.0:
            letter_grades.append('B+')
        elif gpa > 2.7:
            letter_grades.append('B')
        elif gpa > 2.3:
            letter_grades.append('B-')
        elif gpa > 2.0:
            letter_grades.append('C+')
        elif gpa > 1.7:
            letter_grades.append('C')
        elif gpa > 1.3:
            letter_grades.append('C-')
        elif gpa > 1.0:
            letter_grades.append('D+')
        elif gpa > 0.7:
            letter_grades.append('D')
        elif gpa > 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
81,HumanEval/81,10,normal,"['HumanEval/81', 'HumanEval/19', '749', '397', 'HumanEval/134', '184', 'HumanEval/160', 'HumanEval/25', '883', '817']","def numerical_letter_grade(grades):
    var_1 = []
    for var_2 in grades:
        if var_2 == 4.0:
            var_1.append('A+')
        elif var_2 > 3.7:
            var_1.append('A')
        elif var_2 > 3.3:
            var_1.append('A-')
        elif var_2 > 3.0:
            var_1.append('B+')
        elif var_2 > 2.7:
            var_1.append('B')
        elif var_2 > 2.3:
            var_1.append('B-')
        elif var_2 > 2.0:
            var_1.append('C+')
        elif var_2 > 1.7:
            var_1.append('C')
        elif var_2 > 1.3:
            var_1.append('C-')
        elif var_2 > 1.0:
            var_1.append('D+')
        elif var_2 > 0.7:
            var_1.append('D')
        elif var_2 > 0.0:
            var_1.append('D-')
        else:
            var_1.append('E')
    return var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,1,normal,['HumanEval/82'],"def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
    length = len(string)
    if length < 2:
        return False
    for i in range(2, int(length ** 0.5) + 1):
        if length % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,5,normal,"['HumanEval/82', '605', '192', '813', 'HumanEval/31']","def prime_length(string):
    length = len(string)
    if length < 2:
        return False
    for i in range(2, int(length ** 0.5) + 1):
        if length % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
82,HumanEval/82,10,normal,"['HumanEval/82', '605', '192', '813', 'HumanEval/31', '523', 'HumanEval/39', '79', '964', '352']","def prime_length(string):
    length = len(string)
    if length < 2:
        return False
    for i in range(2, int(length ** 0.5) + 1):
        if length % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,1,normal,['HumanEval/83'],"def starts_one_ends(n):
    if n == 1:
        return 1
    return 18 * 10 ** (n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,5,normal,"['HumanEval/83', '365', '543', '278', '479']","def starts_one_ends(n):
    if n == 1:
        return 1
    return 18 * 10 ** (n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
83,HumanEval/83,10,normal,"['HumanEval/83', '365', '543', '278', '479', 'HumanEval/104', '657', '745', '913', '345']","def starts_one_ends(n):
    if n == 1:
        return 1
    return 18 * 10 ** (n - 2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,1,normal,['HumanEval/84'],"def solve(N):
    return bin(sum(int(digit) for digit in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,5,normal,"['HumanEval/84', '148', '398', '566', 'HumanEval/66']","def solve(N):
    return bin(sum((int(i) for i in str(N))))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
84,HumanEval/84,10,normal,"['HumanEval/84', '148', '398', '566', 'HumanEval/66', '558', '845', 'HumanEval/60', '123', '870']","def solve(N):
    return bin(sum(int(digit) for digit in str(N)))[2:]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,1,normal,['881'],"def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,5,normal,"['881', '106', 'HumanEval/155', '729', 'HumanEval/122']","def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
85,HumanEval/85,10,normal,"['881', '106', 'HumanEval/155', '729', 'HumanEval/122', '363', '270', '784', 'HumanEval/53', 'HumanEval/113']","def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,1,normal,['HumanEval/86'],"def anti_shuffle(s):
    return''.join([''.join(sorted(list(word))) for word in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,5,normal,"['HumanEval/86', '877', '39', '364', '374']","def anti_shuffle(s):
    return''.join([''.join(sorted(list(word))) for word in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
86,HumanEval/86,10,normal,"['HumanEval/86', '877', '39', '364', '374', '604', '456', '226', '915', 'HumanEval/27']","def anti_shuffle(s):
    return''.join([''.join(sorted(list(word))) for word in s.split(' ')])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,1,normal,['HumanEval/87'],"def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2)...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""

    # Find the coordinates of x in lst
    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]

    # Sort the coordinates by row in ascending order and then by column in descending order
    sorted_coordinates = sorted(coordinates, key=lambda coord: (coord[0], -coord[1]))

    return sorted_coordinates",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,5,normal,"['HumanEval/87', '104', '215', '569', '282']","def get_row(lst, x):
    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
87,HumanEval/87,10,normal,"['HumanEval/87', '104', '215', '569', '282', '298', '652', '630', '859', '705']","def get_row(lst, x):
    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,1,normal,['HumanEval/88'],"def sort_array(array):
    if not array:
        return []
    else:
        return sorted(array, reverse=(array[0] + array[-1]) % 2 == 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,5,normal,"['HumanEval/88', 'HumanEval/116', '12', 'HumanEval/149', '229']","def sort_array(array):
    if not array:
        return []
    
    is_odd = (array[0] + array[-1]) % 2!= 0
    return sorted(array, reverse=is_odd)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
88,HumanEval/88,10,normal,"['HumanEval/88', 'HumanEval/116', '12', 'HumanEval/149', '229', 'HumanEval/37', '940', '635', '569', '104']","def sort_array(array):
    if not array:
        return []
    
    if (array[0] + array[-1]) % 2 == 0:
        return sorted(array, reverse=True)
    else:
        return sorted(array)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,1,normal,['HumanEval/89'],"def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    encrypted_text = ''
    for char in s:
        if char in alphabet:
            encrypted_text += alphabet[(alphabet.index(char) + 2 * 2) % 26]
        else:
            encrypted_text += char
    return encrypted_text",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,5,normal,"['HumanEval/89', 'HumanEval/11', '364', 'HumanEval/162', '374']","def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    encrypted_str = ''
    for char in s:
        if char in alphabet:
            encrypted_str += alphabet[(alphabet.index(char) + 2 * 2) % 26]
        else:
            encrypted_str += char
    return encrypted_str",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
89,HumanEval/89,10,normal,"['HumanEval/89', 'HumanEval/11', '364', 'HumanEval/162', '374', 'HumanEval/93', 'HumanEval/78', '864', 'HumanEval/64', 'HumanEval/50']","def encrypt(s):
    var_1 = 'abcdefghijklmnopqrstuvwxyz'
    var_2 = ''
    for var_3 in s:
        if var_3 in var_1:
            var_2 += var_1[(var_1.index(var_3) + 2 * 2) % 26]
        else:
            var_2 += var_3
    return var_2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,1,normal,['62'],"def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst.sort()
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,5,normal,"['62', '100', 'HumanEval/136', 'HumanEval/90', '755']","def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst = list(set(lst))
    lst.sort()
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
90,HumanEval/90,10,normal,"['62', '100', 'HumanEval/136', 'HumanEval/90', '755', '408', '901', '496', 'HumanEval/99', 'HumanEval/20']","def next_smallest(lst):
    if len(lst) < 2:
        return None
    lst = list(set(lst))
    lst.sort()
    return lst[1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,1,normal,['HumanEval/91'],"def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
    sentences = S.split('.')
    boredoms = 0
    for sentence in sentences:
        words = sentence.split()
        if words and words[0] == 'I':
            boredoms += 1
    return boredoms",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,5,normal,"['HumanEval/91', '862', '897', 'HumanEval/143', 'HumanEval/101']","def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
    sentences = re.split('[.?!]\\s*', S)
    return sum(sentence.startswith('I ') for sentence in sentences)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
91,HumanEval/91,10,normal,"['HumanEval/91', '862', '897', 'HumanEval/143', 'HumanEval/101', 'HumanEval/117', '79', '964', '537', 'HumanEval/36']","def is_bored(var_0):
    var_1 = re.split('[.?!]\\s*', var_0)
    return sum((sentence[0:2] == 'I'for sentence in var_1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,1,normal,['138'],"def any_int(x, y, z):
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,5,normal,"['138', 'HumanEval/92', '121', '123', 'HumanEval/138']","def any_int(var_0, var_1, var_2):
    if isinstance(var_0, int) and isinstance(var_1, int) and isinstance(var_2, int):
        if var_0 + var_1 == var_2 or var_0 + var_2 == var_1 or var_1 + var_2 == var_0:
            return True
        return False
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
92,HumanEval/92,10,normal,"['138', 'HumanEval/92', '121', '123', 'HumanEval/138', '683', '515', 'HumanEval/40', '113', '481']","def any_int(var_0, var_1, var_2):
    if isinstance(var_0, int) and isinstance(var_1, int) and isinstance(var_2, int):
        if var_0 + var_1 == var_2 or var_0 + var_2 == var_1 or var_1 + var_2 == var_0:
            return True
        return False
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,1,normal,['HumanEval/93'],"def encode(message):
    vowels = 'aeiouAEIOU'
    shifted_vowels = {v: chr((ord(v) - 65 + 2) % 26 + 65) if v.isupper() else chr((ord(v) - 97 + 2) % 26 + 97) for v in vowels}
    return ''.join(shifted_vowels.get(c, c).swapcase() for c in message)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,5,normal,"['HumanEval/93', 'HumanEval/50', 'HumanEval/38', 'HumanEval/51', '131']","def encode(message):
    vowels = 'aeiouAEIOU'
    shifted_vowels = {v: chr((ord(v) - 65 + 2) % 26 + 65) if v.isupper() else chr((ord(v) - 97 + 2) % 26 + 97) for v in vowels}
    encoded_message = ''
    for char in message:
        if char.isalpha():
            if char in vowels:
                encoded_message += shifted_vowels[char]
            else:
                encoded_message += char.swapcase()
        else:
            encoded_message += char
    return encoded_message",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
93,HumanEval/93,10,normal,"['HumanEval/93', 'HumanEval/50', 'HumanEval/38', 'HumanEval/51', '131', 'HumanEval/64', '317', 'HumanEval/89', '39', '474']","def encode(message):
    vowels = ""aeiouAEIOU""
    shifted_vowels = {v: chr((ord(v) - 97 + 2) % 26 + 97) for v in vowels}
    shifted_vowels.update({v.upper(): shifted_vowels[v.lower()].upper() for v in vowels})
    
    encoded_message = """"
    for char in message:
        if char in shifted_vowels:
            encoded_message += shifted_vowels[char]
        else:
            encoded_message += char.swapcase()
    
    return encoded_message",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,1,normal,['HumanEval/94'],"def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = 0
    for num in lst:
        if num > max_prime and is_prime(num):
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,5,normal,"['HumanEval/94', '685', '558', '398', 'HumanEval/66']","def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = 0
    for num in lst:
        if num > max_prime and is_prime(num):
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
94,HumanEval/94,10,normal,"['HumanEval/94', '685', '558', '398', 'HumanEval/66', 'HumanEval/59', '805', '32', '148', '566']","def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    max_prime = 0
    for num in lst:
        if num > max_prime and is_prime(num):
            max_prime = num

    return sum(int(digit) for digit in str(max_prime))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,1,normal,['HumanEval/95'],"def check_dict_case(dictionary):
    if not dictionary:
        return False
    
    case_state = None
    for key in dictionary.keys():
        if not isinstance(key, str):
            return False
        if case_state is None:
            case_state = 'lower' if key.islower() else 'upper' if key.isupper() else'mixed'
        elif (case_state == 'lower' and not key.islower()) or (case_state == 'upper' and not key.isupper()):
            return False
    
    return case_state in ['lower', 'upper']",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,5,normal,"['HumanEval/95', '523', '53', '464', '582']","def check_dict_case(dictionary):
    if not dictionary:
        return False
    
    lower_case = upper_case = None
    for key in dictionary.keys():
        if not isinstance(key, str):
            return False
        if lower_case is None and upper_case is None:
            lower_case = key.islower()
            upper_case = key.isupper()
        elif lower_case and not key.islower():
            return False
        elif upper_case and not key.isupper():
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
95,HumanEval/95,10,normal,"['HumanEval/95', '523', '53', '464', '582', '917', '277', '192', '349', '737']","def check_dict_case(dictionary):
    if not dictionary:
        return False
    
    all_upper = all(key.isupper() for key in dictionary.keys())
    all_lower = all(key.islower() for key in dictionary.keys())
    
    return all_upper or all_lower",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,1,normal,['256'],"def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = []
    for i in range(n):
        if is_prime(i):
            primes.append(i)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,5,normal,"['256', '605', 'HumanEval/60', 'HumanEval/96', '685']","def count_up_to(n):
    primes = []
    for num in range(2, n):
        if all(num % i!= 0 for i in range(2, int(num**0.5) + 1)):
            primes.append(num)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
96,HumanEval/96,10,normal,"['256', '605', 'HumanEval/60', 'HumanEval/96', '685', '211', '253', 'HumanEval/82', '66', '623']","def count_up_to(n):
    primes = []
    for num in range(2, n):
        is_prime = True
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(num)
    return primes",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,1,normal,['726'],"def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,5,normal,"['726', '98', '127', 'HumanEval/97', '445']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
97,HumanEval/97,10,normal,"['726', '98', '127', 'HumanEval/97', '445', '919', '745', 'HumanEval/25', '577', '366']","def multiply(a, b):
    return abs(a % 10) * abs(b % 10)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,1,normal,['HumanEval/64'],"def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    vowels = ""AEIOU""
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,5,normal,"['HumanEval/64', '165', '684', 'HumanEval/98', '776']","def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    count = 0
    vowels = ""AEIOU""
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
98,HumanEval/98,10,normal,"['HumanEval/64', '165', '684', 'HumanEval/98', '776', '461', '806', '666', '459', '30']","def count_upper(s):
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in 'AEIOU':
            count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,1,normal,['HumanEval/99'],"def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
    # Convert the string to a float
    num = float(value)
    
    # Check if the number is equidistant from two integers
    if abs(num - round(num)) == 0.5:
        # Round away from zero
        return int(num + (1 if num > 0 else -1))
    else:
        # Return the closest integer
        return round(num)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,5,normal,"['HumanEval/99', '89', 'HumanEval/20', '435', 'HumanEval/136']","def closest_integer(value):
    from math import floor, ceil
    if '.' in value:
        value = value.rstrip('0').rstrip('.') if '.' in value else value
        value = float(value)
        if value % 1 == 0.5:
            value = ceil(value) if value > 0 else floor(value)
        else:
            value = round(value)
    else:
        value = int(value)
    return value",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
99,HumanEval/99,10,normal,"['HumanEval/99', '89', 'HumanEval/20', '435', 'HumanEval/136', '62', '692', '577', 'HumanEval/2', '558']","def closest_integer(value):
    value = float(value)
    if value.is_integer():
        return int(value)
    elif abs(value - round(value)) == 0.5:
        return int(value + (1 if value > 0 else -1))
    else:
        return round(value)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,1,normal,['HumanEval/100'],"def make_a_pile(n):
    stones = [n]
    for i in range(1, n):
        stones.append(stones[-1] + 2)
    return stones",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,5,normal,"['HumanEval/100', '949', 'HumanEval/113', '921', '843']","def make_a_pile(n):
    stones = [n]
    for i in range(1, n):
        stones.append(stones[-1] + 2 * (i % 2))
    return stones",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
100,HumanEval/100,10,normal,"['HumanEval/100', '949', 'HumanEval/113', '921', '843', '536', 'HumanEval/60', '447', 'HumanEval/163', '342']","def make_a_pile(n):
    stones = [n]
    for i in range(1, n):
        stones.append(stones[-1] + 2 * (i % 2))
    return stones",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,1,normal,['HumanEval/143'],"def words_string(s):
    return s.replace(',', '').split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,5,normal,"['HumanEval/143', 'HumanEval/125', 'HumanEval/101', '128', 'HumanEval/117']","def words_string(s):
    return s.replace(',','').split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
101,HumanEval/101,10,normal,"['HumanEval/143', 'HumanEval/125', 'HumanEval/101', '128', 'HumanEval/117', '118', '254', '862', '18', '374']","def words_string(s):
    return s.replace(',','').split()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,1,normal,['41'],"def choose_num(x, y):
    if x > y:
        return -1
    else:
        return y if y % 2 == 0 else y - 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,5,normal,"['41', 'HumanEval/102', '907', '57', '904']","def choose_num(x, y):
    if x > y:
        return -1
    for num in range(y, x - 1, -1):
        if num % 2 == 0:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
102,HumanEval/102,10,normal,"['41', 'HumanEval/102', '907', '57', '904', '122', '221', '184', 'HumanEval/99', 'HumanEval/136']","def choose_num(x, y):
    if x > y:
        return -1
    for num in range(y, x-1, -1):
        if num % 2 == 0:
            return num
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,1,normal,['717'],"def rounded_avg(n, m):
    if n > m:
        return -1
    avg = round((n + m) / 2)
    return bin(avg)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,5,normal,"['717', 'HumanEval/103', '959', '830', '422']","def rounded_avg(n, m):
    if n > m:
        return -1
    avg = (n + m) / 2
    return bin(round(avg))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
103,HumanEval/103,10,normal,"['717', 'HumanEval/103', '959', '830', '422', '615', '664', '375', 'HumanEval/4', '419']","def rounded_avg(n, m):
    if n > m:
        return -1
    avg = (n + m) / 2
    return bin(round(avg))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,1,normal,['HumanEval/104'],"def unique_digits(x):
    return sorted([num for num in x if all(int(digit) % 2!= 0 for digit in str(num))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,5,normal,"['HumanEval/104', '41', 'HumanEval/34', '745', '426']","def unique_digits(x):
    return sorted([i for i in x if not any(int(j) % 2 == 0 for j in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
104,HumanEval/104,10,normal,"['HumanEval/104', '41', 'HumanEval/34', '745', '426', '845', '572', '749', '623', 'HumanEval/131']","def unique_digits(x):
    return sorted([i for i in x if not any(int(c) % 2 == 0 for c in str(i))])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,1,normal,['HumanEval/88'],"def by_length(arr):
    # Filter the array to include only integers between 1 and 9
    filtered_arr = [num for num in arr if 1 <= num <= 9]
    
    # Sort the filtered array in ascending order
    sorted_arr = sorted(filtered_arr)
    
    # Reverse the sorted array
    reversed_arr = sorted_arr[::-1]
    
    # Map each digit to its corresponding name
    digit_names = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    named_arr = [digit_names[num] for num in reversed_arr]
    
    return named_arr",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,5,normal,"['HumanEval/88', 'HumanEval/116', 'HumanEval/105', 'HumanEval/19', 'HumanEval/104']","def by_length(arr):
    var_1 = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    var_2 = sorted([x for x in arr if 1 <= x <= 9], reverse=True)
    var_3 = []
    for x in var_2:
        var_3.append(var_1[x])
    return var_3",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
105,HumanEval/105,10,normal,"['HumanEval/88', 'HumanEval/116', 'HumanEval/105', 'HumanEval/19', 'HumanEval/104', '749', '644', '229', '122', 'HumanEval/145']","def by_length(arr):
    var_1 = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}
    var_2 = sorted([i for i in arr if 1 <= i <= 9], reverse=True)
    var_3 = []
    for var_4 in var_2:
        try:
            var_3.append(var_1[var_4])
        except:
            pass
    return var_3",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,1,normal,['HumanEval/25'],"def f(n: int) -> List[int]:
    def factorial(num: int) -> int:
        if num == 0:
            return 1
        else:
            return num * factorial(num - 1)

    def sum_to_n(num: int) -> int:
        return num * (num + 1) // 2

    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(factorial(i))
        else:
            result.append(sum_to_n(i))
    return result",0.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': False, 'result': ""failed: name 'List' is not defined"", 'completion_id': 0})]})"
106,HumanEval/106,5,normal,"['HumanEval/25', '483', '577', '905', 'HumanEval/139']","def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(factorial(i))
        else:
            result.append(sum_of_square(i))
    return result

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def sum_of_square(n):
    return sum(i**2 for i in range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
106,HumanEval/106,10,normal,"['HumanEval/25', '483', '577', '905', 'HumanEval/139', '873', 'HumanEval/60', '41', '445', '21']","def f(n):
    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(factorial(i))
        else:
            result.append(sum_of_square(i))
    return result

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

def sum_of_square(n):
    return sum(i**2 for i in range(1, n + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,1,normal,['485'],"def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,5,normal,"['485', 'HumanEval/48', 'HumanEval/10', 'HumanEval/107', '387']","def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n + 1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
107,HumanEval/107,10,normal,"['485', 'HumanEval/48', 'HumanEval/10', 'HumanEval/107', '387', '909', '864', 'HumanEval/155', '100', '594']","def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,1,normal,['365'],"def count_nums(arr):
    count = 0
    for num in arr:
        if num > 0:
            count += 1
        else:
            digits_sum = sum(int(digit) for digit in str(num)[1:]) - int(str(num)[1])
            if digits_sum > 0:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,5,normal,"['365', '256', 'HumanEval/108', '398', '133']","def count_nums(arr):
    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
108,HumanEval/108,10,normal,"['365', '256', 'HumanEval/108', '398', '133', 'HumanEval/113', '543', '253', '566', '558']","def count_nums(arr):
    def sum_of_digits(n):
        if n < 0:
            n = -n
        return sum(int(digit) for digit in str(n))

    return sum(1 for num in arr if sum_of_digits(num) > 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,1,normal,['HumanEval/88'],"def move_one_ball(arr):
    if not arr:
        return True
    
    for i in range(len(arr)):
        if arr == sorted(arr):
            return True
        arr.insert(0, arr.pop())
    
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,5,normal,"['HumanEval/88', 'HumanEval/116', '378', 'HumanEval/109', 'HumanEval/57']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
109,HumanEval/109,10,normal,"['HumanEval/88', 'HumanEval/116', '378', 'HumanEval/109', 'HumanEval/57', '370', 'HumanEval/70', '644', '229', '433']","def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr[i:] + arr[:i] == sorted_arr:
            return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,1,normal,['257'],"def exchange(lst1, lst2):
    odd_in_lst1 = sum(1 for x in lst1 if x % 2!= 0)
    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)
    return ""YES"" if even_in_lst2 >= odd_in_lst1 else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,5,normal,"['257', 'HumanEval/110', '625', '591', '648']","def exchange(lst1, lst2):
    odd_count_lst1 = sum(1 for num in lst1 if num % 2!= 0)
    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count_lst2 >= odd_count_lst1 else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
110,HumanEval/110,10,normal,"['257', 'HumanEval/110', '625', '591', '648', '298', 'HumanEval/5', '699', '595', '578']","def exchange(lst1, lst2):
    odd_count_lst1 = sum(1 for num in lst1 if num % 2!= 0)
    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)
    return ""YES"" if even_count_lst2 >= odd_count_lst1 else ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,1,normal,['HumanEval/111'],"def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
    if not test:
        return {}
    
    words = test.split()
    counts = {}
    max_count = 0
    
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
        
        if counts[word] > max_count:
            max_count = counts[word]
    
    return {word: count for word, count in counts.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,5,normal,"['HumanEval/111', '217', '326', '332', '602']","def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
    if not test:
        return {}
    
    words = test.split()
    counts = {}
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    
    max_count = max(counts.values())
    return {word: count for word, count in counts.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
111,HumanEval/111,10,normal,"['HumanEval/111', '217', '326', '332', '602', '107', '172', '130', '237', '829']","def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
    if not test:
        return {}
    words = test.split()
    counts = {}
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    max_count = max(counts.values())
    return {word: count for word, count in counts.items() if count == max_count}",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,1,normal,['864'],"def reverse_delete(s, c):
    result = ''.join([char for char in s if char not in c])
    return (result, result == result[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,5,normal,"['864', '456', '909', '604', 'HumanEval/112']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
112,HumanEval/112,10,normal,"['864', '456', '909', '604', 'HumanEval/112', 'HumanEval/48', 'HumanEval/10', '131', '364', 'HumanEval/107']","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,1,normal,['238'],"def odd_count(lst):
    result = []
    for s in lst:
        odd_count = sum(1 for c in s if int(c) % 2 == 1)
        result.append(f""the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput."")
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,5,normal,"['238', 'HumanEval/113', 'HumanEval/155', '226', '258']","def odd_count(lst):
    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(sum(int(c) % 2 for c in s), sum(int(c) % 2 for c in s), sum(int(c) % 2 for c in s), sum(int(c) % 2 for c in s)) for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
113,HumanEval/113,10,normal,"['238', 'HumanEval/113', 'HumanEval/155', '226', '258', '18', '109', '78', '426', '61']","def odd_count(lst):
    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(sum(int(c) % 2 for c in s), sum(int(c) % 2 for c in s), sum(int(c) % 2 for c in s), sum(int(c) % 2 for c in s)) for s in lst]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,1,normal,['511'],"def minSubArraySum(nums):
    if not nums:
        return 0
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,5,normal,"['511', 'HumanEval/114', '836', '656', '559']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum += num
        if current_sum < min_sum:
            min_sum = current_sum
        if current_sum > 0:
            current_sum = 0
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
114,HumanEval/114,10,normal,"['511', 'HumanEval/114', '836', '656', '559', '340', '974', '734', '286', '514']","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum += num
        if current_sum < min_sum:
            min_sum = current_sum
        if current_sum > 0:
            current_sum = 0
    return min_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,1,normal,['314'],"def max_fill(grid, capacity):
    import math
    rows = len(grid)
    cols = len(grid[0])
    total_water = sum(sum(row) for row in grid)
    bucket_count = math.ceil(total_water / capacity)
    return bucket_count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,5,normal,"['314', '318', '303', 'HumanEval/115', '911']","def max_fill(grid, capacity):
    return sum([(row.count(1) + capacity - 1) // capacity for row in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
115,HumanEval/115,10,normal,"['314', '318', '303', 'HumanEval/115', '911', '463', 'HumanEval/114', '423', '259', '836']","def max_fill(grid, capacity):
    return sum([math.ceil(sum(arr) / capacity) for arr in grid])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,1,normal,['HumanEval/116'],"def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,5,normal,"['HumanEval/116', 'HumanEval/88', '229', '940', '635']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
116,HumanEval/116,10,normal,"['HumanEval/116', 'HumanEval/88', '229', '940', '635', '333', '749', 'HumanEval/19', 'HumanEval/37', '705']","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,1,normal,['862'],"import re
from collections import Counter

def select_words(s, n):
    words = re.findall(r'\b\w+\b', s)
    consonants = 'bcdfghjklmnpqrstvwxyz'
    result = []
    
    for word in words:
        if sum(1 for char in word.lower() if char in consonants) == n:
            result.append(word)
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,5,normal,"['862', 'HumanEval/143', 'HumanEval/117', 'HumanEval/125', 'HumanEval/101']","def select_words(s, n):
    vowels = 'aeiouAEIOU'
    words = s.split()
    result = []
    
    for word in words:
        consonant_count = sum(1 for char in word if char not in vowels)
        if consonant_count == n:
            result.append(word)
    
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
117,HumanEval/117,10,normal,"['862', 'HumanEval/143', 'HumanEval/117', 'HumanEval/125', 'HumanEval/101', '537', '128', '604', '254', 'HumanEval/15']","def select_words(s, n):
    vowels = 'aeiouAEIOU'
    words = s.split()
    result = []
    for word in words:
        consonant_count = sum(1 for char in word if char not in vowels)
        if consonant_count == n:
            result.append(word)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,1,normal,['HumanEval/64'],"def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,5,normal,"['HumanEval/64', 'HumanEval/118', 'HumanEval/51', '131', '776']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
118,HumanEval/118,10,normal,"['HumanEval/64', 'HumanEval/118', 'HumanEval/51', '131', '776', 'HumanEval/134', 'HumanEval/117', '643', '868', '83']","def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """"",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,1,normal,['HumanEval/119'],"def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,5,normal,"['HumanEval/119', '178', 'HumanEval/56', 'HumanEval/61', '186']","def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            else:
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    first_combination = lst[0] + lst[1]
    second_combination = lst[1] + lst[0]

    if is_balanced(first_combination) or is_balanced(second_combination):
        return 'Yes'
    else:
        return 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
119,HumanEval/119,10,normal,"['HumanEval/119', '178', 'HumanEval/56', 'HumanEval/61', '186', 'HumanEval/6', '53', '30', '338', '482']","def match_parens(lst):
    def is_balanced(s):
        balance = 0
        for char in s:
            if char == '(':
                balance += 1
            elif char == ')':
                balance -= 1
            if balance < 0:
                return False
        return balance == 0

    first_combination = lst[0] + lst[1]
    second_combination = lst[1] + lst[0]
    return 'Yes' if is_balanced(first_combination) or is_balanced(second_combination) else 'No'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,1,normal,['57'],"def maximum(arr, k):
    arr.sort(reverse=True)
    return arr[:k]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,5,normal,"['57', '836', 'HumanEval/158', '463', 'HumanEval/120']","def maximum(arr, k):
    arr.sort(reverse=True)
    return arr[:k]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
120,HumanEval/120,10,normal,"['57', '836', 'HumanEval/158', '463', 'HumanEval/120', '559', 'HumanEval/136', '911', '259', '122']","def maximum(arr, k):
    arr.sort(reverse=True)
    return arr[:k]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,1,normal,['881'],"def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,5,normal,"['881', 'HumanEval/113', '797', '770', '549']","def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
121,HumanEval/121,10,normal,"['881', 'HumanEval/113', '797', '770', '549', '775', '790', '784', '782', '853']","def solution(lst):
    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,1,normal,['514'],"def add_elements(arr, k):
    return sum(num for num in arr[:k] if 0 < num < 100)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,5,normal,"['514', '363', '398', '123', 'HumanEval/122']","def add_elements(arr, k):
    return sum(x for x in arr[:k] if 0 < x < 100)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
122,HumanEval/122,10,normal,"['514', '363', '398', '123', 'HumanEval/122', 'HumanEval/85', '148', '566', '675', '559']","def add_elements(arr, k):
    return sum(x for x in arr[:k] if 0 < x < 100)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,1,normal,['HumanEval/123'],"def get_odd_collatz(n):
    odd_numbers = []
    while n!= 1:
        if n % 2 == 1:
            odd_numbers.append(n)
        n = 3 * n + 1 if n % 2 else n // 2
    odd_numbers.append(1)  # Add 1 to the list as per the problem statement
    return sorted(odd_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,5,normal,"['HumanEval/123', '556', '406', 'HumanEval/113', '775']","def get_odd_collatz(n):
    odd_numbers = []
    while n!= 1:
        if n % 2 == 1:
            odd_numbers.append(n)
        n = 3 * n + 1 if n % 2 else n // 2
    odd_numbers.append(1)  # Add 1 to the list as per the problem statement
    return sorted(odd_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
123,HumanEval/123,10,normal,"['HumanEval/123', '556', '406', 'HumanEval/113', '775', '426', '258', 'HumanEval/155', '784', '274']","def get_odd_collatz(n):
    odd_numbers = []
    while n!= 1:
        if n % 2 == 1:
            odd_numbers.append(n)
        n = 3 * n + 1 if n % 2 else n // 2
    odd_numbers.append(1)  # Add 1 to the list as it's always the last odd number in the sequence
    return sorted(odd_numbers)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,1,normal,['910'],"from datetime import datetime

def valid_date(date):
    try:
        month, day, year = map(int, date.split('-'))
        datetime(year, month, day)
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,5,normal,"['910', 'HumanEval/124', '336', '191', '866']","import datetime

def valid_date(date):
    try:
        date = date.strip()
        month, day, year = map(int, date.split('-'))
        if month < 1 or month > 12:
            return False
        if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:
            return False
        if month in [4, 6, 9, 11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
        datetime.date(year, month, day)
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
124,HumanEval/124,10,normal,"['910', 'HumanEval/124', '336', '191', '866', '455', '403', '762', '820', '906']","import re
from datetime import datetime

def valid_date(date):
    if not date:
        return False
    try:
        month, day, year = map(int, date.split('-'))
        if month < 1 or month > 12:
            return False
        if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):
            return False
        if month in [4, 6, 9, 11] and (day < 1 or day > 30):
            return False
        if month == 2 and (day < 1 or day > 29):
            return False
        datetime(year, month, day)
        return True
    except ValueError:
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,1,normal,['HumanEval/125'],"def split_words(txt):
    if'' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.replace(',','').split()
    else:
        return len([char for char in txt if char.islower() and ord(char) % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,5,normal,"['HumanEval/125', 'HumanEval/143', '128', 'HumanEval/101', 'HumanEval/117']","def split_words(txt):
    if'' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.replace(',','').split()
    else:
        return len([c for c in txt if c.islower() and ord(c) % 2 == 1])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
125,HumanEval/125,10,normal,"['HumanEval/125', 'HumanEval/143', '128', 'HumanEval/101', 'HumanEval/117', '956', '79', '964', '748', '15']","def split_words(txt):
    if'' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.replace(',','').split()
    else:
        return len([i for i in txt if i.islower() and ord(i) % 2 == 0])",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,1,normal,['HumanEval/19'],"def is_sorted(lst):
    if len(lst) > 1:
        for i in range(len(lst) - 1):
            if lst[i] > lst[i + 1]:
                return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,5,normal,"['HumanEval/19', '472', 'HumanEval/57', 'HumanEval/126', '567']","def is_sorted(lst):
    if len(lst) <= 1:
        return True
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
126,HumanEval/126,10,normal,"['HumanEval/19', '472', 'HumanEval/57', 'HumanEval/126', '567', '889', 'HumanEval/70', '104', '705', '569']","def is_sorted(lst):
    if len(lst) > 1:
        for i in range(len(lst) - 1):
            if lst[i] > lst[i + 1]:
                return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,1,normal,['HumanEval/127'],"def intersection(interval1, interval2):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    intersection_length = end - start

    if intersection_length > 0 and is_prime(intersection_length):
        return ""YES""
    else:
        return ""NO""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,5,normal,"['HumanEval/127', '473', 'HumanEval/82', '605', '249']","def intersection(interval1, interval2):
    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
127,HumanEval/127,10,normal,"['HumanEval/127', '473', 'HumanEval/82', '605', '249', 'HumanEval/31', '298', 'HumanEval/39', '256', '685']","def intersection(interval1, interval2):
    start = max(interval1[0], interval2[0])
    end = min(interval1[1], interval2[1])
    length = end - start
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,1,normal,['HumanEval/8'],"def prod_signs(arr):
    if not arr:
        return None
    product_of_signs = 1
    sum_of_magnitudes = 0
    for num in arr:
        if num > 0:
            product_of_signs *= 1
        elif num < 0:
            product_of_signs *= -1
        else:
            product_of_signs *= 0
            sum_of_magnitudes = 0
            break
        sum_of_magnitudes += abs(num)
    return sum_of_magnitudes * product_of_signs",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,5,normal,"['HumanEval/8', 'HumanEval/128', '734', '922', '463']","def prod_signs(arr):
    if not arr:
        return None
    sign_product = (-1) ** sum(1 for num in arr if num < 0)
    magnitude_sum = sum(abs(num) for num in arr)
    return sign_product * magnitude_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
128,HumanEval/128,10,normal,"['HumanEval/8', 'HumanEval/128', '734', '922', '463', '415', '911', '188', '366', '123']","def prod_signs(arr):
    if not arr:
        return None
    sign_product = (-1) ** sum(1 for num in arr if num < 0)
    magnitude_sum = sum(abs(num) for num in arr)
    return sign_product * magnitude_sum",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,1,normal,['974'],"def minPath(grid, k):
    N = len(grid)
    dp = [[[float('inf')] * N for _ in range(N)] for _ in range(k + 1)]
    for i in range(N):
        for j in range(N):
            dp[1][i][j] = grid[i][j]
    for l in range(2, k + 1):
        for i in range(N):
            for j in range(N):
                for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:
                    if 0 <= x < N and 0 <= y < N:
                        dp[l][i][j] = min(dp[l][i][j], dp[l - 1][x][y] + grid[i][j])
    min_val = min(min(row) for row in dp[k])
    for i in range(N):
        for j in range(N):
            if dp[k][i][j] == min_val:
                return [grid[i][j]] + minPath(grid[:i] + grid[i + 1:], k - 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,5,normal,"['974', 'HumanEval/129', '753', '721', '94']","def minPath(grid, k):
    N = len(grid)
    dp = [[[float('inf')] * N for _ in range(N)] for _ in range(k + 1)]
    for i in range(N):
        for j in range(N):
            dp[1][i][j] = grid[i][j]
    for l in range(2, k + 1):
        for i in range(N):
            for j in range(N):
                for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:
                    if 0 <= x < N and 0 <= y < N:
                        dp[l][i][j] = min(dp[l][i][j], dp[l - 1][x][y] + grid[i][j])
    return [min(dp[k][i][j] for i in range(N) for j in range(N)) for _ in range(k)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
129,HumanEval/129,10,normal,"['974', 'HumanEval/129', '753', '721', '94', '50', '408', '322', '95', 'HumanEval/136']","from heapq import heappush, heappop

def minPath(grid, k):
    n = len(grid)
    visited = [[False] * n for _ in range(n)]
    heap = [(grid[0][0], 0, 0)]
    while heap:
        value, x, y = heappop(heap)
        if visited[x][y]:
            continue
        visited[x][y] = True
        if k == 1:
            return [value]
        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:
                heappush(heap, (grid[nx][ny], nx, ny))
    return []",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,1,normal,['873'],"def tri(n):
    if n == 0:
        return [3]
    elif n == 1:
        return [3, 1]
    else:
        sequence = [3, 1]
        for i in range(2, n + 1):
            if i % 2 == 0:
                sequence.append(1 + i / 2)
            else:
                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])
        return sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,5,normal,"['873', 'HumanEval/130', '239', '926', '84']","def tri(n):
    if n == 0:
        return [1]
    sequence = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            sequence.append(i / 2 + 1)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + (i + 3) / 2)
    return sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
130,HumanEval/130,10,normal,"['873', 'HumanEval/130', '239', '926', '84', 'HumanEval/46', 'HumanEval/39', '623', 'HumanEval/55', '274']","def tri(n):
    if n == 0:
        return [1]
    sequence = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            sequence.append(i / 2 + 1)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + (i + 3) / 2)
    return sequence",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,1,normal,['479'],"def digits(n):
    product = 1
    has_odd = False
    while n > 0:
        digit = n % 10
        if digit % 2 == 1:
            product *= digit
            has_odd = True
        n //= 10
    return product if has_odd else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,5,normal,"['479', '745', '845', '577', 'HumanEval/131']","def digits(n):
    product = 1
    has_odd = False
    for digit in str(n):
        if int(digit) % 2 == 1:
            product *= int(digit)
            has_odd = True
    return product if has_odd else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
131,HumanEval/131,10,normal,"['479', '745', '845', '577', 'HumanEval/131', '365', 'HumanEval/66', '657', '36', '398']","def digits(n):
    product = 1
    has_odd = False
    for digit in str(n):
        if int(digit) % 2 == 1:
            product *= int(digit)
            has_odd = True
    return product if has_odd else 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,1,normal,['HumanEval/132'],"def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
        else:
            return False
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,5,normal,"['HumanEval/132', '823', '91', 'HumanEval/56', 'HumanEval/61']","def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
        else:
            return False
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
132,HumanEval/132,10,normal,"['HumanEval/132', '823', '91', 'HumanEval/56', 'HumanEval/61', '175', '192', '771', '576', 'HumanEval/6']","def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
        else:
            return False
    return len(stack) > 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,1,normal,['267'],"import math

def sum_squares(lst):
    return sum(math.ceil(i)**2 for i in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,5,normal,"['267', 'HumanEval/142', 'HumanEval/133', '683', '287']","def sum_squares(lst):
    return sum(int(x**2) for x in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
133,HumanEval/133,10,normal,"['267', 'HumanEval/142', 'HumanEval/133', '683', '287', '420', '837', '905', '514', '419']","def sum_squares(lst):
    return sum(int(x**2) for x in lst)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,1,normal,['192'],"def check_if_last_char_is_a_letter(txt):
    if not txt or not txt[-1].isalpha():
        return False
    return txt[-2].isspace() if len(txt) > 1 else True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,5,normal,"['192', '352', 'HumanEval/134', '523', '396']","def check_if_last_char_is_a_letter(txt):
    if not txt or not txt[-1].isalpha():
        return False
    return txt[-2].isspace() if len(txt) > 1 else True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
134,HumanEval/134,10,normal,"['192', '352', 'HumanEval/134', '523', '396', '210', '860', '546', '182', '134']","def check_if_last_char_is_a_letter(txt):
    if not txt or not txt[-1].isalpha():
        return False
    return txt[-2].isspace() if len(txt) > 1 else True",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,1,normal,['HumanEval/88'],"def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i - 1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,5,normal,"['HumanEval/88', 'HumanEval/116', '433', '229', 'HumanEval/135']","def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i - 1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
135,HumanEval/135,10,normal,"['HumanEval/88', 'HumanEval/116', '433', '229', 'HumanEval/135', '472', 'HumanEval/158', '407', '381', '200']","def can_arrange(arr):
    for i in range(len(arr) - 1, 0, -1):
        if arr[i] < arr[i - 1]:
            return i - 1
    return -1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,1,normal,['HumanEval/136'],"def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,5,normal,"['HumanEval/136', '62', '408', 'HumanEval/90', '755']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
136,HumanEval/136,10,normal,"['HumanEval/136', '62', '408', 'HumanEval/90', '755', '496', 'HumanEval/12', 'HumanEval/22', 'HumanEval/163', 'HumanEval/24']","def largest_smallest_integers(lst):
    negatives = [x for x in lst if x < 0]
    positives = [x for x in lst if x > 0]
    return (max(negatives) if negatives else None, min(positives) if positives else None)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,1,normal,['HumanEval/152'],"def compare_one(a, b):
    if isinstance(a, str):
        a = a.replace(',', '.')
        a = float(a)
    if isinstance(b, str):
        b = b.replace(',', '.')
        b = float(b)
    if a == b:
        return None
    elif a > b:
        return a
    else:
        return b",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,5,normal,"['HumanEval/152', 'HumanEval/102', '433', 'HumanEval/137', '177']","def compare_one(var_0, var_1):
    if isinstance(var_0, str):
        var_0 = var_0.replace(',', '.')
    if isinstance(var_1, str):
        var_1 = var_1.replace(',', '.')
    if float(var_0) == float(var_1):
        return None
    return var_0 if float(var_0) > float(var_1) else var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
137,HumanEval/137,10,normal,"['HumanEval/152', 'HumanEval/102', '433', 'HumanEval/137', '177', '970', '695', '292', '555', '924']","def compare_one(var_0, var_1):
    if isinstance(var_0, str):
        var_0 = float(var_0.replace(',', '.'))
    if isinstance(var_1, str):
        var_1 = float(var_1.replace(',', '.'))
    if var_0 == var_1:
        return None
    return var_0 if var_0 > var_1 else var_1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,1,normal,['271'],"def is_equal_to_sum_even(n):
    return n % 2 == 0 and n >= 8",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,5,normal,"['271', '274', 'HumanEval/138', '123', '600']","def is_equal_to_sum_even(n):
    return n % 2 == 0 and n >= 8",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
138,HumanEval/138,10,normal,"['271', '274', 'HumanEval/138', '123', '600', '904', '634', '881', '138', '962']","def is_equal_to_sum_even(n):
    return n % 2 == 0 and n >= 8",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,1,normal,['483'],"def special_factorial(n):
    factorial = 1
    result = 1
    for i in range(1, n + 1):
        factorial *= i
        result *= factorial
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,5,normal,"['483', '32', '905', '577', 'HumanEval/139']","def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
139,HumanEval/139,10,normal,"['483', '32', '905', '577', 'HumanEval/139', '873', '745', '926', '583', 'HumanEval/39']","def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        factorial = 1
        for j in range(1, i + 1):
            factorial *= j
        result *= factorial
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,1,normal,['631'],"def fix_spaces(text):
    result = []
    space_count = 0
    for char in text:
        if char =='':
            space_count += 1
        else:
            if space_count > 2:
                result.append('-')
            elif space_count > 0:
                result.extend(['_'] * space_count)
            result.append(char)
            space_count = 0
    if space_count > 2:
        result.append('-')
    elif space_count > 0:
        result.extend(['_'] * space_count)
    return ''.join(result)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,5,normal,"['631', '892', '678', '693', 'HumanEval/140']","def fix_spaces(text):
    return re.sub(' +', '-', re.sub(' +', '_', text))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
140,HumanEval/140,10,normal,"['631', '892', '678', '693', 'HumanEval/140', '628', '800', '542', '451', '748']","def fix_spaces(text):
    return re.sub(' {2,}', '-', re.sub(' ', '_', text))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,1,normal,['HumanEval/141'],"def file_name_check(file_name):
    valid_extensions = ['txt', 'exe', 'dll']
    parts = file_name.split('.')
    
    # Check if there is exactly one dot in the file name
    if len(parts)!= 2:
        return 'No'
    
    # Check if the extension is valid
    if parts[1] not in valid_extensions:
        return 'No'
    
    # Check if the name part is not empty and starts with a letter
    if not parts[0] or not parts[0][0].isalpha():
        return 'No'
    
    # Check if there are more than three digits in the name part
    digit_count = sum(c.isdigit() for c in parts[0])
    if digit_count > 3:
        return 'No'
    
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,5,normal,"['HumanEval/141', '523', '823', '396', '737']","def file_name_check(file_name):
    valid_extensions = ['txt', 'exe', 'dll']
    parts = file_name.split('.')
    
    # Check if there is exactly one dot in the file name
    if len(parts)!= 2:
        return 'No'
    
    # Check if the file extension is valid
    if parts[1] not in valid_extensions:
        return 'No'
    
    # Check if the file name starts with a letter
    if not parts[0][0].isalpha():
        return 'No'
    
    # Check if there are more than three digits in the file name
    digit_count = sum(c.isdigit() for c in parts[0])
    if digit_count > 3:
        return 'No'
    
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
141,HumanEval/141,10,normal,"['HumanEval/141', '523', '823', '396', '737', '175', '403', '822', '860', '192']","def file_name_check(file_name):
    valid_extensions = ['txt', 'exe', 'dll']
    parts = file_name.split('.')
    
    if len(parts)!= 2:
        return 'No'
    
    if parts[1] not in valid_extensions:
        return 'No'
    
    if not parts[0] or not parts[0][0].isalpha():
        return 'No'
    
    digit_count = sum(c.isdigit() for c in parts[0])
    
    if digit_count > 3:
        return 'No'
    
    return 'Yes'",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,1,normal,['267'],"def sum_squares(lst):
    return sum(x**3 if i % 4 == 0 else x**2 for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,5,normal,"['267', 'HumanEval/142', '837', 'HumanEval/133', '287']","def sum_squares(lst):
    total = 0
    for i, num in enumerate(lst):
        if i % 3 == 0:
            total += num ** 2
        elif i % 4 == 0 and i % 3!= 0:
            total += num ** 3
        else:
            total += num
    return total",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
142,HumanEval/142,10,normal,"['267', 'HumanEval/142', '837', 'HumanEval/133', '287', '420', '683', '905', '340', '170']","def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,1,normal,['HumanEval/143'],"def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    prime_length_words = [word for word in words if is_prime(len(word))]
    return''.join(prime_length_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,5,normal,"['HumanEval/143', 'HumanEval/125', '128', 'HumanEval/101', 'HumanEval/117']","def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    prime_length_words = [word for word in words if is_prime(len(word))]
    return''.join(prime_length_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
143,HumanEval/143,10,normal,"['HumanEval/143', 'HumanEval/125', '128', 'HumanEval/101', 'HumanEval/117', '964', '254', '79', '862', '570']","def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    prime_length_words = [word for word in words if is_prime(len(word))]
    return''.join(prime_length_words)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,1,normal,['HumanEval/25'],"def simplify(x, n):
    num_x, den_x = map(int, x.split('/'))
    num_n, den_n = map(int, n.split('/'))
    
    # Find the greatest common divisor of the numerators and denominators
    gcd_num = gcd(num_x, num_n)
    gcd_den = gcd(den_x, den_n)
    
    # Divide both numerators and denominators by the gcd
    num_x //= gcd_num
    den_x //= gcd_num
    num_n //= gcd_den
    den_n //= gcd_den
    
    # If the resulting denominators are 1, the product is a whole number
    return den_x == 1 and den_n == 1",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,5,normal,"['HumanEval/25', '749', 'HumanEval/144', '900', '123']","def simplify(x, n):
    x_numerator, x_denominator = map(int, x.split('/'))
    n_numerator, n_denominator = map(int, n.split('/'))
    
    # Simplify the fractions
    x_common_divisor = gcd(x_numerator, x_denominator)
    n_common_divisor = gcd(n_numerator, n_denominator)
    
    x_numerator //= x_common_divisor
    x_denominator //= x_common_divisor
    
    n_numerator //= n_common_divisor
    n_denominator //= n_common_divisor
    
    # Multiply the simplified fractions
    result_numerator = x_numerator * n_numerator
    result_denominator = x_denominator * n_denominator
    
    # Check if the result is a whole number
    return result_numerator % result_denominator == 0",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
144,HumanEval/144,10,normal,"['HumanEval/25', '749', 'HumanEval/144', '900', '123', '913', '621', '577', '623', '41']","def simplify(var_0, var_1):
    var_2, var_3 = var_0.split('/')
    var_4, var_5 = var_1.split('/')
    var_6 = int(var_2) * int(var_4)
    var_7 = int(var_3) * int(var_5)
    if var_6 / var_7 == int(var_6 / var_7):
        return True
    return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,1,normal,['HumanEval/145'],"def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,5,normal,"['HumanEval/145', '749', 'HumanEval/19', '705', 'HumanEval/149']","def order_by_points(nums):
    def sum_of_digits(n):
        return sum(int(digit) for digit in str(abs(n)))
    return sorted(nums, key=lambda x: (sum_of_digits(x), nums.index(x)))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
145,HumanEval/145,10,normal,"['HumanEval/145', '749', 'HumanEval/19', '705', 'HumanEval/149', '104', 'HumanEval/116', '569', '516', '37']","def order_by_points(nums):
    def digits_sum(n):
        return sum(int(digit) for digit in str(abs(n)))
    return sorted(nums, key=digits_sum)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,1,normal,['41'],"def specialFilter(nums):
    def is_odd_and_greater_than_10(num):
        num_str = str(abs(num))
        return num > 10 and int(num_str[0]) % 2 == 1 and int(num_str[-1]) % 2 == 1
    
    return sum(is_odd_and_greater_than_10(num) for num in nums)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,5,normal,"['41', 'HumanEval/146', '817', '426', '883']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            str_num = str(num)
            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
146,HumanEval/146,10,normal,"['41', 'HumanEval/146', '817', '426', '883', '433', '258', '184', '623', '692']","def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            str_num = str(num)
            if int(str_num[0]) % 2 == 1 and int(str_num[-1]) % 2 == 1:
                count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,1,normal,['HumanEval/147'],"def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,5,normal,"['HumanEval/147', '916', '121', '611', '21']","def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
147,HumanEval/147,10,normal,"['HumanEval/147', '916', '121', '611', '21', '415', '120', '672', '747', '661']","def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,1,normal,['HumanEval/148'],"def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    index1, index2 = planets.index(planet1), planets.index(planet2)
    if index1 < index2:
        return planets[index1 + 1:index2]
    else:
        return planets[index2 + 1:index1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,5,normal,"['HumanEval/148', '873', 'HumanEval/63', '119', '492']","def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    index1, index2 = planets.index(planet1), planets.index(planet2)
    if index1 < index2:
        return planets[index1 + 1:index2]
    else:
        return planets[index2 + 1:index1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
148,HumanEval/148,10,normal,"['HumanEval/148', '873', 'HumanEval/63', '119', '492', '846', '292', '502', '579', '150']","def bf(planet1, planet2):
    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')
    if planet1 not in planets or planet2 not in planets or planet1 == planet2:
        return ()
    index1, index2 = planets.index(planet1), planets.index(planet2)
    if index1 < index2:
        return planets[index1 + 1:index2]
    else:
        return planets[index2 + 1:index1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,1,normal,['HumanEval/149'],"def sorted_list_sum(lst):
    # Filter out strings with odd lengths
    even_length_strings = [s for s in lst if len(s) % 2 == 0]
    
    # Sort the list by length, then alphabetically
    even_length_strings.sort(key=lambda x: (len(x), x))
    
    return even_length_strings",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,5,normal,"['HumanEval/149', '37', '877', '749', '108']","def sorted_list_sum(lst):
    lst.sort(key=len)
    lst.sort()
    return [word for word in lst if len(word) % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
149,HumanEval/149,10,normal,"['HumanEval/149', '37', '877', '749', '108', '65', '705', '104', '889', '569']","def sorted_list_sum(lst):
    lst.sort(key=len)
    lst.sort()
    return [word for word in lst if len(word) % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,1,normal,['605'],"def x_or_y(n, x, y):
    if n > 1:
        for i in range(2, n):
            if (n % i) == 0:
                return y
        else:
            return x
    else:
        return y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,5,normal,"['605', 'HumanEval/82', 'HumanEval/31', '260', 'HumanEval/150']","def x_or_y(n, x, y):
    if n > 1:
        for i in range(2, n):
            if (n % i) == 0:
                return y
                break
        else:
            return x
    else:
        return y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
150,HumanEval/150,10,normal,"['605', 'HumanEval/82', 'HumanEval/31', '260', 'HumanEval/150', '256', 'HumanEval/39', 'HumanEval/75', 'HumanEval/127', 'HumanEval/11']","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,1,normal,['555'],"def double_the_difference(lst):
    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,5,normal,"['555', 'HumanEval/151', '320', '72', '594']","def double_the_difference(lst):
    return sum(i**2 for i in lst if i > 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
151,HumanEval/151,10,normal,"['555', 'HumanEval/151', '320', '72', '594', '344', 'HumanEval/133', '770', '549', '881']","def double_the_difference(lst):
    return sum(i**2 for i in lst if i > 0 and i % 2!= 0)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,1,normal,['433'],"def compare(game,guess):
    return [abs(a-b) for a,b in zip(game,guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,5,normal,"['433', 'HumanEval/152', '53', '695', '636']","def compare(game,guess):
    return [abs(x - y) for x, y in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
152,HumanEval/152,10,normal,"['433', 'HumanEval/152', '53', '695', '636', 'HumanEval/74', '840', 'HumanEval/137', '359', '285']","def compare(game,guess):
    return [abs(x - y) for x, y in zip(game, guess)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,1,normal,['HumanEval/153'],"def Strongest_Extension(class_name, extensions):
    strongest_extension = extensions[0]
    strength = sum(1 for c in strongest_extension if c.isupper()) - sum(1 for c in strongest_extension if c.islower())
    for extension in extensions:
        current_strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())
        if current_strength > strength:
            strongest_extension = extension
            strength = current_strength
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,5,normal,"['HumanEval/153', '393', 'HumanEval/12', '806', '220']","def Strongest_Extension(class_name, extensions):
    strongest_extension = extensions[0]
    max_strength = len([char for char in strongest_extension if char.isupper()]) - len([char for char in strongest_extension if char.islower()])
    
    for extension in extensions[1:]:
        current_strength = len([char for char in extension if char.isupper()]) - len([char for char in extension if char.islower()])
        if current_strength > max_strength:
            strongest_extension = extension
            max_strength = current_strength
    
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
153,HumanEval/153,10,normal,"['HumanEval/153', '393', 'HumanEval/12', '806', '220', '832', '207', 'HumanEval/14', '937', '315']","def Strongest_Extension(class_name, extensions):
    max_strength = float('-inf')
    strongest_extension = ''
    for extension in extensions:
        upper_count = sum(1 for c in extension if c.isupper())
        lower_count = sum(1 for c in extension if c.islower())
        strength = upper_count - lower_count
        if strength > max_strength:
            max_strength = strength
            strongest_extension = extension
    return f""{class_name}.{strongest_extension}""",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,1,normal,['823'],"def cycpattern_check(a, b):
    if b in a:
        return True
    else:
        for i in range(len(b)):
            b = b[1:] + b[0]
            if b in a:
                return True
        return False",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,5,normal,"['823', '643', 'HumanEval/154', '91', '186']","def cycpattern_check(a, b):
    # Concatenate b with itself
    b_rotated = b + b
    # Check if a contains b or any of its rotations
    return b in a or any(a[i:i+len(b)] in b_rotated for i in range(len(a) - len(b) + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
154,HumanEval/154,10,normal,"['823', '643', 'HumanEval/154', '91', '186', '178', '897', '871', '192', '454']","def cycpattern_check(a, b):
    # Concatenate b with itself to cover all possible rotations
    b_rotations = b * 2
    # Check if a contains b or any of its rotations
    return b in a or any(a[i:i+len(b)] in b_rotations for i in range(len(a) - len(b) + 1))",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,1,normal,['HumanEval/155'],"def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,5,normal,"['HumanEval/155', '258', 'HumanEval/113', '904', '387']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
155,HumanEval/155,10,normal,"['HumanEval/155', '258', 'HumanEval/113', '904', '387', '784', '78', '155', '383', '109']","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,1,normal,['958'],"def int_to_mini_roman(number):
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',
        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000:'m'
    }
    result = ''
    for value in sorted(roman_numerals.keys(), reverse=True):
        while number >= value:
            result += roman_numerals[value]
            number -= value
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,5,normal,"['958', '961', '494', '116', 'HumanEval/156']","def int_to_mini_roman(number):
    roman_numerals = [
        (1000,'m'), (900, 'cm'), (500, 'd'), (400, 'cd'),
        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),
        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')
    ]
    result = ''
    for value, numeral in roman_numerals:
        while number >= value:
            result += numeral
            number -= value
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
156,HumanEval/156,10,normal,"['958', '961', '494', '116', 'HumanEval/156', '764', '785', '62', '479', '749']","def int_to_mini_roman(number):
    var_1 = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    var_2 = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
    var_3 = ''
    var_4 = 0
    while number > 0:
        for var_5 in range(number // var_1[var_4]):
            var_3 += var_2[var_4]
            number -= var_1[var_4]
        var_4 += 1
    return var_3.lower()",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,1,normal,['826'],"import math

def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return math.isclose(sides[2]**2, sides[0]**2 + sides[1]**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,5,normal,"['826', 'HumanEval/157', '449', '176', '677']","def right_angle_triangle(a, b, c):
    # Sort the sides of the triangle to ensure the longest side is last
    sides = sorted([a, b, c])
    # Check if the square of the longest side is equal to the sum of squares of the other two sides
    return sides[2]**2 == sides[0]**2 + sides[1]**2",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
157,HumanEval/157,10,normal,"['826', 'HumanEval/157', '449', '176', '677', '850', '198', '236', 'HumanEval/71', '51']","import math

def right_angle_triangle(a, b, c):
    sides = sorted([a, b, c])
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,1,normal,['480'],"def find_max(words):
    max_unique_chars = 0
    max_word = """"
    for word in words:
        unique_chars = len(set(word))
        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):
            max_unique_chars = unique_chars
            max_word = word
    return max_word",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,5,normal,"['480', '937', 'HumanEval/158', 'HumanEval/117', '128']","def find_max(words):
    max_unique_chars = 0
    max_word = """"
    for word in words:
        unique_chars = len(set(word))
        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):
            max_unique_chars = unique_chars
            max_word = word
    return max_word",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
158,HumanEval/158,10,normal,"['480', '937', 'HumanEval/158', 'HumanEval/117', '128', '862', '357', '315', '393', '562']","def find_max(words):
    max_unique_chars = 0
    max_word = """"
    for word in words:
        unique_chars = len(set(word))
        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):
            max_unique_chars = unique_chars
            max_word = word
    return max_word",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,1,normal,['HumanEval/159'],"def eat(number, need, remaining):
    return [number + min(need, remaining), max(remaining - need, 0)]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,5,normal,"['HumanEval/159', '907', 'HumanEval/102', '31', '123']","def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
159,HumanEval/159,10,normal,"['HumanEval/159', '907', 'HumanEval/102', '31', '123', '211', '167', '365', '169', 'HumanEval/115']","def eat(number, need, remaining):
    if need <= remaining:
        return [number + need, remaining - need]
    else:
        return [number + remaining, 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,1,normal,['218'],"def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i + 1]
        elif operator[i] == '-':
            result -= operand[i + 1]
        elif operator[i] == '*':
            result *= operand[i + 1]
        elif operator[i] == '//':
            result //= operand[i + 1]
        elif operator[i] == '**':
            result **= operand[i + 1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,5,normal,"['218', 'HumanEval/25', 'HumanEval/32', 'HumanEval/160', '445']","def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i+1]
        elif operator[i] == '-':
            result -= operand[i+1]
        elif operator[i] == '*':
            result *= operand[i+1]
        elif operator[i] == '//':
            result //= operand[i+1]
        elif operator[i] == '**':
            result **= operand[i+1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
160,HumanEval/160,10,normal,"['218', 'HumanEval/25', 'HumanEval/32', 'HumanEval/160', '445', '261', '726', 'HumanEval/11', '919', '343']","def do_algebra(operator, operand):
    result = operand[0]
    for i in range(len(operator)):
        if operator[i] == '+':
            result += operand[i+1]
        elif operator[i] == '-':
            result -= operand[i+1]
        elif operator[i] == '*':
            result *= operand[i+1]
        elif operator[i] == '//':
            result //= operand[i+1]
        elif operator[i] == '**':
            result **= operand[i+1]
    return result",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,1,normal,['HumanEval/27'],"def solve(s):
    if not any(c.isalpha() for c in s):
        return s[::-1]
    return ''.join(c.swapcase() if c.isalpha() else c for c in s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,5,normal,"['HumanEval/27', '557', '364', 'HumanEval/161', 'HumanEval/84']","def solve(s):
    if not any(c.isalpha() for c in s):
        return s[::-1]
    return ''.join(c.swapcase() if c.isalpha() else c for c in s)",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
161,HumanEval/161,10,normal,"['HumanEval/27', '557', '364', 'HumanEval/161', 'HumanEval/84', '917', '456', 'HumanEval/64', '91', 'HumanEval/134']","def solve(s):
    if any(c.isalpha() for c in s):
        return ''.join(c.swapcase() if c.isalpha() else c for c in s)
    else:
        return s[::-1]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,1,normal,['HumanEval/162'],"import hashlib

def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,5,normal,"['HumanEval/162', 'HumanEval/89', '132', '877', '330']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
162,HumanEval/162,10,normal,"['HumanEval/162', 'HumanEval/89', '132', '877', '330', '217', 'HumanEval/11', '226', '39', '374']","import hashlib

def string_to_md5(text):
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
163,HumanEval/163,1,normal,['HumanEval/163'],"def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
    return [i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0]",1.0,"defaultdict(<class 'list'>, {0: [(0, {'task_id': 0, 'passed': True, 'result': 'passed', 'completion_id': 0})]})"
